Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION Trigger Registration
PROC_TriggerRegisterForPlayers(S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6);
PROC_TriggerRegisterForPlayers(S_SHA_Necromancer_ShadowQuakeNecroRoom_38f1d1d6-0913-47e2-b80c-faad8b241348);
PROC_TriggerRegisterForPlayers(S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc);
PROC_TriggerRegisterForParty(S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c);

TriggerRegisterForCharacter((TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c, (CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
TriggerRegisterForCharacter((TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c, S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f);
		

TriggerRegisterForItems(S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6);
//END_REGION

//REGION Item Ownership
DB_ItemOwnerShipTriggers("SCL_Main_A", (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c, (CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
//END_REGION

//REGION Light Management
TeleportTo(S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, S_SHA_Necromancer_ShadowquakePoint_8591d5c8-c366-4fb6-8c41-e3e7ec3bde94);

DB_SHA_Necromancer_EquipmentSlots("Melee Main Weapon");
DB_SHA_Necromancer_EquipmentSlots("Melee Offhand Weapon");
//END_REGION

//REGION Barricade
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_NecroInvitation_239d2daf-921b-a1d9-a7c6-f3b29d5e1292, S_SHA_Necromancer_ShadowQuakeNecroRoom_38f1d1d6-0913-47e2-b80c-faad8b241348, 1, 0, 1);
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_GolemInvitation_1b8e8dda-89ea-cdcc-2b20-1f911c62c921, S_SHA_Necromancer_ShadowQuakeNecroRoom_38f1d1d6-0913-47e2-b80c-faad8b241348, 1, 0, 1);
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_NecroInvitation_239d2daf-921b-a1d9-a7c6-f3b29d5e1292, S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, 1, 0, 1);
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_GolemInvitation_1b8e8dda-89ea-cdcc-2b20-1f911c62c921, S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, 1, 0, 1);
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, (TRIGGER)S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc, 1, 0, 0);
DB_AddCharactersInTriggerToDialog((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c, 1, 0, 1);

//Maintain two different trigger bounds as to also check for players in the necromancer room.
DB_SHA_Necromancer_ShadowQuakeAreas((TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6);
DB_SHA_Necromancer_ShadowQuakeAreas((TRIGGER)S_SHA_Necromancer_ShadowQuakeNecroRoom_38f1d1d6-0913-47e2-b80c-faad8b241348);

DB_Inclusion_NPCDialog((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, (CHARACTER)S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4);

DB_GlobalFlagReactionAfterDialog((FLAG)SHA_Necromancer_Event_StartShadowquake_a815c463-224b-c2b2-a8a5-3a986449bbac, (DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a);

DB_IgnoreMutingStatussesDialog((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a);

DB_DialogBlockAttackButton((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a);
//END_REGION

//REGION Necromancer
DB_Dialogs((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_Chosen_a420e40c-ac8e-ec47-49f0-2c4f82eaef96);
DB_Inclusion_NPCDialog((DIALOGRESOURCE)SHA_Necromancer_Chosen_a420e40c-ac8e-ec47-49f0-2c4f82eaef96, (CHARACTER)S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f);

DB_Dialogs(S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, (DIALOGRESOURCE)SHA_Necromancer_FleshGolem_419664d9-ea51-da41-607e-99377c045462);

DB_HasItemEvent((ITEM)S_SHA_SummonGolemBell_b25873af-55e9-4816-a81c-3be5b95574a2, (FLAG)SHA_Necromancer_State_HasGolemBell_50315432-0d5c-4e13-ab5d-2bded5cbe4ea);
DB_GiveItemToEvent((ITEM)S_SHA_SummonGolemBell_b25873af-55e9-4816-a81c-3be5b95574a2, (FLAG)SHA_Necromancer_Event_GiveGolemBell_595a33f0-7805-46b2-ad04-8fee85ff7828);

DB_HasItemEvent((ITEM)S_SHA_Necromancer_MotherBottle_1818419d-2669-46e7-b015-04fac4dd383e, (FLAG)SHA_Necromancer_State_HasMother_16915bec-f3af-3a45-a3d9-049d25c03cdc);
DB_GiveItemToEvent((ITEM)S_SHA_Necromancer_MotherBottle_1818419d-2669-46e7-b015-04fac4dd383e, (FLAG)SHA_Necromancer_Event_GiveMother_095f0396-742d-ea7c-2bb0-1b8b0afa111f);

DB_BookFlags(S_SHA_Necromancer_Research_822d964d-1c62-4465-b493-1aa1c34baef3,GLO_Ketheric_Knows_AboutImmortality_6d37f35d-fcaf-4b80-97f6-e44473ef5fbb);

// Skeletons are added to this DB 
DB_SHA_Necromancer_Undead((CHARACTER)S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f);

SetCanJoinCombat(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,0);
SetCanJoinCombat(S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f,0);

// Barricade skeletons in separate DB since they speak separately from the other undead (scouts are added here)
DB_SHA_Necromancer_SkeletonGuards((CHARACTER)S_SHA_Necromancer_Skeleton_000_5044a633-a670-4c2f-a20f-16915b086ae3);
DB_SHA_Necromancer_SkeletonGuards((CHARACTER)S_SHA_Necromancer_Skeleton_001_9b488ee8-6344-4fd8-afad-65a9fa295e49);
DB_SHA_Necromancer_SkeletonGuards((CHARACTER)S_SHA_Necromancer_Skeleton_002_3eff903e-b99b-4099-b912-f71a9d02b4a2);

// Ghouls in separate DB for spot events
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_Ghoul_000_b8584c3f-2ed8-44ff-9831-7d6fb2115516);
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_Ghoul_001_1ffb5583-7595-42d1-a985-903b2717be6a);
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_Ghoul_002_bad9126a-1674-4969-9fb5-7df8c69e76e4);

DB_SpotPlayers((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer_StartInitialDialog", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
DB_SpotPlayers_SpotTrigger(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer_StartInitialDialog", (TRIGGER)S_SHA_Necromancer_MeetingNecroDialogTrigger_1603947b-371a-479d-be80-f4e8123840fd);

PROC_SceneDialogOnly("SHA_Necromancer_MeetingNecromancer", (CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_MeetingNecroDialogTrigger_1603947b-371a-479d-be80-f4e8123840fd);

SetOnStage((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, 0);
PROC_SHA_Necromancer_ZombifieNere();
PROC_SHA_Necromancer_NereCheck();
//END_REGION

//REGION Shadowquakes
// Params: Quake, WaveNumber
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave01_01_8de27b5b-0f08-4f89-8dc6-21402290a993, 1);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave01_02_5a6497f8-3bb8-4e4a-9765-1df0c4622c42, 1);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave01_03_95435eb4-294b-4259-a7a5-14f4c5deb674, 1);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave01_04_95628d57-5b20-4892-8d24-87cd3a39bc74, 1);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave02_01_f90cfca5-8bb6-4e18-aea1-dc6b71452a86, 2);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave02_02_60ea8f19-2317-44e5-be5f-6cbf39e1c659, 2);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave02_03_feb424f1-c5e9-489a-97eb-f398b574cca4, 2);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave02_04_a7459143-097c-4e50-be4c-de723c007a33, 2);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave03_01_5d58ad95-fd91-4943-9672-257b40dbc19d, 3);
DB_SHA_Necromancer_Shadowquake((GUIDSTRING)S_SHA_Necromancer_ShadowquakeItem_Wave03_02_Boss_370d803c-1682-449e-8e38-8a5518bdaaed, 3);

SetOnStage(S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, 0);

DB_CombatReact_AD_OnEntered(S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, (DIALOGRESOURCE)SHA_Necromancer_AD_Justiciar_CombatStarts_14757e1a-2385-10ff-70e8-32881b973eac);
DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, (DIALOGRESOURCE)SHA_Necromancer_AD_Justiciar_TakingTurn_1_e1d6c248-8206-897e-d333-01873980eb0c, 1);
DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, (DIALOGRESOURCE)SHA_Necromancer_AD_Justiciar_TakingTurn_2_bf54d68e-bb66-6a75-ffa0-74ec0cd5425b, 2);

// Shadowquakes added to defeat counter in KB so we only have to maintain a single DB
// A single Dark Justiciar is on stage when combat starts - cinematic shows it emerging from a Shadowquake
DB_GLO_DefeatCounter((CHARACTER)S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, "SHA_Necromancer_ShadowquakeDefeatCounter");
DB_GLO_DefeatCounter_AllPermaDefeatedGlobalFlag("SHA_Necromancer_ShadowquakeDefeatCounter", (FLAG)SHA_Necromancer_State_JusticiarsDefeated_30313b78-abb9-450d-942b-7f6bc7837e08);

//GLO Defeat Counter for Necro and his undead
DB_GLO_DefeatCounter((CHARACTER)S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, "SHA_Necromancer_NecroAndUndead");

//END_REGION
KBSECTION
//REGION Undead Management
// Same as PROC_COL_NecromancerLab_RecoverCandidate() but we don't want all the features from that proc + add the visuals of Nere for save patching.
// No applying UndeadFortitude since base character already has it.
PROC
PROC_SHA_Necromancer_ZombifieNere()
THEN
ApplyStatus(S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, "COL_ZOMBIE", -1.0, 1, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
ApplyStatus(S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, "BLOOD_COVERED_FULL", -1.0, 1, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
SetTag(S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, (TAG)IGNORE_COMBAT_LATE_JOIN_PENALTY_6d60bed7-10cc-4b52-8fb7-baa75181cd49);
PROC_GLO_DeleteAllWeapons((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75);
PROC_CombatReact_RemoveCombatADs((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75);

PROC
PROC_SHA_Necromancer_NereCheck()
AND
DB_GlobalFlag((FLAG)UND_TheDrowNere_State_WentMT_e118cea2-da4d-4a4a-a761-0dd096699a43)
THEN
SetOnStage((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, 1);
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75);

IF
DB_GlobalFlag((FLAG)UND_TheDrowNere_State_WentMT_e118cea2-da4d-4a4a-a761-0dd096699a43)
THEN
SetOnStage((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, 1);
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75);

IF
DB_SHA_Necromancer_SkeletonGuards(_Skeleton)
THEN
DB_SHA_Necromancer_Undead(_Skeleton);

IF
DB_SHA_Necromancer_Ghouls(_Ghoul)
THEN
SetCanJoinCombat(_Ghoul,0);
DB_SHA_Necromancer_Undead(_Ghoul);

IF
DB_SHA_Necromancer_Ghouls(_Ghoul)
THEN
DB_SpotPlayers(_Ghoul, "SHA_Necromancer_GhoulSpotting", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
DB_SpotPlayers_Continuous(_Ghoul, "SHA_Necromancer_GhoulSpotting");

IF
DB_SHA_Necromancer_Undead(_Undead)
THEN
TriggerRegisterForCharacter(S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, _Undead);

IF
DB_PermaDefeated(_Undead)
AND
DB_SHA_Necromancer_Undead((CHARACTER)_Undead)
THEN
TriggerUnregisterForCharacter((TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, _Undead);
SetFlag(SHA_Necromancer_State_LostUndead_62ff04db-a969-791d-95d8-473fe74f3b24, NULL_00000000-0000-0000-0000-000000000000, 0);
NOT DB_SHA_Necromancer_Undead(_Undead);

IF
DB_PermaDefeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
AND
DB_SHA_Necromancer_SkeletonGuards(_Undead)
THEN
Die(_Undead, DEATHTYPE.DoT, NULL_00000000-0000-0000-0000-000000000000, 1, 1, 0.0);

IF
DB_PermaDefeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
AND
DB_SHA_TadpoledSkeletons_Scouts(_Undead)
THEN
Die(_Undead, DEATHTYPE.DoT, NULL_00000000-0000-0000-0000-000000000000, 1, 1, 0.0);

// Remaining undead leave with Balthazar when the player reaches Nightsong's Prison
IF
DB_GlobalFlag((FLAG)SHA_NightsongPrison_State_PlayerEnteredPrison_f2cbe7cf-5223-4522-a649-879d08638282)
AND
DB_SHA_Necromancer_Undead(_Undead)
AND
NOT DB_PermaDefeated(_Undead)
THEN
PROC_DisappearOutOfSight(_Undead, "Walk", 0, "SHA_Necromancer_UndeadLeave");

IF 
DB_SHA_Necromancer_Undead(_Undead)
AND
NOT DB_GLO_DefeatCounter(_Undead, "SHA_Necromancer_NecroAndUndead")
THEN
DB_GLO_DefeatCounter(_Undead, "SHA_Necromancer_NecroAndUndead");
//END_REGION

//REGION Shadowquake Management
IF
DB_SHA_Necromancer_Shadowquake(_Quake, _)
THEN
SetOnStage(_Quake, 0);
//END_REGION

//REGION Barricade Dialog
// Set Skeletons as owner to hook into scene interruptions
IF
DB_SHA_Necromancer_SkeletonGuards(_Skeleton)
THEN
TriggerRegisterForCharacter((TRIGGER)S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc, _Skeleton);
PROC_SceneDialogOnly("SHA_Necromancer_BarricadeScene", _Skeleton, (TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6);

// Cancel the Barricade scene when the player enters Nightsong's Prison and prevent Shadowquake from starting
IF
DB_GlobalFlag((FLAG)SHA_NightsongPrison_State_PlayerEnteredPrison_f2cbe7cf-5223-4522-a649-879d08638282)
THEN
PROC_SceneOver("SHA_Necromancer_BarricadeScene");
DB_OnlyOnce("SHA_Necromancer_StartingBarricadeDialog");

IF
DB_SceneManager(_Skeleton, "SHA_Necromancer_BarricadeScene")
THEN
DB_Dialogs(_Skeleton, (DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a);
DB_SpotPlayers(_Skeleton, "SHA_Necromancer_BarricadeScene", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
DB_SpotPlayers_SpotTrigger(_Skeleton, "SHA_Necromancer_BarricadeScene", (TRIGGER)S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc);
DB_SpotPlayers_TargetIgnoreCantTalk(_Skeleton, "SHA_Necromancer_BarricadeScene");
DB_SpotPlayers_SpotTrigger_ManualRegistering((TRIGGER)S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc); // Manual register so we can use this trigger to add addition players to dialog

// If player somehow gets into Balthazar's room begin the Barricade dialog without the skeletons
IF
DB_InRegion(_Player, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
AND
DB_PartyMembers(_Player)
THEN
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, _Player);

// If the player uses Balthazar's door begin the Barricade dialog without the skeletons
IF
StartedLockpicking(_Player, (ITEM)S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7)
AND
DB_PartyMembers(_Player)
THEN
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, _Player);

IF
UseStarted(_Player, (ITEM)S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7)
AND
DB_PartyMembers(_Player)
THEN
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, _Player);

IF
DialogStarted((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, _)
THEN
PROC_SceneOver("SHA_Necromancer_BarricadeScene");

IF
DialogRequestFailed(SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, _)
THEN
PROC_SceneOver("SHA_Necromancer_BarricadeScene");
SetFlag(SHA_Necromancer_Event_StartShadowquake_a815c463-224b-c2b2-a8a5-3a986449bbac, NULL_00000000-0000-0000-0000-000000000000, 0);

// Start dialog when player is spotted
PROC
PROC_SceneInterrupted(_Skeleton, _Player, "SHA_Necromancer_BarricadeScene", "Spotted")
THEN
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)S_SHA_Necromancer_Skeleton_002_3eff903e-b99b-4099-b912-f71a9d02b4a2, (CHARACTER)_Player);

// Other scene interruptions shortcut to dialog without the skeletons - except if dialog was manually started
PROC
PROC_SceneInterrupted(_, _Player, "SHA_Necromancer_BarricadeScene", _Interrupt)
AND
_Interrupt != "StartedDialog"
THEN
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, _Player);

PROC
PROC_SceneOver("SHA_Necromancer_BarricadeScene")
AND
DB_SHA_Necromancer_SkeletonGuards(_Skeleton)
THEN
PROC_RemoveAllDialogEntriesForSpeaker (_Skeleton);
DB_Dialogs(_Skeleton, (DIALOGRESOURCE)SHA_Necromancer_Skeletons_9a891e71-530b-f11a-9450-6759e4fd51b8);
PROC_SpotPlayers_StopSpotting(_Skeleton, "SHA_Necromancer_BarricadeScene");

PROC
PROC_StartDialog_AddExtraSpeakers((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, _ID)
AND
DialogGetInvolvedNPC(_ID, 1, _SpeakingGuard)
AND
DB_SHA_Necromancer_SkeletonGuards(_Guard)
AND
_Guard != _SpeakingGuard
AND
DB_InRegion(_Guard, (TRIGGER)S_SHA_Necromancer_BarricadeDialogTrigger_6e4cd388-254c-40b6-b07f-b1fe028c00fc)
THEN
PROC_DialogAddSpeakingActor(_ID, _Guard);

// Null speakers are initial justiciar + extra skeletons for cinematic use
PROC
PROC_SHA_MeetingNecromancer_StartBarricadeDialog((CHARACTER)_SpeakerNPC, (CHARACTER)_PlayerSpeaker)
AND
NOT DB_GlobalFlag((FLAG)SHA_Necromancer_Event_StartShadowquake_a815c463-224b-c2b2-a8a5-3a986449bbac)
AND
QRY_OnlyOnce("SHA_Necromancer_StartingBarricadeDialog")
AND
QRY_StartDialog_Fixed((DIALOGRESOURCE)SHA_Necromancer_Barricade_734cc4ae-3f54-6948-dde2-7227fc04ff4a, _SpeakerNPC, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, _PlayerSpeaker)
THEN
DB_NOOP(1);
//END_REGION

//REGION Shadowquake Combat
// Track light sources for when the Shadowquake spawns
IF
ItemEnteredTrigger(_Item, S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, _)
AND
Exists(_Item,1)
THEN
DB_SHA_Necromancer_PotentialLights(_Item);

IF
ItemLeftTrigger(_Item, S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6, _)
THEN
NOT DB_SHA_Necromancer_PotentialLights(_Item);

IF
SwitchedCombat(_Quake, _OldCombatID, _NewCombatID)
AND
DB_SHA_Necromancer_Shadowquake(_Quake, _)
AND
DB_SHA_Necromancer_ShadowquakeCombat(_OldCombatID)
THEN
NOT DB_SHA_Necromancer_ShadowquakeCombat(_OldCombatID);
DB_SHA_Necromancer_ShadowquakeCombat(_NewCombatID);

IF
EnteredCombat(_Quake, _ID)
AND
DB_SHA_Necromancer_Shadowquake((ITEM)_Quake, _)
THEN
DB_SHA_Necromancer_ShadowquakeCombat(_ID);

IF
EnteredCombat(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _ID)
AND
DB_SHA_Necromancer_ShadowquakeCombat(_ID)
THEN
SetFlag(SHA_Necromancer_State_NecroFoughtJusticiars_51ae328c-d1ac-43e9-9912-f4ab0ca6e159, NULL_00000000-0000-0000-0000-000000000000, 0);

PROC
PROC_SHA_Necromancer_SpawnShadowQuake((GUIDSTRING)_Quake, 1)
THEN
AppearAt((CHARACTER)_Quake, _Quake, 1, NULL_00000000-0000-0000-0000-000000000000, "SHA_Necromancer_ShadowquakeSpawned", 0);

PROC
PROC_SHA_Necromancer_SpawnShadowQuake((GUIDSTRING)_Quake, 0)
THEN
PROC_SetOnStage(_Quake,1);

// Activate new Shadowquakes as combat rounds progress
IF
CombatRoundStarted(_ID, _Round)
AND
NOT DB_GlobalFlag((FLAG)SHA_Necromancer_State_JusticiarsDefeated_30313b78-abb9-450d-942b-7f6bc7837e08)
AND
DB_SHA_Necromancer_ShadowquakeCombat(_ID)
AND
_Round != 1
AND
DB_SHA_Necromancer_Shadowquake(_Quake, _Round)
AND
IsCharacter(_Quake,_IsCharacter)
THEN
PROC_SHA_Necromancer_SpawnShadowQuake(_Quake,_IsCharacter);
DB_GLO_DefeatCounter(_Quake, "SHA_Necromancer_ShadowquakeDefeatCounter");

// Add spawned Justiciars to the defeat counter
IF
EnteredLevel(_Justiciar, _, _Level)
AND
DB_CurrentLevel(_Level)
AND
QRY_IsExistingCharacter(_Justiciar, 1)
AND
CharacterGetOwner((CHARACTER)_Justiciar, _Shadowquake)
AND
DB_GLO_DefeatCounter(_Shadowquake, "SHA_Necromancer_ShadowquakeDefeatCounter")
THEN
DB_GLO_DefeatCounter(_Justiciar, "SHA_Necromancer_ShadowquakeDefeatCounter");

PROC
PROC_GlobalFlagReactionAfterDialog((FLAG)SHA_Necromancer_Event_StartShadowquake_a815c463-224b-c2b2-a8a5-3a986449bbac)
THEN
PROC_SHA_Necromancer_StartShadowquakeCombat();

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_Necromancer_SkeletonGuards(_Skeleton)
THEN
PROC_SpotPlayers_StopSpotting(_Skeleton, "SHA_Necromancer_BarricadeSpotting");

// If the player avoided the scouts, finish their scouting when the Shadowquake combat begins
PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_TadpoledSkeletons_Scouts(_Scout)
THEN
PROC_SceneOver("SHA_TadpoledSkeletons_Scouting");

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_Necromancer_Shadowquake(_Quake, 1)
AND
IsCharacter(_Quake,_IsCharacter)
THEN
PROC_SHA_Necromancer_SpawnShadowQuake(_Quake,_IsCharacter);
DB_GLO_DefeatCounter(_Quake, "SHA_Necromancer_ShadowquakeDefeatCounter");

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_Necromancer_Shadowquake(_Quake, 1)
AND
DB_Players(_Player)
AND
DB_InRegion(_Player, (TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6)
THEN
EnterCombat(_Quake, _Player);

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_Necromancer_Shadowquake(_Quake, 1)
AND
DB_SHA_Necromancer_SkeletonGuards(_Skellie)
AND
DB_InRegion(_Skellie, (TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6)
THEN
EnterCombat(_Quake, _Skellie);

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_InRegion(_Char, (TRIGGER)S_SHA_Necromancer_ShadowquakeArea_a41b16b6-d2ae-425c-a0bf-80183a66e7e6)
AND
DB_SHA_Necromancer_EquipmentSlots(_Slot)
AND
GetEquippedItem(_Char, _Slot, _Item)
THEN
RemoveStatusesWithGroup(_Item, "SG_Light", NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
AND
DB_SHA_Necromancer_PotentialLights(_Item)
AND
Exists(_Item,1)
THEN
RemoveStatusesWithGroup(_Item, "SG_Light", NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_SHA_Necromancer_StartShadowquakeCombat()
THEN
PROC_SHA_StopShadowquakeShakes();
SetOnStage(S_SHA_Necromancer_InitialJusticiar_83f1d9a0-8d28-46c1-93a8-66388541fcb4, 1);
//END_REGION

//REGION Necromancer Room
IF
DB_InRegion((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
THEN
PROC_SpotPlayers_RestartSpotting(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer_StartInitialDialog");

IF
EnteredTrigger((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
AND
NOT DB_OnlyOnce("SHA_Necromancer_HideoutDoor_NecromancerSetup")
THEN
SetCanJoinCombat(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,0);	//disable joining combat if the door is still closed

IF
LeftTrigger((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
THEN
SetCanJoinCombat(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,1);
PROC_SpotPlayers_StopSpotting(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer_StartInitialDialog");

IF
LeftTrigger(S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
THEN
SetCanJoinCombat(S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f,1);

IF
DB_GlobalFlag((FLAG)SHA_Necromancer_State_JusticiarsDefeated_30313b78-abb9-450d-942b-7f6bc7837e08)
THEN
Unlock(S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7);
Open(S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7);

// If Balthazar enters the Shadowquake combat stop is normal meeting scene
IF
DB_GlobalFlag((FLAG)SHA_Necromancer_State_NecroFoughtJusticiars_51ae328c-d1ac-43e9-9912-f4ab0ca6e159)
THEN
PROC_SceneOver("SHA_Necromancer_MeetingNecromancer");

IF
DB_GlobalFlag((FLAG)SHA_Necromancer_State_JusticiarsDefeated_30313b78-abb9-450d-942b-7f6bc7837e08)
AND
NOT DB_GlobalFlag((FLAG)SHA_Necromancer_State_NecroFoughtJusticiars_51ae328c-d1ac-43e9-9912-f4ab0ca6e159)
AND
DB_Players(_Player)
AND
DB_SHA_Necromancer_ShadowQuakeAreas((TRIGGER)_Trigger)
AND
DB_InRegion(_Player, _Trigger)
AND
DB_InRegion((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
AND
NOT DB_OnlyOnce("SHA_Necromancer_InvitationDialog")
AND
NOT DB_OnlyOnce("SHA_Necromancer_NecroDialogStarted")
AND
QRY_StartDialog((DIALOGRESOURCE)SHA_Necromancer_GolemInvitation_1b8e8dda-89ea-cdcc-2b20-1f911c62c921, (CHARACTER)S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, _Player)
AND
QRY_OnlyOnce("SHA_Necromancer_InvitationDialog")
THEN
DB_NOOP(1);
	
IF
DB_GlobalFlag((FLAG)SHA_Necromancer_State_JusticiarsDefeated_30313b78-abb9-450d-942b-7f6bc7837e08)
AND
DB_GlobalFlag((FLAG)SHA_Necromancer_State_NecroFoughtJusticiars_51ae328c-d1ac-43e9-9912-f4ab0ca6e159)
AND
DB_Players(_Player)
AND
DB_SHA_Necromancer_ShadowQuakeAreas((TRIGGER)_Trigger)
AND
DB_InRegion(_Player, _Trigger)
AND
DB_InRegion((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c)
AND
NOT DB_OnlyOnce("SHA_Necromancer_InvitationDialog")
AND
NOT DB_OnlyOnce("SHA_Necromancer_NecroDialogStarted")
AND
QRY_StartDialog((DIALOGRESOURCE)SHA_Necromancer_NecroInvitation_239d2daf-921b-a1d9-a7c6-f3b29d5e1292, (CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player)
AND
QRY_OnlyOnce("SHA_Necromancer_InvitationDialog")
THEN
DB_NOOP(1);

// If the NecroInvitation dialog has finished/failed start a new meeting scene 
IF
DialogEnded((DIALOGRESOURCE)SHA_Necromancer_NecroInvitation_239d2daf-921b-a1d9-a7c6-f3b29d5e1292, _)
THEN
PROC_SceneDialogOnly("SHA_Necromancer_MeetingNecromancerAfterInvite", (CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (TRIGGER)S_SHA_Necromancer_Lair_186344d1-746d-424e-8822-2c29179ab34c);

IF
DialogStarted(SHA_Necromancer_Chosen_a420e40c-ac8e-ec47-49f0-2c4f82eaef96, _)
AND
DB_GlobalFlag((FLAG)SHA_Necromancer_State_WaitingForPlayers_1ad01a51-4bd3-42e6-a1de-02696bc9da67)
THEN
ClearFlag(SHA_Necromancer_State_WaitingForPlayers_1ad01a51-4bd3-42e6-a1de-02696bc9da67, NULL_00000000-0000-0000-0000-000000000000);

// Balthazar's entourage has a separate faction from the skeletons
// We don't want Balthazar to become hostile if some of his skeletons are killed before meeting him
// Once a player has met Balthazar, or opened the door to his room, set his entourage's faction to the main Necromancer faction
// He will now become hostile if the player attacks any of his minions
IF
Opened((ITEM)S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7)
AND
DB_SHA_Necromancer_Undead(_Char)
AND
NOT GetFaction(_Char, ACT2_SHA_Necromancer_6a8d2366-831d-48ad-8d58-1f99a5cc7ca1)
THEN
SetFaction(_Char, (FACTION)ACT2_SHA_Necromancer_6a8d2366-831d-48ad-8d58-1f99a5cc7ca1);

IF
Opened((ITEM)S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7)
AND
QRY_OnlyOnce("SHA_Necromancer_HideoutDoor_GhoulSetup")
AND
DB_SHA_Necromancer_Ghouls(_Ghoul)
THEN
SetCanJoinCombat(_Ghoul,1);

IF
Opened((ITEM)S_SHA_Necromancer_HideoutDoor_d5f0872a-c116-4493-bdae-f75dad76e5f7)
AND
QRY_OnlyOnce("SHA_Necromancer_HideoutDoor_NecromancerSetup")
THEN
SetCanJoinCombat(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,1);
SetCanJoinCombat(S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f,1);

IF
FlagSet(SHA_Necromancer_HasMet_AtTemple_fcc54d49-1f5c-5551-7fd9-a2a3b533c877, _, _)
AND
DB_SHA_Necromancer_Undead(_Char)
AND
NOT GetFaction(_Char, (FACTION)ACT2_SHA_Necromancer_6a8d2366-831d-48ad-8d58-1f99a5cc7ca1)
THEN
SetFaction(_Char, (FACTION)ACT2_SHA_Necromancer_6a8d2366-831d-48ad-8d58-1f99a5cc7ca1);

PROC
PROC_SpotPlayers_Spotted(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer_StartInitialDialog", _Player)
AND
QRY_OnlyOnce("SHA_Necromancer_NecroDialogStarted")
AND
QRY_StartDialogCustom((DIALOGRESOURCE)SHA_Necromancer_Chosen_a420e40c-ac8e-ec47-49f0-2c4f82eaef96, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player, 0, 0, 1, 0)
THEN
DB_NOOP(1);

PROC
PROC_SpotPlayers_Spotted(_Ghoul, "SHA_Necromancer_GhoulSpotting", _Player)
AND
DB_SHA_Necromancer_Ghouls(_Ghoul)
THEN
SetDualEntityEvent(_Ghoul, _Player, "SHA_Necromancer_GhoulSpottedPlayer");
//END_REGION

//REGION Debug
IF
TextEvent("SHA_Necromancer_StartShadowquake")
THEN
PROC_SHA_Necromancer_StartShadowquakeCombat();

IF
TextEvent("SHA_Necromancer_ZombieNere")
THEN
SetFlag((FLAG)UND_TheDrowNere_State_WentMT_e118cea2-da4d-4a4a-a761-0dd096699a43);
SetOnStage((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75, 1);
DB_SHA_Necromancer_Ghouls((CHARACTER)S_SHA_Necromancer_NereZombie_7e0ee67a-d2a4-48d2-bca0-a9ae373f4f75);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act2"
