Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION Legend of Ansur book
DB_HasItemEvent((ITEM)S_GLO_AnsurGhost_LegendOfAnsurBook_b0ecc3d5-85ad-48fa-bc47-988107507e6c, (FLAG)WYR_AnsurGhost_State_HasAnsurBook_e0aebfc7-5496-4b2d-aeb6-bcd17c9c275a);
DB_GiveItemToEvent((ITEM)S_GLO_AnsurGhost_LegendOfAnsurBook_b0ecc3d5-85ad-48fa-bc47-988107507e6c, (FLAG)WYR_AnsurGhost_Event_GiveAnsurBook_2205be22-1109-47e5-854a-8a6835971218);
//END_REGION Legend of Ansur book

//REGION Sharess Caress potent drink
DB_GLO_PotentDrink_BlackedOutPrisons(
	"BGO_Main_A", 
	"BGO_Main_A_WyrmRock", 
	(TRIGGER)S_WYR_PrisonCrimeRegionTrigger_2e0d8b76-d1d8-433c-8436-419a16a598ef, 
	(CHARACTER)S_WYR_WyrmRockPrison_Guard_003_cbf95410-351a-491e-92aa-1663df98c6f5,
	(DIALOGRESOURCE)WYR_WyrmRockPrison_Guard_003_AfterCarousing_3d22bc2b-6f01-979d-392c-7f256c1dfdbf);
DB_GLO_PotentDrink_BlackedOutPrisons(
	"CTY_Main_A", 
	"CTY_Main_A_LowerCity", 
	(TRIGGER)S_LOW_Prison_CrimeRegion_65df8e10-39b5-4f28-aa10-fa438dc2249d, 
	(CHARACTER)S_LOW_PrisonGuard01_6dd2049c-413c-4c68-b58f-2a0cf5094053,
	(DIALOGRESOURCE)LOW_PrisonGuard03_AfterCarousing_2f51494f-0921-4676-d30e-5ec9a572875a);

DB_GLO_PotentDrink_BlackedOutUsers("");
NOT DB_GLO_PotentDrink_BlackedOutUsers("");
//END_REGION

//REGION Circus: Bag of molding
DB_WYR_Circus_BagOfMolding_FoodConverter((ITEMROOT)CONS_GEN_Food_Fish_A_7dfc4b31-a0fb-48a4-8950-83b61c03fae5,(ITEMROOT)CONS_FOOD_Fish_Rotten_A_0f34372c-520a-475d-a3c0-7c385fd549b7);
DB_WYR_Circus_BagOfMolding_FoodConverter(DEC_HAR_Fish_Small_A_0afb1949-b404-40fc-a84c-6acb9de7bc13, CONS_FOOD_Fish_Rotten_A_0f34372c-520a-475d-a3c0-7c385fd549b7);
DB_WYR_Circus_BagOfMolding_FoodConverter(DEC_HAR_Fish_Small_B_bf139970-1fd8-4cc0-bb27-d03e90bd4c44, CONS_FOOD_Fish_Rotten_B_03a94ad3-a856-44a0-a897-8912078a9115);
DB_WYR_Circus_BagOfMolding_FoodConverter(DEC_HAR_Fish_Small_C_2d484c26-e14d-4d91-a7a1-e437d6c99346, CONS_FOOD_Fish_Rotten_C_53664ef4-bfda-4775-a8da-780ae07343e4);
DB_WYR_Circus_BagOfMolding_FoodConverter(DEC_HAR_Fish_Small_D_7c115cf9-2a08-413e-9875-e5aa7f5926e2, CONS_FOOD_Fish_Rotten_D_be9b2f84-2439-453e-a0e2-1c2a15943500);
DB_WYR_Circus_BagOfMolding_FoodConverter(DEC_HAR_Fish_Small_E_981187cd-28d2-486f-87c1-515a42699dcd, CONS_FOOD_Fish_Rotten_D_be9b2f84-2439-453e-a0e2-1c2a15943500);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_FOOD_Fruit_Banana_A_9ff71d3a-1c01-4e16-b151-6219ae376087, CONS_FOOD_Fruit_Banana_A_Rotten_89875ae3-2ce8-4a6b-88fe-da2426f1b6ed);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_FOOD_Fruit_Lemon_A_6cd7804b-31c3-4eac-b9fd-c8692d609a08, CONS_FOOD_Fruit_Lemon_A_Rotten_dc980269-d8bd-4a25-b521-d3ac7bb4812f);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_FOOD_Vegetable_Carrot_A_a0aea0ba-0859-4352-a069-69a16e1e4401, CONS_FOOD_Vegetable_Carrot_A_Rotten_89439def-e8bc-43c3-bec1-331492d01d74);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_FOOD_Vegetable_Tomato_A_27e3719a-884a-4739-a3f4-0850623c623b, CONS_FOOD_Vegetable_Tomato_A_Rotten_32a3bb2c-ce98-41ec-9476-06867d354ca3);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_Fungi_Mushroom_Agaric_A_f55f45ec-e30b-4745-9f22-431af1b308f6, CONS_Fungi_Mushroom_Agaric_A_Rotten_42a68ee1-6d71-455e-99b2-278a53be5504);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_Fungi_Mushroom_Agaric_B_2399fb4a-b0fd-41f3-b15b-1d9a8e6f8293, CONS_Fungi_Mushroom_Agaric_B_Rotten_466d35b7-3c1a-4bd7-be91-262dd297b320);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Blue_Piece_A_48f47287-908b-49aa-ab6a-5d4679ca4117, CONS_GEN_Food_Cheese_Blue_Piece_A_Rotten_6fc0f6fd-a5b5-40d2-8f76-b864b7f71093);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Blue_Piece_B_6c4f585b-c6d1-42fe-b3ea-282d0d3ac3a3, CONS_GEN_Food_Cheese_Blue_Piece_B_Rotten_d3d36702-9293-4605-a0ce-7e3b1b38394d);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Blue_Wheel_A_1a3fa26c-f97d-4106-a0c9-c1123ca8dcbc, CONS_GEN_Food_Cheese_Blue_Wheel_A_Rotten_d90396df-b799-44f3-bbf0-13c5c90c3260);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Cheddar_Piece_A_06474f97-0dd0-45e6-8db8-5f75009bf336, CONS_GEN_Food_Cheese_Cheddar_Piece_A_Rotten_63cc183f-e726-48d6-a91d-da26dacb6ee0);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Cheddar_Piece_B_a213b686-7b71-4634-ab15-85ec29ac018c, CONS_GEN_Food_Cheese_Cheddar_Piece_B_Rotten_46ca277b-6488-48aa-8f16-2c9fdca4e236);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Cheddar_Wheel_A_8cca8f05-63b2-4bff-8494-9609bf29af66, CONS_GEN_Food_Cheese_Cheddar_Wheel_A_Rotten_89d194fd-3f0c-487b-8b60-e5ab1a2bd522);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Goat_Piece_A_cb0039bf-dd5e-41f2-8241-a52fa45e5ef6, CONS_GEN_Food_Cheese_Goat_Piece_A_Rotten_f964cf56-066d-460d-a6a7-2b9acb78be7f);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Goat_Piece_B_41fe7d01-dd8a-4c7d-87f4-d397f9b479aa, CONS_GEN_Food_Cheese_Goat_Piece_B_Rotten_9b4b0903-b324-43c6-9d92-6107f78f6ebc);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Cheese_Goat_Wheel_A_f0b27ddf-8e58-438a-8a3f-7d7c339d86e2, CONS_GEN_Food_Cheese_Goat_Wheel_A_Rotten_8a85cc9b-f865-4582-bb39-1272378f552f);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Egg_A_86849852-69de-482e-b7f6-ddc7f607c517, CONS_GEN_Food_Eggs_A_Rotten_be312dcb-8ff5-4f6e-bcad-516c6fb7c249);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Egg_WildBird_A_be712366-a008-4099-b95e-393ffa808610,CONS_GEN_Food_Eggs_A_Rotten_be312dcb-8ff5-4f6e-bcad-516c6fb7c249);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Tart_Treacle_A_80e17dfc-f29e-4149-9c91-7b617efb0c77, CONS_GEN_Food_Tart_Treacle_A_Spoiled_A_c5c39373-6a83-4a74-818a-da1642b9dfd0);
DB_WYR_Circus_BagOfMolding_FoodConverter(CONS_GEN_Food_Tart_Treacle_A_Eaten_A_03057be5-c7d9-49f9-8539-6a7ecf674f63, CONS_GEN_Food_Tart_Treacle_A_Spoiled_A_Eaten_A_d10402d9-e731-4af6-b93e-a6aec0806dc9);
//END_REGION
KBSECTION
//REGION Sharess Caress potent drink
IF
StatusApplied((CHARACTER)_Player, "WYR_SHARESSCARESS_POTENTDRINK", _,_)
AND
GetFlag((FLAG)WYR_SharessCaress_Bartender_State_TookDrink_a727ccaf-9746-ace8-acdc-6285fbbdd8f1, _Player, 1)
THEN
SetFlag((FLAG)WYR_SharessCaress_Bartender_State_DrankHooch_ee58a1d7-ace8-8e36-f2fd-90fdbbdfff0c, _Player, 1);

// Passed Drunk in Wyrm's Crossing or Lower City
IF
StatusApplied((CHARACTER)_Player, "WYR_POTENTDRINK_BLACKEDOUT", _, _)
THEN
RealtimeObjectTimerLaunch(_Player, "GLO_PotentDrink_Blackedout_Timer", 1000);

IF
ObjectTimerFinished(_Player, "GLO_PotentDrink_Blackedout_Timer")
THEN
PROC_GLO_PotentDrink_OnStatusApplied((CHARACTER)_Player);

// to prison, if the player hasn't seen this even yet (and not themselves in prison at the moment)
PROC
PROC_GLO_PotentDrink_OnStatusApplied((CHARACTER)_Player)
AND
NOT DB_Is_InCombat(_Player, _)
AND
NOT DB_InDangerZone(_Player, _)
AND
DB_CurrentLevel(_Level)
AND
DB_GLO_PotentDrink_BlackedOutPrisons(_Level, _PrisonId, _PrisonBlockTrigger, _Guard, _Dialog)
AND
NOT DB_InRegion(_Player, _PrisonBlockTrigger)
AND
NOT DB_PermaDefeated(_Guard)
AND
GetReservedUserID(_Player, _UserID)
AND
GetUserProfileID(_UserID, _Profile)
AND
NOT DB_GLO_PotentDrink_BlackedOutUsers(_Profile)
THEN
DB_GLO_PotentDrink_BlackedOutFading(_Player);
ScreenFadeTo((CHARACTER)_Player, 2.0, 0, "GLO_PotentDrink_FadeToBlack");
DB_GLO_PotentDrink_BlackedOutUsers(_Profile);
DB_GLO_PotentDrink_BlackedOutToPrison((CHARACTER)_Player, _Guard, _Dialog);

IF
ScreenFadeDone(_ID, "GLO_PotentDrink_FadeToBlack")
AND
DB_GLO_PotentDrink_BlackedOutToPrison((CHARACTER)_Player, _Guard, _Dialog)
AND
DB_RegionPrison(_PrisonId, _PrisonCell, _PrisonSpawnPoint)
AND
DB_PlayerPrison(_PrisonTrigger, _, _, _FugitiveStatus)
THEN
PROC_CrimeTeleportCharacterToPrison(_Guard, _Player, _PrisonCell, _PrisonSpawnPoint, _FugitiveStatus);

IF
EntityEvent(_Player, "CRIME_TeleportedToPrison")
AND
DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player)
AND
DB_GLO_PotentDrink_BlackedOutToPrison((CHARACTER)_Player, _Guard, _Dialog)
THEN
NOT DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player);
ClearScreenFade((CHARACTER)_Player, 2.0, "GLO_PotentDrink_FadeToBlack");

IF
EntityEvent(_Player, "CRIME_TeleportedToPrison")
AND
DB_GLO_PotentDrink_BlackedOutToPrison((CHARACTER)_Player, _Guard, _Dialog)
THEN
RemoveStatus(_Player, "WYR_POTENTDRINK_BLACKEDOUT", NULL_00000000-0000-0000-0000-000000000000);
RemoveHarmfulStatuses(_Player);
RealtimeObjectTimerLaunch(_Player,"GLO_PotentDrink_DelayMoveToAndTalk",2000);

IF
ObjectTimerFinished(_Player,"GLO_PotentDrink_DelayMoveToAndTalk")
AND
DB_GLO_PotentDrink_BlackedOutToPrison((CHARACTER)_Player, _Guard, _Dialog)
THEN
NOT DB_GLO_PotentDrink_BlackedOutToPrison(_Player, _Guard, _Dialog);
PROC_CharacterMoveToAndTalk((CHARACTER)_Guard, (CHARACTER)_Player, _Dialog, "", "Run", 10.0);

// to camp if the event has been encountered (but not if is in combat!)
PROC
PROC_GLO_PotentDrink_OnStatusApplied((CHARACTER)_Player)
AND
NOT DB_Is_InCombat(_Player, _)
AND
NOT QRY_Camp_IsPlayerBlockedFromTeleportToCamp(_Player)
AND
NOT DB_GLO_PotentDrink_BlackedOutToPrison(_Player, _, _)
THEN
DB_GLO_PotentDrink_BlackedOutFading(_Player);
ScreenFadeTo((CHARACTER)_Player, 2.0, 0, "GLO_PotentDrink_FadeToBlack");
DB_GLO_PotentDrink_BlackedOutToCamp((CHARACTER)_Player);

IF
ScreenFadeDone(_ID, "GLO_PotentDrink_FadeToBlack")
AND
DB_GLO_PotentDrink_BlackedOutToCamp((CHARACTER)_Player)
AND
QRY_Camp_SwapCampIfNecessary((CHARACTER)_Player)
AND
DB_ActiveCamp(_ActiveCamp)
AND
DB_CampBed(_ActiveCamp,1,_DayBed,_NightBed,_DayLT,_EmptyLT,_WakeUpTrigger)
THEN
PROC_Helper_SafeTeleportTo(_Player, _WakeUpTrigger, "GLO_PotentDrink_Event_ToCampTeleported", 0);

IF
EntityEvent(_Player, "GLO_PotentDrink_Event_ToCampTeleported")
AND
DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player)
AND
DB_GLO_PotentDrink_BlackedOutToCamp((CHARACTER)_Player)
THEN
NOT DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player);
ClearScreenFade((CHARACTER)_Player, 2.0, "GLO_PotentDrink_FadeToBlack");

IF
EntityEvent(_Player, "GLO_PotentDrink_Event_ToCampTeleported")
AND
DB_GLO_PotentDrink_BlackedOutToCamp((CHARACTER)_Player)
THEN
NOT DB_GLO_PotentDrink_BlackedOutToCamp((CHARACTER)_Player);
RemoveStatus(_Player, "WYR_POTENTDRINK_BLACKEDOUT", NULL_00000000-0000-0000-0000-000000000000);
RemoveHarmfulStatuses(_Player);

// fallback fading ending
IF
ScreenFadeDone(_ID, "GLO_PotentDrink_FadeToBlack")
AND
DB_GLO_PotentDrink_BlackedOutFading(_Player)
THEN
RealtimeObjectTimerLaunch(_Player, "GLO_PotentDrink_FadeToBlack_Timer", 2000);

IF
ObjectTimerFinished(_Player, "GLO_PotentDrink_FadeToBlack_Timer")
AND
DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player)
THEN
NOT DB_GLO_PotentDrink_BlackedOutFading((CHARACTER)_Player);
ClearScreenFade((CHARACTER)_Player, 2.0, "GLO_PotentDrink_FadeToBlack");
//END_REGION

//REGION Refugee Camp
IF
OnThrown(_ToyItem, UNI_WYR_ExplosiveToy_e077ef28-5de9-439d-bbaf-59536585c938, _Player, _,_,_,_)
AND
NOT QRY_StartDialog_Fixed((DIALOGRESOURCE)WYR_ExplosiveBearToy_AD_0808fc2e-bdd5-d37e-0b0b-47b3a16164dd, _ToyItem)
THEN
Die((ITEM)_ToyItem);

IF
AutomatedDialogEnded(WYR_ExplosiveBearToy_AD_0808fc2e-bdd5-d37e-0b0b-47b3a16164dd, _Instance)
AND
DB_DialogSpeakers(_Instance, _ToyItem, 1)
AND
GetTemplate(_ToyItem, UNI_WYR_ExplosiveToy_e077ef28-5de9-439d-bbaf-59536585c938)
THEN
Die((ITEM)_ToyItem);
NOT DB_GLO_ExplosiveToy_InDialog((ITEM)_ToyItem);

IF
AutomatedDialogForceStopping(WYR_ExplosiveBearToy_AD_0808fc2e-bdd5-d37e-0b0b-47b3a16164dd, _Instance)
AND
DB_DialogSpeakers(_Instance, _ToyItem, 1)
AND
GetTemplate(_ToyItem, UNI_WYR_ExplosiveToy_e077ef28-5de9-439d-bbaf-59536585c938)
THEN
Die((ITEM)_ToyItem);
NOT DB_GLO_ExplosiveToy_InDialog((ITEM)_ToyItem);

IF
AutomatedDialogStarted(WYR_ExplosiveBearToy_AD_0808fc2e-bdd5-d37e-0b0b-47b3a16164dd, _Instance)
AND
DB_DialogSpeakers(_Instance, _ToyItem, 1)
AND
NOT DB_GLO_ExplosiveToy_InDialog((ITEM)_ToyItem)
THEN
DB_GLO_ExplosiveToy_InDialog((ITEM)_ToyItem);

IF
DestroyedBy(_ToyItem, _,_,_)
AND
DB_GLO_ExplosiveToy_InDialog(_ToyItem)
THEN
NOT DB_GLO_ExplosiveToy_InDialog(_ToyItem);

// blow up if someone tries to pick-up after it is about to explpde
PROC
PROC_BlockPickupOfItem(_Character, _ToyItem)
AND
DB_GLO_ExplosiveToy_InDialog(_ToyItem)
THEN
Die((ITEM)_ToyItem);
DB_CustomPickupItemResponse(_Character, _ToyItem, 0);

// destroy if turn ended when it was thrown
IF
TurnEnded(_Object)
AND
DB_Is_InCombat(_Object, _CombatID)
AND
DB_GLO_ExplosiveToy_InDialog(_ToyItem)
AND
DB_Is_InCombat(_ToyItem, _CombatID)
THEN
Die((ITEM)_ToyItem);
//END_REGION

//REGION Legend of Ansur Book
IF
DialogEnded(_Dialogue,_)
AND
DB_LOW_FlorrickConfrontation_Dialogs(_Dialogue)
AND
DB_Players(_Player)
AND
NOT DB_DialogPlayers(_,_Player,_)
AND
GetFlag(WYR_AnsurGhost_State_HasAnsurBook_e0aebfc7-5496-4b2d-aeb6-bcd17c9c275a,(CHARACTER)_Player,1)
AND
QRY_OnlyOnce("ORI_AnsurBookRecieved_VB_OnlyOnce")
THEN
StartVoiceBark((VOICEBARKRESOURCE)GLO_LegendOfAnsurBook_VB_cf9f9bf2-eca1-56a8-0951-b389dfef1e4c,_Player);

IF
FlagSet(WYR_AnsurGhost_State_HasAnsurBook_e0aebfc7-5496-4b2d-aeb6-bcd17c9c275a,(CHARACTER)_Player,_)
AND
DB_Players(_Player)
AND
NOT DB_DialogPlayers(_,_Player,_)
AND
QRY_OnlyOnce("ORI_AnsurBookRecieved_VB_OnlyOnce")
THEN
StartVoiceBark((VOICEBARKRESOURCE)GLO_LegendOfAnsurBook_VB_cf9f9bf2-eca1-56a8-0951-b389dfef1e4c,_Player);

IF
UseFinished(_, (ITEM)S_GLO_AnsurGhost_LegendOfAnsurBook_b0ecc3d5-85ad-48fa-bc47-988107507e6c, 1)
AND
NOT DB_GlobalFlag((FLAG)WYR_AnsurGhost_Knows_ReadAnsurBook_f3b0cdca-7994-499f-bb8e-528240fdf0a3)
THEN
SetFlag((FLAG)WYR_AnsurGhost_Knows_ReadAnsurBook_f3b0cdca-7994-499f-bb8e-528240fdf0a3);

IF
UseFinished(_Player, (ITEM)S_GLO_AnsurGhost_LegendOfAnsurBook_b0ecc3d5-85ad-48fa-bc47-988107507e6c, 1)
AND
DB_Players(_Player)
AND
NOT DB_GlobalFlag((FLAG)WYR_AnsurGhost_Knows_AnsurQuest_81748d8c-8bac-427f-82b5-28db64bcff38)
AND
NOT DB_GlobalFlag((FLAG)WYR_Balduran_Event_OpenDoor_99e8c929-4b71-3e03-2b43-6e7421896f7a)
THEN
StartVoiceBark((VOICEBARKRESOURCE)WYR_AnsurGhost_VB_ReadBook_c2c66ba3-5c0f-dd87-1575-97e1132f5010, _Player);
SetFlag((FLAG)WYR_AnsurGhost_Knows_AnsurQuest_81748d8c-8bac-427f-82b5-28db64bcff38);
//END_REGION Legend of Ansur book

//REGION Circus bag of molding
IF
TemplateAddedTo(_ItemTemplate, _Item, S_WYR_Circus_WheelPrize_BagOfMolding_4e08dac7-f6b4-42ac-b4b1-e217387892d2, _)
AND
IsItem(_Item, 1)
AND
IsTagged(_Item, (TAG)FOOD_c86e0114-a5ab-48f6-b497-de321ebff577, 1)
THEN
PROC_WYR_Circus_BagOfMoldingTransform((ITEMROOT)_ItemTemplate, (ITEM)_Item);

PROC
PROC_WYR_Circus_BagOfMoldingTransform((ITEMROOT)_ItemTemplate, (ITEM)_Item)
AND
DB_WYR_Circus_BagOfMolding_FoodConverter(_ItemTemplate, _JunkTemplate)
THEN
Transform(_Item, _JunkTemplate, (SHAPESHIFTRULE)Physical_4acc6277-6dcd-4110-9450-b9379beaedac);

PROC
PROC_WYR_Circus_BagOfMoldingTransform((ITEMROOT)_ItemTemplate, (ITEM)_Item)
AND
NOT DB_WYR_Circus_BagOfMolding_FoodConverter(_ItemTemplate, _)
AND
NOT DB_WYR_Circus_BagOfMolding_FoodConverter(_, _ItemTemplate)
THEN
Transform(_Item, UNI_WYR_Circus_MoldyFood_420d1b1f-8147-4ae7-aedb-456dc391d61b, (SHAPESHIFTRULE)Physical_4acc6277-6dcd-4110-9450-b9379beaedac);
//END_REGION

//REGION Djinni-s gem
IF
AddedTo(S_WYR_Circus_WheelPrize_ReturningGem_6ac94c55-7d06-43e0-9afd-b0edc5c765b1, _Buyer, _)
AND
_Buyer != S_WYR_Circus_FortuneWheelWorker_21aa8a76-40ac-4d3a-881f-d6871487df6f
AND
NOT DB_WYR_Circus_ReturningGem(_,_)
THEN
DB_WYR_Circus_ReturningGem(_Buyer, 0);

PROC
PROC_LongRest()
AND
DB_WYR_Circus_ReturningGem(_Buyer, 0)
THEN
NOT DB_WYR_Circus_ReturningGem(_Buyer, 0);
DB_WYR_Circus_ReturningGem(_Buyer, 1);

IF
DB_WYR_Circus_ReturningGem(_Buyer, 1)
AND
DB_CurrentLevel("BGO_Main_A")
AND
NOT DB_PermaDefeated(S_WYR_Circus_FortuneWheelWorker_21aa8a76-40ac-4d3a-881f-d6871487df6f)
THEN
NOT DB_WYR_Circus_ReturningGem(_Buyer, 1);
ToInventory(S_WYR_Circus_WheelPrize_ReturningGem_6ac94c55-7d06-43e0-9afd-b0edc5c765b1, S_WYR_Circus_FortuneWheelWorker_21aa8a76-40ac-4d3a-881f-d6871487df6f, 1, 0, 1);

IF
DB_WYR_Circus_ReturningGem(_Buyer, 1)
AND
DB_PermaDefeated(S_WYR_Circus_FortuneWheelWorker_21aa8a76-40ac-4d3a-881f-d6871487df6f)
AND
Exists(_Buyer, 1)
THEN
NOT DB_WYR_Circus_ReturningGem(_Buyer, 1);
DB_WYR_Circus_ReturningGem(_Buyer, 0);
ToInventory(S_WYR_Circus_WheelPrize_ReturningGem_6ac94c55-7d06-43e0-9afd-b0edc5c765b1, _Buyer, 1, 1, 1);

IF
DB_PermaDefeated(_Buyer)
AND
DB_WYR_Circus_ReturningGem(_Buyer, _State)
THEN
NOT DB_WYR_Circus_ReturningGem(_Buyer, _State);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, _)
AND
DB_WYR_Circus_ReturningGem(_Companion, _State)
THEN
NOT DB_WYR_Circus_ReturningGem(_Companion, _State);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act3_GEN"
