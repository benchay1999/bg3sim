Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Dialogs(S_LOW_BaldursMouth_EttvardNeedle_c171c8b4-acb9-4633-9de4-a09176d21d73, LOW_BaldursMouth_Ettvard_DefaultDialog_d849691f-3a4c-40eb-4ebb-32b7d5ef5c4a);
DB_Dialogs(S_LOW_BaldursMouth_EstraStir_0517dac3-e9f9-4d40-a863-2034f4a865fb, LOW_BaldursMouth_Estra_DefaultDialog_e3c0791b-8fc6-7f07-5b7c-6a57d218a7da);
DB_Dialogs(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, LOW_BaldursMouth_MalekStones_aa2e9778-2fb6-0bf1-4294-a75993737ad3);
DB_Dialogs(S_LOW_BaldursMouth_EttvardReplacement_f904fed9-497c-4ba8-986f-1a0d38bd852d, LOW_BaldursMouth_EttvardsReplacement_DefaultDialog_1cb95eb2-cfa4-432f-ada4-97b6d5fb21ad);
DB_Dialogs(S_LOW_BaldursMouth_Reporter_01_22eab8d8-2360-4a8f-9149-349fd7959b24, LOW_BaldursMouth_Reporter01_cadb19a3-4a2c-0643-940c-4c1b7f59c934);
DB_Dialogs(S_LOW_BaldursMouth_Reporter_02_0035276a-8d9e-4e70-b9ba-d525b5ee2670, LOW_BaldursMouth_Reporter02_3f679070-c0cf-c873-7767-effeef4eb346);
DB_Dialogs(S_LOW_BaldursMouth_Reporter_03_db9d9520-4d83-4d8a-bafd-1f668030a405, LOW_BaldursMouth_Reporter03_e8af191e-53e4-7da5-d5e1-913b0bb55497);

DB_Dialogs(S_LOW_BaldursMouth_Gossiper_001_5a7185d6-1f54-4870-831c-991f9743ea24, LOW_BaldursMouth_Gossiper001_b8070ca8-2ee8-b4b7-64c1-0b2c1d280fa9);
DB_Dialogs(S_LOW_BaldursMouth_Gossiper_002_524b5ff3-1b9b-43bf-bb48-d5844b5c09b3, LOW_BaldursMouth_Gossiper002_36abea04-7ad8-276b-ba69-588dbe849533);
DB_Dialogs(S_LOW_BaldursMouth_StreetGossiper_000_bfbf3129-2634-4304-bddd-07115f910c04, LOW_BaldursMouth_StreetGossiper_000_0d82ef52-9f98-024b-c429-5b4280916b43);
DB_Dialogs(S_LOW_BaldursMouth_StreetGossiper_001_a9a9f761-1829-4477-8204-7e83e0f41c04, LOW_BaldursMouth_StreetGossiper_001_c4a838ea-f093-1f9d-87f0-5ca7fe289b8c);
DB_Dialogs(S_LOW_BaldursMouth_Cynics_000_4bee2c69-6b73-4cec-bc58-ad2fd18ceb1e, LOW_BaldursMouth_Cynics_000_f8844c65-14ff-e7c4-9496-96f206967d6d);
DB_Dialogs(S_LOW_BaldursMouth_Cynics_001_ac72bd07-0954-432a-985d-c94e95fb210f, LOW_BaldursMouth_Cynics_001_85a2546b-47fd-57e7-8ba8-8141604643e5);


DB_Dialogs(S_LOW_BaldursMouth_SteelWatcher_000_e2dcd3e3-cd9e-49e0-8fe2-70af63e13530, GLO_SteelWatcher_e1768e5c-37f4-2803-840b-28fd0677cf9e);
DB_Dialogs(S_LOW_BaldursMouth_SteelWatcher_001_eb02c254-d5eb-4dff-8818-579cb3f8fde8, GLO_SteelWatcher_e1768e5c-37f4-2803-840b-28fd0677cf9e);
DB_Dialogs(S_LOW_BaldursMouth_BasementSteelWatcher_15e480b5-b312-4e30-b93e-11e4c9b3f057, GLO_SteelWatcher_e1768e5c-37f4-2803-840b-28fd0677cf9e);
DB_Dialogs(S_LOW_BaldursMouth_BasementSteelWatcher_000_9c224600-8f58-4b69-817e-1d9d5f18a5b2, GLO_SteelWatcher_e1768e5c-37f4-2803-840b-28fd0677cf9e);

DB_Dialogs(S_LOW_BaldursMouth_Worker_001_d5c00297-aa9a-4505-864a-a7f6f606feaf, LOW_BaldursMouth_Worker_001_3aee359c-ca8e-c294-1580-86f41372595b);
DB_Dialogs(S_LOW_BaldursMouth_Worker_002_a15f9498-9362-46c5-b404-38b027fb7652, LOW_BaldursMouth_Worker_002_44ae8071-1672-2531-f781-1d82cea74f1f);
DB_Dialogs(S_LOW_BaldursMouth_Worker_003_ac6c0ece-c090-4e9e-bb76-3fb5a3160820, LOW_BaldursMouth_Worker_003_55390c3b-f425-056e-6096-ae476a95b53a);
DB_Dialogs(S_LOW_BaldursMouth_Worker_004_7675a9e5-8594-4252-9ea4-bc9631fd12fa, LOW_BaldursMouth_Worker_004_e4e5998e-3dee-106f-bcfc-5d83c884a392);
DB_Dialogs(S_LOW_BaldursMouth_Worker_005_d9700f5d-c189-43c8-8ac1-89c53cb111d5, LOW_BaldursMouth_Worker_005_057a03be-b124-68f1-3466-cdb4c10fbfef);

DB_Dialogs(S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f, LOW_BaldursMouth_Guard_DefaultDialog_4c2536f6-f6cd-20c0-8445-0c222c5651c4);
DB_Dialogs(S_LOW_BaldursMouth_Guard02_e7da54a2-214e-4873-bb82-1c20d6922a60, LOW_BaldursMouth_Guard2_DefaultDialog_1a658995-5b80-f370-5b2d-4494b6d06346);
DB_Dialogs(S_LOW_BaldursMouth_Guard03_72ff4031-a071-40bf-9c33-16a983f18436, LOW_BaldursMouth_Guard3_DefaultDialog_072a7539-65ed-8621-f0a8-733fd3c6cfe4);
DB_Dialogs(S_LOW_BaldursMouth_Guard04_123f1c40-3276-44e9-97ec-116d6f5b3740, LOW_BaldursMouth_Guard4_DefaultDialog_e1c70ac1-3ddb-7778-ff8a-6739d97c5a37);
DB_Dialogs(S_LOW_BaldursMouth_FrontDoorGuard_001_6bf73c69-c41f-41a0-9c73-6fa85c72c92a, LOW_BaldursMouth_FrontDoorGuard_001_8ad0c107-2f10-73df-3259-1d1bc79c9a46);
DB_Dialogs(S_LOW_BaldursMouth_FrontDoorGuard_002_b887a1f8-dab3-4f03-98ca-a61433e9fdcd, LOW_BaldursMouth_FrontDoorGuard_002_e61ab51e-b05c-ba22-d814-f269da20fc9a);


DB_Dialogs(S_LOW_BaldursMouth_PaperBoy_14214fc7-9e83-4719-9085-04a73b2b8e16, LOW_BaldursMouth_PaperBoy_DefaultDialog_a197e271-c8bd-ed9f-d4c2-0e94953bdcdf);
DB_Dialogs(S_LOW_BaldursMouth_PaperBoy_SteepsStrake_5ab6a835-3ba8-430b-a1b0-01df2bdc8204, LOW_BaldursMouth_PaperBoy_SteepsStrake_1012f773-b207-93f1-8dc0-406b3bb38f10);
DB_Dialogs(S_LOW_BaldursMouth_PaperBoy_Docks_7a5ba740-76cb-4c29-a190-ae7cb8658c81, LOW_BaldursMouth_PaperBoy_Docks_b66551ec-d6be-51d5-efdf-0e3083becce0);
DB_Dialogs(S_LOW_BaldursMouth_PaperBoy_Stormshore_af043ce6-ed49-4bc1-9d9a-d62331f59407, LOW_BaldursMouth_PaperBoy_Stormshore_f976a9a8-27ad-6470-38a8-d6d737e5dfd1);
DB_Dialogs(S_LOW_BaldursMouth_SkaraiBervos_cc4b66fb-a789-472d-8d23-ad3380215ca4, LOW_BaldursMouth_SkaraiBervos_5b26d0e7-ee4f-efd7-4c1b-6f9b90293d5e);

DB_Children(S_LOW_BaldursMouth_PaperBoy_14214fc7-9e83-4719-9085-04a73b2b8e16);
DB_Children(S_LOW_BaldursMouth_PaperBoy_SteepsStrake_5ab6a835-3ba8-430b-a1b0-01df2bdc8204);
DB_Children(S_LOW_BaldursMouth_PaperBoy_Docks_7a5ba740-76cb-4c29-a190-ae7cb8658c81);
DB_Children(S_LOW_BaldursMouth_PaperBoy_Stormshore_af043ce6-ed49-4bc1-9d9a-d62331f59407);

DB_DeadOnceFlag(S_LOW_BaldursMouth_EttvardNeedle_c171c8b4-acb9-4633-9de4-a09176d21d73, LOW_BaldursMouth_State_EttvardIsDead_0719687b-df33-4bf6-b5ab-cf9cab372b5b);
DB_PermaDefeatedFlag(S_LOW_BaldursMouth_EttvardNeedle_c171c8b4-acb9-4633-9de4-a09176d21d73, LOW_BaldursMouth_State_EttvardIsPermaDefeated_3ea02616-030f-412f-a6bf-84bb11f573d0);

//Sets up the DB of custom headlines
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle001_9c0ea157-ec79-4646-a77a-7781cdeed5f5 , (ITEM)S_LOW_BaldursMouth_ArticleBlock001_1340b1fa-0365-43b8-9dbc-c8cf5a593f52, "LOW_BaldursMouth_ArticleBlock001");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle002_d6c9a54e-64ea-4814-ad4e-ea28493d7934 , (ITEM)S_LOW_BaldursMouth_ArticleBlock002_5ecb26c3-d537-4070-a179-b2f10e3d269d, "LOW_BaldursMouth_ArticleBlock002");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle003_ea8b0ac4-617f-4e6a-b37d-2a61195d8e9b , (ITEM)S_LOW_BaldursMouth_ArticleBlock003_b25735f1-89cc-4e5c-bd57-1ac99ce22c84, "LOW_BaldursMouth_ArticleBlock003");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle004_e50c9bc7-49b1-4049-9ce5-c38ea8d68cf2 , (ITEM)S_LOW_BaldursMouth_ArticleBlock_Positive01_1af44269-8d9b-4bd6-bdab-a9b3ca6a61f9, "LOW_BaldursMouth_ArticleBlock_Positive01");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle005_46e9c6d6-8b89-4a36-8e8a-f4726bc8f414 , (ITEM)S_LOW_BaldursMouth_ArticleBlock_Positive02_ab318f95-a9bd-4295-806e-c9ffa3eac9f6, "LOW_BaldursMouth_ArticleBlock_Positive02");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle006_95f829a8-9b2d-49f2-81b7-477e85fdc97a , (ITEM)S_LOW_BaldursMouth_ArticleBlock_Positive03_2923d6c9-5640-49f1-a645-988dadfda21d, "LOW_BaldursMouth_ArticleBlock_Positive03");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle007_157958fd-be9d-49e9-8909-6dcdebd07247 , (ITEM)S_LOW_BaldursMouth_ArticleBlock_Negative01_0f685ea5-7de9-4390-a019-9f78d4f4c954, "LOW_BaldursMouth_ArticleBlock_Negative01");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle008_b4f78ea1-93b6-433d-99c1-1ca1ab6815c0 , (ITEM)S_LOW_BaldursMouth_ArticleBlock_Negative02_ccc5c83e-a64a-4c85-8537-fc406ae18df2, "LOW_BaldursMouth_ArticleBlock_Negative02");
DB_LOW_BaldursMouth_Articles((FLAG)LOW_BaldursMouth_Event_LoadedArticle009_fa2ce9f7-8181-4257-8742-2512637a217d, (ITEM)S_LOW_BaldursMouth_ArticleBlock_Negative03_ea58b680-6792-4919-a86a-25f2b98b09f3, "LOW_BaldursMouth_ArticleBlock_Negative03");

DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock001_1340b1fa-0365-43b8-9dbc-c8cf5a593f52, (FLAG)LOW_BaldursMouth_State_HasArticle001_7c51d3ce-f4be-4104-aa67-e5f2120e977b);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock002_5ecb26c3-d537-4070-a179-b2f10e3d269d, (FLAG)LOW_BaldursMouth_State_HasArticle002_6df82f42-53eb-44df-9e1b-96273cd82db3);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock003_b25735f1-89cc-4e5c-bd57-1ac99ce22c84, (FLAG)LOW_BaldursMouth_State_HasArticle003_268da680-d641-46e3-8c95-29d642052441);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Positive01_1af44269-8d9b-4bd6-bdab-a9b3ca6a61f9, (FLAG)LOW_BaldursMouth_State_HasArticle004_7c90c715-584d-4c5c-94f0-ebe63f6c7d85);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Positive02_ab318f95-a9bd-4295-806e-c9ffa3eac9f6, (FLAG)LOW_BaldursMouth_State_HasArticle005_cbd53fed-3830-4b8f-9643-845f1b528efb);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Positive03_2923d6c9-5640-49f1-a645-988dadfda21d, (FLAG)LOW_BaldursMouth_State_HasArticle006_098a5da3-b62b-42b2-a688-d6ed07a2c12a);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Negative01_0f685ea5-7de9-4390-a019-9f78d4f4c954, (FLAG)LOW_BaldursMouth_State_HasArticle007_69bfd485-88d9-48a1-b516-781c95fa794a);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Negative02_ccc5c83e-a64a-4c85-8537-fc406ae18df2, (FLAG)LOW_BaldursMouth_State_HasArticle008_110e5635-3e6a-4528-9a36-df1771e72232);
DB_HasItemEvent(S_LOW_BaldursMouth_ArticleBlock_Negative03_ea58b680-6792-4919-a86a-25f2b98b09f3, (FLAG)LOW_BaldursMouth_State_HasArticle009_731c662c-8c3d-4c79-bfef-760adb958f56);
DB_HasItemEvent(S_LOW_BaldursMouth_BlackmailLetter_fb018d37-dff2-4510-82c1-52a9a834136c, (FLAG)LOW_BaldursMouth_State_FoundEttvardsBlackmail_55bd47bb-78af-4426-a4a2-204830bdcf85);

DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle001_7c51d3ce-f4be-4104-aa67-e5f2120e977b);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle002_6df82f42-53eb-44df-9e1b-96273cd82db3);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle003_268da680-d641-46e3-8c95-29d642052441);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle004_7c90c715-584d-4c5c-94f0-ebe63f6c7d85);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle005_cbd53fed-3830-4b8f-9643-845f1b528efb);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle006_098a5da3-b62b-42b2-a688-d6ed07a2c12a);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle007_69bfd485-88d9-48a1-b516-781c95fa794a);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle008_110e5635-3e6a-4528-9a36-df1771e72232);
DB_BaldursMouth_HasAnySupport(LOW_BaldursMouth_State_HasArticle009_731c662c-8c3d-4c79-bfef-760adb958f56);

//For handling blackmailing Ettvard
DB_BookFlags(S_LOW_BaldursMouth_BlackmailLetter_fb018d37-dff2-4510-82c1-52a9a834136c,LOW_BaldursMouth_State_FoundEttvardsBlackmail_55bd47bb-78af-4426-a4a2-204830bdcf85);

DB_LOW_BaldursMouth_NegativeArticles(S_LOW_BaldursMouth_ArticleBlock_Negative01_0f685ea5-7de9-4390-a019-9f78d4f4c954);
DB_LOW_BaldursMouth_NegativeArticles(S_LOW_BaldursMouth_ArticleBlock_Negative02_ccc5c83e-a64a-4c85-8537-fc406ae18df2);
DB_LOW_BaldursMouth_NegativeArticles(S_LOW_BaldursMouth_ArticleBlock_Negative03_ea58b680-6792-4919-a86a-25f2b98b09f3);

DB_LOW_BaldursMouth_PositiveArticles(S_LOW_BaldursMouth_ArticleBlock_Positive01_1af44269-8d9b-4bd6-bdab-a9b3ca6a61f9);
DB_LOW_BaldursMouth_PositiveArticles(S_LOW_BaldursMouth_ArticleBlock_Positive02_ab318f95-a9bd-4295-806e-c9ffa3eac9f6);
DB_LOW_BaldursMouth_PositiveArticles(S_LOW_BaldursMouth_ArticleBlock_Positive03_2923d6c9-5640-49f1-a645-988dadfda21d);

//Sets up Lift Puzzle

DB_LOW_BaldursMouth_LiftSwitches(S_LOW_BaldursMouth_LiftSwitch_000_79df1477-7d8a-419d-9373-a68e5b8f52af);
DB_LOW_BaldursMouth_LiftSwitches(S_LOW_BaldursMouth_LiftSwitch_001_60f43418-c620-4d1f-96e2-0a54cf346ac3);
DB_LOW_BaldursMouth_ElevatorState(0);

//Initialises Updating Papers in the World

AddEntryToCustomBook("LOW_BaldursMouth_DefaultPaper", "LOW_BaldursMouth_DefaultPaper");
AddEntryToCustomBook("LOW_BaldursMouth_DraftWithEttvardsNotes", "LOW_BaldursMouth_DraftWithEttvardsNotes");
AddEntryToCustomBook("LOW_BaldursMouth_LoadedPaper", "LOW_BaldursMouth_PartySlandered");

DB_LOW_BaldursMouth_Printers(S_LOW_BaldursMouth_BigMagicalPress_a6468d7c-2e5d-4cfb-a80d-fc5771c5795a);
SetVisible(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, 0);

//Sets up the DB of Merchants whose attitude will change based on paper published
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_SteepsTrader_Armor_dc7d1866-a206-4029-81a4-ad18ffbcf3ea);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_SteepsTrader_BooksAndScrolls_70a074ae-db79-4f1a-9b12-62a380adbd18);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_SteepsTrader_Weapons_3c4ebba4-d2ba-4f07-98ed-bc523845ce3b);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_SteepsTrader_Consumables_99f983a5-e869-4712-b9db-b12272e53cc6);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Elfsong_Inkeeper_81651113-d779-44e8-9d46-d49d5577453b);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_TempleGuardian_32ec6ad3-c085-4fc5-943b-e2e3a05d9f2b);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Tolna_46aa02d8-28e9-4ebb-876c-82fe29262d35);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Traders_JewelVendor_d68c344d-e491-4ca6-b88e-959e68445bb8);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Traders_MusicVendor_bfb008db-a56e-4de7-bca5-e84a11619b21);

DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Figaro_3ff2b7ea-3de2-4bdc-a600-c973f290bc09);
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_BlushingMermaid_BosunGannet_d6f07cae-779b-4f10-b87c-c8117bfa1fe9);

//Paper Boy support DBs
DB_LOW_BaldursMouth_PaperBoyFlags((CHARACTER)S_LOW_BaldursMouth_PaperBoy_SteepsStrake_5ab6a835-3ba8-430b-a1b0-01df2bdc8204, (FLAG)LOW_BaldursMouth_State_SteepsStrakePaperBoyAnnoyed_e26ada91-fed7-466c-9162-a63a7b2c2104);
DB_LOW_BaldursMouth_PaperBoyFlags((CHARACTER)S_LOW_BaldursMouth_PaperBoy_Docks_7a5ba740-76cb-4c29-a190-ae7cb8658c81, (FLAG)LOW_BaldursMouth_State_DocksPaperBoyAnnoyed_32a390a0-da5d-49b5-a19a-371fdbf2a67c);
DB_LOW_BaldursMouth_PaperBoyFlags((CHARACTER)S_LOW_BaldursMouth_PaperBoy_14214fc7-9e83-4719-9085-04a73b2b8e16, (FLAG)LOW_BaldursMouth_State_PaperBoyAnnoyed_2d1f2231-44cb-4795-83ff-eb6327a6c9b8);
DB_LOW_BaldursMouth_PaperBoyFlags((CHARACTER)S_LOW_BaldursMouth_PaperBoy_Stormshore_af043ce6-ed49-4bc1-9d9a-d62331f59407, (FLAG)LOW_BaldursMouth_State_StormshorePaperBoyAnnoyed_c46371dd-58bb-49b5-8202-561d8698f9fd);

DB_LOW_BaldursMouth_PaperBoySpots((CHARACTER)S_LOW_BaldursMouth_PaperBoy_SteepsStrake_5ab6a835-3ba8-430b-a1b0-01df2bdc8204);
DB_LOW_BaldursMouth_PaperBoySpots((CHARACTER)S_LOW_BaldursMouth_PaperBoy_Docks_7a5ba740-76cb-4c29-a190-ae7cb8658c81);
DB_LOW_BaldursMouth_PaperBoySpots((CHARACTER)S_LOW_BaldursMouth_PaperBoy_14214fc7-9e83-4719-9085-04a73b2b8e16);

DB_SpotPlayers(S_LOW_BaldursMouth_PaperBoy_Stormshore_af043ce6-ed49-4bc1-9d9a-d62331f59407, "LOW_BaldursMouth_PaperBoyAndEstraAD", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);

DB_DialogMoneyTransfer(1, LOW_BaldursMouth_PaperBoy_DefaultDialog_a197e271-c8bd-ed9f-d4c2-0e94953bdcdf, 2);
DB_DialogMoneyTransfer(1, LOW_BaldursMouth_PaperBoy_SteepsStrake_1012f773-b207-93f1-8dc0-406b3bb38f10, 2);
DB_DialogMoneyTransfer(1, LOW_BaldursMouth_PaperBoy_Docks_b66551ec-d6be-51d5-efdf-0e3083becce0, 2);
DB_DialogMoneyTransfer(1, LOW_BaldursMouth_PaperBoy_Stormshore_f976a9a8-27ad-6470-38a8-d6d737e5dfd1, 2);



//Ettvard Set Up
DB_GiveItemToEvent(S_LOW_BaldursMouth_BasementKey_002_4fadef66-ee3d-44ff-9726-8ea59bcfee1e, (FLAG)LOW_BaldursMouth_Event_EttvardGivesKey_a66b8382-b7fa-42e9-b990-8ba96d6e0785);
DB_HasItemEvent(S_LOW_BaldursMouth_BasementKey_002_4fadef66-ee3d-44ff-9726-8ea59bcfee1e, (FLAG)LOW_BaldursMouth_State_EttvardLostKey_ec2df5a8-a8f4-45ae-a8c8-0a3a752f9fc2);

//Gossipers and Wanderers Set Up
DB_LOW_BaldursMouth_WandererGreetingAD_Crime("LOW_BaldursMouth_WandererGreetingAD_Crime");

//TODO: Fix the names of wanderes 1 and 2 dialogs when dialogs renaming is fixed
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_01_94043793-2bea-4a6c-8ef3-4bc9c72e0593, LOW_BaldursMouth_ElfsongWanderer_001_49f98ada-155e-494c-ad9c-83961e97eb4f);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_02_df51f991-98d1-413c-b3c4-b5caeed569f4, LOW_BaldursMouth_ElfsongWanderer_000_4d1a6f58-5815-15f4-b4c3-b09fe4941d11);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_03_6fd2d322-cd4f-42b4-8683-894d565a4aa2, LOW_BaldursMouth_Wanderer_03_83f30f39-348a-6049-e5ac-88b067812e4c);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_04_eb24e1c5-1e3a-426a-9ee1-770cea3dda52, LOW_BaldursMouth_Wanderer_04_1d56be8b-67c0-aeae-8bf0-47f93b229bbe);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_05_d3d4cf1f-e542-437f-b08f-5164fecd12f4, LOW_BaldursMouth_Wanderer_05_ff0681f2-6093-00ff-5ea9-d97a29458b09);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_06_f5d9c65a-ce2b-442d-8de2-fbb75baa1076, LOW_BaldursMouth_Wanderer_06_b83e2acb-de79-3028-ff14-aa0f8dca823a);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_07_49c62367-b5a3-4542-adaf-df7f2992fd3c, LOW_BaldursMouth_Wanderer_07_3cd43fb5-8a1f-12f1-c2bb-b740cd9d973e);
DB_Dialogs(S_LOW_BaldursMouth_Wanderer_08_12a48fae-c58f-487f-b777-a0b4c1c88844, LOW_BaldursMouth_Wanderer_08_a5bceb36-71a6-1e49-1076-a5046df8bdd9);

//TODO: At behaviors stage implement LOW_BaldursMouth_AD_Gossipers_7b5fed05-a64a-3484-d812-e517826cf994 as idle behavior AD for S_LOW_BaldursMouth_Gossiper_001_5a7185d6-1f54-4870-831c-991f9743ea24
//Set Trespass Trigger
DB_CheckPoint((CHARACTER)S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f, 
	(CHARACTER)S_LOW_BaldursMouth_Guard04_123f1c40-3276-44e9-97ec-116d6f5b3740, 
	(TRIGGER)S_LOW_BaldursMouth_StairsSpotTrigger_f43bde87-4e12-4d25-afc5-d8de34091b20, 
	(TRIGGER)S_LOW_BaldursMouth_StairsWarningTrigger_c83c60ef-dad7-404d-9630-03c268c8b801, 
	(TRIGGER)S_LOW_BaldursMouth_StairsTrespassTrigger_c8b569a4-3b68-4872-af7a-2a3447e9ffff, 
	"LOW_BaldursMouth_StairsCheckpoint", 
	(FLAG)LOW_BaldursMouth_State_CanAccessBasement_fd134f2c-dc43-4270-a56d-062b2e745c1a,
	"Trespassing", 
	(TRIGGER)S_TeleportTrigger_Basement_To_BaldursMouth_6ed32efc-0a5c-4aaa-b4ad-dd7f9c6ced28); 
DB_Checkpoint_AllowTrespassPermaAccess("LOW_BaldursMouth_StairsCheckpoint");

DB_TrespassTrigger(S_LOW_BaldursMouth_BackOfficeTrespassTrigger_7b75b5ee-08ac-42bd-8bd8-82c4059019fe, S_LOW_BaldursMouth_BackRoomTrespassReturn_7f72691a-0e77-406c-bbf0-3b4985b5dff9);

//Sets up reactivity for messing with the printer/murdering Ettvard 
SetOnStage(S_LOW_BaldursMouth_WarningNote_6dedfb84-b858-4e42-8171-61554ddcc800, 0);
Unlock(S_LOW_BaldursMouth_BasementDoor_0ceaeb6e-1f7a-47ca-94e6-2ea56e93f99d);
Unlock(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e);

SetOnStage(S_LOW_BaldursMouth_EttvardReplacement_f904fed9-497c-4ba8-986f-1a0d38bd852d, 0);

//Sets up basement as a Danger Zone
DB_DangerZone((TRIGGER)S_LOW_BaldursMouth_BasementDangerZone2_bdc07ceb-0983-4001-8fc7-1f6bc6ea4d84, "LOW_BaldursMouth_BasementDangerZone");

// Spawn Silfy
DB_LOW_BaldursMouth_BroadsheetSeller((CHARACTER)S_DEN_Pickpocket_540ddc1f-42c6-4347-ba03-b3cf3d3942ab);
DB_GLO_SetupForAct_Character("CTY_Main_A", (CHARACTER)S_DEN_Pickpocket_540ddc1f-42c6-4347-ba03-b3cf3d3942ab);
DB_DialogMoneyTransfer(1, WYR_Posthouse_BroadsheetSeller_6c840e1b-46ce-5fd1-b012-4c760d302c86, 2);
DB_GiveTemplateFromNpcToPlayerDialogEvent((ROOT)UNI_LOW_BaldursMouth_DailyPaper_5ffe11b1-4949-47cd-ab49-80053db261f9, (FLAG)LOW_BaldursMouth_Event_BoughtPaperFromSilfy_77519879-6ebf-c7fb-6afd-ae06729ac685, NULL_00000000-0000-0000-0000-000000000000, 1);

//Ownership
DB_ItemOwnerShipTriggers("CTY_Main_A", (TRIGGER)S_LOW_BaldursMouth_Ownership_91164161-e789-453b-a8be-ee158bfd1222, (CHARACTER)S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73);
DB_ItemOwnerShipTriggersFallback((TRIGGER)S_LOW_BaldursMouth_Ownership_91164161-e789-453b-a8be-ee158bfd1222, (CHARACTER)S_LOW_BaldursMouth_EttvardReplacement_f904fed9-497c-4ba8-986f-1a0d38bd852d);
DB_ItemOwnerShipClearItem("CTY_Main_A",S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e);

DB_ItemOwnerShipTriggers("CTY_Main_A", (TRIGGER)S_LOW_BaldursMouth_BasementDoorDialogTrigger_c2444786-5947-43f7-93dc-1a18f150dd43, (CHARACTER)S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73);

//REGION LOW_StopTheGazette Journal
//Starts
DB_QuestDef_State((FLAG)LOW_BaldursMouth_State_EttvardsBusy_fbbe9492-8c01-4600-8a33-3d69cb9aa49a, "LOW_StopTheGazette", "EttvardStart");

//Updates
DB_QuestDef_State((FLAG)LOW_BaldursMouth_AutomatedPrinterDialog_State_GremlinUnlocked_51be3a71-adde-7642-e4e4-f50e88812157, "LOW_StopTheGazette", "BefriendedPrinter");
DB_QuestDef_State((FLAG)LOW_BaldursMouth_State_PlayerChangedPaper_a8bf8c49-52a9-458b-9cde-bbc6f8f4514a, "LOW_StopTheGazette", "ArticleLoaded");
DB_QuestDef_State((FLAG)LOW_BaldursMouth_State_EttvardIsDead_0719687b-df33-4bf6-b5ab-cf9cab372b5b, "LOW_StopTheGazette", "EttvardDiedImmediate");

//Ends
DB_QuestDef_State((FLAG)LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4, "LOW_StopTheGazette", "PrintedPositive");
DB_QuestDef_State((FLAG)LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2, "LOW_StopTheGazette", "LetNegativePrint");
//END_REGION

//REGION Combat ADs
DB_CombatReact_AD_OnTurn(S_LOW_BaldursMouth_Reporter_01_22eab8d8-2360-4a8f-9149-349fd7959b24, LOW_BaldursMouth_AD_Reporter01Combat_a9897b55-e0fa-cdaa-fa93-697aedb2ba8c, 1);
DB_CombatReact_AD_OnTurn(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, LOW_BaldursMouth_AD_MalekCombat_0f7cfd88-b2d4-66b5-6935-65d7fcfd2c65, 1);
DB_CombatReact_AD_OnTurn(S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73, LOW_BaldursMouth_AD_EttvardTaunt_3c0a917e-2aac-0a04-d920-822357777f95, 1);

//END_REGION

//REGION Guard DB

DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f);
DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_Guard02_e7da54a2-214e-4873-bb82-1c20d6922a60);
DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_Guard03_72ff4031-a071-40bf-9c33-16a983f18436);
DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_Guard04_123f1c40-3276-44e9-97ec-116d6f5b3740);
DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_SteelWatcher_000_e2dcd3e3-cd9e-49e0-8fe2-70af63e13530);
DB_LOW_BaldursMouth_Guards(S_LOW_BaldursMouth_SteelWatcher_001_eb02c254-d5eb-4dff-8818-579cb3f8fde8);

//END_REGION
KBSECTION
//REGION Handle Article Block Forging
PROC
PROC_LOW_BaldursMouth_MakeCustomBookEntry((ITEM)_ArticleBlock, (STRING)_FinishedPrintBlock)
AND
DB_LOW_BaldursMouth_Articles(_ArticleFlag, _ArticleBlock, _Headline)
THEN
AddEntryToCustomBook(_FinishedPrintBlock, _Headline);
PROC_GlobalSetFlagAndCache(_ArticleFlag);

IF
Combined(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, _ArticleBlock1, _, _, _, _Player, _OutputBook)
THEN
PROC_LOW_BaldursMouth_MakeCustomBookEntry(_ArticleBlock1, "LOW_BaldursMouth_LoadedPaper");
DB_LOW_BaldursMouth_CreatedBook(_OutputBook);
//END_REGION

//REGION Loading the player made articles in to the printer

//Starts the printers dialog
IF
UseStarted(_Player, _Printer)
AND
DB_Players(_Player)
AND
DB_LOW_BaldursMouth_Printers(_Printer)
AND
QRY_StartDialog_Fixed(LOW_BaldursMouth_AutomatedPrinterDialog_4567225e-96a0-714f-ba7e-d3f8cfad2e3d, S_LOW_BaldursMouth_BigMagicalPress_a6468d7c-2e5d-4cfb-a80d-fc5771c5795a, _Player)
THEN
DB_NOOP(1);

//Handles checking the paper from dialog
IF
DialogEnded(LOW_BaldursMouth_AutomatedPrinterDialog_4567225e-96a0-714f-ba7e-d3f8cfad2e3d, _Inst)
AND
DB_DialogPlayers(_Inst, _Player, _)
AND
NOT DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_PlayerChangedPaper_a8bf8c49-52a9-458b-9cde-bbc6f8f4514a)
AND
NOT DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_PrinterJammed_f1e28436-528e-4607-ac58-acbb73065b4e)
AND
GetFlag((FLAG)LOW_BaldursMouth_Event_PrinterCheck_dd1f5e9f-9a52-4512-a43e-8efc68cc33fb, _Player, 1)
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_PrinterTimer", 20);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_PrinterTimer")
THEN
OpenCustomBookUI((CHARACTER)_Player, "LOW_BaldursMouth_LoadedPaper");

//Handles opening the Insert UI from dialog
IF
DialogEnded(LOW_BaldursMouth_AutomatedPrinterDialog_4567225e-96a0-714f-ba7e-d3f8cfad2e3d, _Inst)
AND
DB_DialogPlayers(_Inst, _Player, _)
AND
DB_GlobalFlag((FLAG)LOW_BaldursMouth_Event_PrinterLoad_61fa8a0e-199a-4067-9aae-5c0dffb227d1)
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_PrinterUse", 100);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_PrinterUse")
AND
GetDistanceTo(_Player, S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, _Distance)
AND
_Distance < 10.0
THEN
DB_LOW_BaldursMouth_TeleportUser(_Player);
TeleportTo(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, _Player, "LOW_BaldursMouth_HelperTeleport", 0, 0, 0, 0, 1);

IF
EntityEvent(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, "LOW_BaldursMouth_HelperTeleport")
AND
DB_LOW_BaldursMouth_TeleportUser(_Player)
THEN
Use((CHARACTER)_Player, (ITEM)S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, "");
PROC_GlobalClearFlagAndCache((FLAG)LOW_BaldursMouth_Event_PrinterLoad_61fa8a0e-199a-4067-9aae-5c0dffb227d1);
NOT DB_LOW_BaldursMouth_TeleportUser(_Player);

//Handles clearing the existing paper 
IF
FlagSet(LOW_BaldursMouth_Event_ClearPrinter_cf86ba44-7b4b-43aa-93da-c16f48f74bb6, _, _)
THEN
AddEntryToCustomBook("LOW_BaldursMouth_LoadedPaper", "LOW_BaldursMouth_FinishedBlock");
RemoveEntryFromCustomBook("LOW_BaldursMouth_LoadedPaper", "LOW_BaldursMouth_PartySlandered");

IF
Combined(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, _, _, _, _, _Player, _OutputBlock)
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb);
PROC_GlobalSetFlagAndCache((FLAG)LOW_BaldursMouth_State_PlayerChangedPaper_a8bf8c49-52a9-458b-9cde-bbc6f8f4514a);

//Sends the selected articles over to the normal Gazette queueing system
IF
Combined(S_LOW_BaldursMouth_BlockMaker_000_c691983c-82f2-4eb2-a0a6-cf33f8a84406, _Article1, _, _, _, _Player, _)
AND
DB_LOW_BaldursMouth_Articles(_Article1Flag, _Article1, _)
THEN
PROC_GlobalSetFlagAndCache(_Article1Flag);
PROC_TryStartAD(LOW_BaldursMouth_PAD_PlayerLoadedPrinter_c9b751aa-c1cd-bdbb-60eb-d22ea04a6517, _Player);

//END_REGION

//REGION Evaluate effects of new paper

PROC
PROC_LongRest()
THEN
PROC_GLO_Gazette_PreparePrinting();
PROC_GLO_Gazette_DoPrinting();

//Alerts player on picking up positive article
IF
FlagSet(_PositiveArticleFlag, _Player, _)
AND
DB_HasItemEvent(_PositiveArticleItem, _PositiveArticleFlag)
AND
DB_LOW_BaldursMouth_PositiveArticles(_PositiveArticleItem)
AND
DB_Players((CHARACTER)_Player)
AND
QRY_OnlyOnce("LOW_BaldursMouth_PlayerFoundPositiveArticle")
THEN
PROC_TryStartAD(LOW_BaldursMouth_AD_PickedUpPositiveArticle_182789fe-8afa-9071-7b3c-89d04b5b855f, _Player);

//Checks thst at least one positive and no negative articles were published
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762)
AND
NOT DB_GlobalFlag(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4)
AND
DB_LOW_BaldursMouth_Articles(_ArticleFlag, _ArticleBlock, _)
AND
DB_GlobalFlag(_ArticleFlag)
AND
DB_LOW_BaldursMouth_PositiveArticles(_ArticleBlock)
THEN
PROC_GlobalSetFlagAndCache(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4);
DB_ExecuteWhenObjectInCurrentLevel("GLO_OffStage",S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);

//Triggers if ANY negative article is published
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762)
AND
DB_LOW_BaldursMouth_Articles(_ArticleFlag, _ArticleBlock, _)
AND
DB_GlobalFlag(_ArticleFlag)
AND
DB_LOW_BaldursMouth_NegativeArticles(_ArticleBlock)
THEN
PROC_GlobalSetFlagAndCache(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2);
DB_ExecuteWhenObjectInCurrentLevel("GLO_OffStage",S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);

//Triggers if only Neutral articles published
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762)
AND
DB_LOW_BaldursMouth_Articles(_ArticleFlag, _ArticleBlock, _)
AND
DB_GlobalFlag(_ArticleFlag)
AND
NOT DB_LOW_BaldursMouth_NegativeArticles(_ArticleBlock)
AND
NOT DB_LOW_BaldursMouth_PositiveArticles(_ArticleBlock)
THEN
PROC_GlobalSetFlagAndCache(LOW_BaldursMouth_State_PrintedNeutral_771b7dd5-59df-445d-8c45-3b13bc85d036);
DB_ExecuteWhenObjectInCurrentLevel("GLO_OffStage",S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);


//Cleans up if logic above misfired; if positive and negative flags would be set at the same time, always removes the positive flag
IF
DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2)
AND
DB_GlobalFlag(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4)
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4);

//Sunsets NegativeArticlePublished flag so it is only true for one day
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2)
AND
NOT QRY_OnlyOnce("LOW_BaldursMouth_NegativeArticleSunsetting")
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2);

//Sunsets PositiveArticlePublished flag so it is only true for one day
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4)
AND
NOT QRY_OnlyOnce("LOW_BaldursMouth_PositiveArticleSunsetting")
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4);

//Cleans up NegativeStarted after the player has already swapped the article for the day if they would get the Negative started flag set again
IF
FlagSet(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb, _, _)
AND
DB_LOW_BaldursMouth_Articles(_Flag, _Article, _String)
AND
DB_GlobalFlag(_Flag)
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb);

//END_REGION

//REGION Reading the Player Made Blocks and Papers
IF
UseStarted(_Player, _OutputBook)
AND
DB_LOW_BaldursMouth_CreatedBook(_OutputBook)
THEN
OpenReferencedBookUI(_Player, "LOW_BaldursMouth_FinishedBlock", _OutputBook);
//END_REGION

//REGION Dealing with Ettvards annotated copy of the paper

//Handles additional uses of the book
IF
UseStarted(_Player, S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c)
AND
DB_OnlyOnce("LOW_BaldursMouth_FirstTimeReadingDraft")
THEN
OpenReferencedBookUI(_Player, "LOW_BaldursMouth_DraftWithEttvardsNotes", S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);

//Handles first use of the book
IF
UseStarted(_Player, S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c)
AND
NOT DB_OnlyOnce("LOW_BaldursMouth_FirstTimeReadingDraft")
AND
QRY_StartDialog_Fixed(LOW_BaldursMouth_FindingTheDraftPaper_e507fa5f-afac-e9bc-1390-d57cc5e242c1, _Player)
THEN
DB_OnlyOnce("LOW_BaldursMouth_FirstTimeReadingDraft");
DB_LOW_BaldursMouth_LetterReader((CHARACTER)_Player);
PROC_GlobalSetFlagAndCache(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb);
PROC_GlobalClearFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);


//The below code works for opening the book after the dialog but is hacky
IF
DialogEnded(LOW_BaldursMouth_FindingTheDraftPaper_e507fa5f-afac-e9bc-1390-d57cc5e242c1, _)
AND
DB_LOW_BaldursMouth_LetterReader(_Player)
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_BookTimer", 100);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_BookTimer")
THEN
OpenReferencedBookUI((CHARACTER)_Player, "LOW_BaldursMouth_DraftWithEttvardsNotes", S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);
NOT DB_LOW_BaldursMouth_LetterReader(_Player);
//END_REGION

//REGION Checking if the default negative paper needs to be printed
PROC
PROC_GLO_Gazette_PreparePrinting()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb)
THEN
PROC_GlobalSetFlagAndCache(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2);
ClearFlag(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb);
PROC_GlobalSetFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);

//PROC for handling Attitude updates
PROC
PROC_LOW_BaldursMouth_AttitudeChange((CHARACTER)_Player, (INTEGER)_AttitudeChange)
AND
DB_LOW_BaldursMouth_Merchants(_Merchant)
THEN
AddAttitudeTowardsPlayer(_Merchant, _Player, _AttitudeChange);

//Consequences for the Negative article being published
IF
DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2)
AND
DB_PartOfTheTeam(_Player)
THEN
PROC_LOW_BaldursMouth_AttitudeChange(_Player, -15);
//END_REGION

//REGION Printing the custom paper and checking for positive paper consequences, restarts normal Gazette behavior

//Prints the custom paper
PROC
PROC_GLO_Gazette_DoPrinting()
AND
NOT DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb)
AND
NOT DB_GlobalFlag(LOW_BaldursMouth_State_NegativeArticlePublished_baa834bc-8237-4081-8699-297743dc54d2)
AND
NOT DB_GlobalFlag(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762)
THEN
RemoveEntryFromCustomBook("LOW_BaldursMouth_DefaultPaper", "LOW_BaldursMouth_DefaultPaper");
AddEntryToCustomBook("LOW_BaldursMouth_DefaultPaper", "LOW_BaldursMouth_LoadedPaper");
PROC_GlobalSetFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);
DB_ExecuteWhenObjectInCurrentLevel("GLO_OffStage",S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);
DB_ExecuteInLevel("LOW_BaldursMouth_ResetSecurity","CTY_Main_A");


//Handles positive consequences
PROC
PROC_GLO_Gazette_DoPrinting()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4)
AND
QRY_OnlyOnce("LOW_BaldursMouth_CustomPaperPrinted")
THEN
DB_ExecuteInLevel("LOW_BaldursMouth_CustomPaperPrinted","CTY_Main_A");

PROC
PROC_ExecuteInLevel("LOW_BaldursMouth_CustomPaperPrinted","CTY_Main_A")
AND
DB_PartOfTheTeam(_Player)
THEN
PROC_LOW_BaldursMouth_AttitudeChange((CHARACTER)_Player, 10);

//Restarts normal Gazette printing behavior
PROC
PROC_GLO_Gazette_DoPrinting()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_PositiveArticlePublished_14071582-0c75-40e5-9121-251d6a9524e4)
THEN
PROC_GlobalSetFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);
DB_ExecuteInLevel("LOW_BaldursMouth_ResetSecurity","CTY_Main_A");

PROC
PROC_ExecuteInLevel("LOW_BaldursMouth_ResetSecurity","CTY_Main_A")
THEN
PROC_LOW_BaldursMouth_ResetSecurity();

//END_REGION

//REGION Gazzete wanderers ADs are handeled with generics
// The crime is registered every time on entering level for players because it's a continuous disturbance
IF
DB_CurrentLevel("CTY_Main_A")
AND
DB_Players((CHARACTER)_Player)
AND
DB_LOW_BaldursMouth_WandererGreetingAD_Crime(_Crime)
AND
QRY_OnlyOnce("LOW_RegisteredGazzeteWanderersCrime")
THEN
PROC_CharacterRegisterCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

PROC
PROC_CharacterRegisterCrime_Success(_Player,"LOW_BaldursMouth_WandererGreetingAD_Crime",_,_,_,_DisturbanceID)
THEN
DB_LOW_BaldursMouth_WandererGreetingAD_RegisteredCrimeID(_DisturbanceID);

PROC
PROC_CRIME_Finished((INTEGER)_DisturbanceID)
AND
DB_LOW_BaldursMouth_WandererGreetingAD_RegisteredCrimeID(_DisturbanceID)
AND
QRY_OnlyOnce_Reset("LOW_RegisteredGazzeteWanderersCrime")
THEN
NOT DB_LOW_BaldursMouth_WandererGreetingAD_RegisteredCrimeID(_DisturbanceID);

IF
DB_Players(_Player)
AND
DB_LOW_BaldursMouth_WandererGreetingAD_RegisteredCrimeID(_DisturbanceID)
THEN
PROC_LOW_CrimeAddCriminalsToWandererGreetingAD(_DisturbanceID,_Player);
	
PROC
PROC_LOW_CrimeAddCriminalsToWandererGreetingAD((INTEGER)_DisturbanceID,(CHARACTER)_Player)
AND
CrimeAddCriminal(_DisturbanceID,_Player,1)
THEN
DB_NOOP(1);

PROC
PROC_GLO_PartyMembers_MakeNPCHook(_Character)
AND
DB_LOW_BaldursMouth_WandererGreetingAD_RegisteredCrimeID(_DisturbanceID)
THEN
CharacterStopCrimeWithID(_Character,_DisturbanceID);
//END_REGION

//REGION Handles check point and trespassing
PROC
PROC_CheckPointDialogue(_Player, S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f)
AND
QRY_StartCheckpointWarningDialog("LOW_BaldursMouth_StairsCheckpoint", LOW_BaldursMouth_Guard_TrespassWarning_475484ef-b92b-51c3-10f3-e68a6297b1ef, S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f, _Player)
THEN
DB_NOOP(1);

PROC
PROC_CheckPointDialogue(_Player, S_LOW_BaldursMouth_Guard04_123f1c40-3276-44e9-97ec-116d6f5b3740)
AND
QRY_StartCheckpointWarningDialog("LOW_BaldursMouth_StairsCheckpoint", LOW_BaldursMouth_Guard4_TrespassWarning_4ecc72c5-37a2-85d2-380e-4fc8cff33b0f, S_LOW_BaldursMouth_Guard04_123f1c40-3276-44e9-97ec-116d6f5b3740, _Player)
THEN
DB_NOOP(1);

PROC
PROC_CRIME_CleanUpTrespass((INTEGER)_CrimeID,(TRIGGER)S_LOW_BaldursMouth_StairsTrespassTrigger_c8b569a4-3b68-4872-af7a-2a3447e9ffff)
THEN
Unlock(S_DOOR_BaldursMouth_To_Basement_000_187c5060-8334-4b42-b782-ae0df9005afc);
ClearOwnership(S_DOOR_BaldursMouth_To_Basement_000_187c5060-8334-4b42-b782-ae0df9005afc);

IF
FlagSet((FLAG)LOW_BaldursMouth_Event_EscortedOut_8b64d1c5-63af-4088-984d-cc972115edb6, _Player, _)
THEN
SetOwner(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e, S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73);
Close(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e);
Lock(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e, "LOW_BaldursMouth_DoorLockedAfterEjection");
TeleportTo(_Player, S_LOW_BaldursMouth_Front_TeleportTrigger_dadf2f05-0817-4052-be77-e8ad33267415, "LOW_BaldursMouth_Ejected", 1, 1, 1, 0, 1);
DB_TrespassTrigger((TRIGGER)S_LOW_BaldursMouth_AfterEvictionTrespassTrigger_de05eccd-e13c-41f9-afaf-eeca48d6b3e6, (TRIGGER)S_LOW_BaldursMouth_Front_TeleportTrigger_dadf2f05-0817-4052-be77-e8ad33267415);
ClearFlag((FLAG)LOW_BaldursMouth_Event_EscortedOut_8b64d1c5-63af-4088-984d-cc972115edb6, _Player, 0);
// Door to basement gets closed and locked again (but keep access if you bribed the guard)
PROC_ItemCloseAndLock((ITEM)S_DOOR_BaldursMouth_To_Basement_000_187c5060-8334-4b42-b782-ae0df9005afc, "71034255-45e1-470a-aafe-2d3c53d6c20a");

// If you had gotten permanent access, the guard will ignore you lockpicking it (but you'll still have to do it)
PROC
PROC_CharacterRegisterCrimeHandleIgnoresAfter(_CrimeID, _Criminal, "Lockpicking", S_DOOR_BaldursMouth_To_Basement_000_187c5060-8334-4b42-b782-ae0df9005afc, _)
AND
DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_CanAccessBasement_fd134f2c-dc43-4270-a56d-062b2e745c1a)
THEN
CrimeIgnoreCrime(_CrimeID, (CHARACTER)S_LOW_BaldursMouth_Guard01_a74a49eb-1406-4570-8dda-065c929a228f);

IF
EntityEvent(_Player, "LOW_BaldursMouth_Ejected")
AND
DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_GazettePrinting_c76ba529-8060-4dc1-9f72-89ac43f38286)
AND
DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb)
AND
NOT DB_GlobalFlag((FLAG)LOW_BaldursMouth_HasMet_PrinterGremlin_f89f6d6f-17dc-4089-acb9-e859beec6e75)
AND
QRY_OnlyOnce("LOW_BaldursMouth_PlayedEjectPAD")
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_PlayEjectPADTimer", 500, 1);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_PlayEjectPADTimer")
THEN
PROC_TryStartAD(LOW_BaldursMouth_PAD_KickedOut_efe99d08-0d24-316a-a7e9-6fe32e66bdb7, _Player);

IF
FlagSet((FLAG)LOW_BaldursMouth_Event_RefusedToLeave_0123d5ab-bee1-40e1-8da8-c246cecd67de, _Player, _)
THEN
PROC_SetRelationToPlayers((FACTION)ACT3_LOW_BaldursMouth_Security_1c0ff36f-78a7-4c16-b624-70cb8e18f346, 0);

PROC
PROC_LOW_BaldursMouth_ResetSecurity()
AND
DB_Avatars(_Avatar)
THEN
PROC_TriggerUnregisterForParty((TRIGGER)S_LOW_BaldursMouth_AfterEvictionTrespassTrigger_de05eccd-e13c-41f9-afaf-eeca48d6b3e6);
Close(S_LOW_BaldursMouth_MainFloorBackDoor_e116b78e-8e30-4344-a94b-2d348f689ac0);
Lock(S_LOW_BaldursMouth_MainFloorBackDoor_e116b78e-8e30-4344-a94b-2d348f689ac0, "BaldursMouth_BackDoorReset");
Unlock(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e);
ClearOwnership(S_LOW_BaldursMouth_FrontDoor_f8263489-8f51-41db-9bdb-445f995c2b9e);

//Player can't talk their way in to permission to being in the building
QRY
QRY_CrimeBribes_GetEludedMethodAvailability_Custom(_, _, (CHARACTER)_Guard, _, _, _)
AND
DB_LOW_BaldursMouth_Guards(_Guard)
THEN
DB_QRYRTN_CrimeBribes_GetEludedMethodAvailability_Custom("no");

//END_REGION

//REGION Handles reactivity to using the printer and the basement Steel Watcher(s)
PROC
PROC_LongRest()
AND
DB_GlobalFlag((FLAG)LOW_BaldursMouth_State_PlayerChangedPaper_a8bf8c49-52a9-458b-9cde-bbc6f8f4514a)
AND
QRY_OnlyOnce("LOW_BaldursMouth_SteelWatchActivated")
THEN
PROC_TriggerRegisterForParty((TRIGGER)S_LOW_BaldursMouh_BasementDoorDialogTrigger_c2444786-5947-43f7-93dc-1a18f150dd43);
DB_ExecuteWhenObjectInCurrentLevel("GLO_OffStage",S_LOW_BaldursMouth_NegativePaperProof_427bf4ec-86c6-4311-abba-85b1326ccc3c);
DB_ExecuteInLevel("LOW_BaldursMouth_SteelWatchActivated","CTY_Main_A");

PROC
PROC_ExecuteInLevel("LOW_BaldursMouth_SteelWatchActivated","CTY_Main_A")
THEN
PROC_LOW_BaldursMouth_SetUpSteelWatchers();

PROC
PROC_LOW_BaldursMouth_SetUpSteelWatchers()
THEN
Close((ITEM)S_LOW_BaldursMouth_BasementDoor_0ceaeb6e-1f7a-47ca-94e6-2ea56e93f99d);
Lock((ITEM)S_LOW_BaldursMouth_BasementDoor_0ceaeb6e-1f7a-47ca-94e6-2ea56e93f99d, "LOW_BaldursMouth_BasementDoorLocked");
SetOnStage(S_LOW_BaldursMouth_WarningNote_6dedfb84-b858-4e42-8171-61554ddcc800, 1);

IF
DB_InRegion(_Player, (TRIGGER)S_LOW_BaldursMouh_BasementDoorDialogTrigger_c2444786-5947-43f7-93dc-1a18f150dd43)
AND
DB_Players(_Player)
AND
QRY_OncePerUserAndNearbyPlayers(_Player, "LOW_BaldursMouth_SawWarningNote")
THEN
PROC_TryStartAD(GLO_PerceptionSuccess_48825dbe-a320-7c4c-fe3e-372b717d5bc9, _Player);
PROC_PlayPerceptionRevealEffect(S_LOW_BaldursMouth_WarningNote_6dedfb84-b858-4e42-8171-61554ddcc800, "LOW_BaldursMouth_SawWarningNote");
//END_REGION

//REGION Handles reactivity for if players kill Ettvard

//Promotes Malek Stones to editor if he is alive
IF
CrimeIsRegistered(S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73, "Murder", _, _, _Player, _, _, _)
AND
DB_Players(_Player)
AND
DB_WitnessKiller(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, S_LOW_BaldursMouth_Ettvard_Needle_c171c8b4-acb9-4633-9de4-a09176d21d73)
THEN
PROC_GlobalSetFlagAndCache((FLAG)LOW_BaldursMouth_State_MalekSawEttvardDie_66a68faa-38e1-428b-918f-3df10d511263);

PROC
PROC_LongRest()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_EttvardIsPermaDefeated_3ea02616-030f-412f-a6bf-84bb11f573d0)
AND
NOT DB_PermaDefeated(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12)
AND
QRY_OnlyOnce("LOW_BaldursMouth_SpawnEttvardReplacement")
THEN
DB_ExecuteInLevel("LOW_BaldursMouth_SpawnEttvardReplacement","CTY_Main_A");

PROC
PROC_ExecuteInLevel("LOW_BaldursMouth_SpawnEttvardReplacement","CTY_Main_A")
AND
NOT DB_PermaDefeated(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12)
THEN
TeleportTo((CHARACTER)S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, S_LOW_BaldursMouth_EttvardReplacementSpawnPoint_1cdb75d5-08b6-49b4-afca-b105edb5fdba, "LOW_BaldursMouth_MalekPromoted", 0, 0, 0, 0, 1);
SetOnStage(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, 1);
PROC_SetAnubisConfig(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, "LOW_BaldursMouth_MalekPromoted");

//Spawns new guy as editor if Malek Stones is dead
PROC
PROC_LongRest()
AND
DB_GlobalFlag(LOW_BaldursMouth_State_EttvardIsPermaDefeated_3ea02616-030f-412f-a6bf-84bb11f573d0)
AND
DB_PermaDefeated(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12)
AND
QRY_OnlyOnce("LOW_BaldursMouth_SpawnMalekReplacement")
THEN
DB_ExecuteWhenObjectInCurrentLevel("GLO_OnStage",S_LOW_BaldursMouth_EttvardReplacement_f904fed9-497c-4ba8-986f-1a0d38bd852d);

IF
DB_Act3_GLO_Gazette_BestArticle("LOW_Gazette_Article127", 6500)
AND
DB_Act3_GLO_Gazette_TodaysIssue(_Issue)
THEN
PROC_GlobalSetFlagAndCache((FLAG)GLO_Gazette_Headline_EttvardDead_4094f6a8-33bf-4f40-800a-5943e6872fe0);
DB_LOW_BaldursMouth_EttvardHeadlineIssue(_Issue);

IF
FlagSet(LOW_BaldursMouth_State_EttvardIsPermaDefeated_3ea02616-030f-412f-a6bf-84bb11f573d0, _, _)
THEN
PROC_GlobalClearFlagAndCache(LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb);

//END_REGION

//REGION Handles making the Baldurs Mouth Moving Platform work

IF
UseStarted(_Player, _Switch)
AND
DB_LOW_BaldursMouth_LiftSwitches(_Switch)
AND
DB_LOW_BaldursMouth_ElevatorState(0)
AND
NOT DB_LOW_BaldursMouth_ElevatorState(1)
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_ElevatorLowered", 250);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_ElevatorLowered")
AND
GetPosition(S_LOW_BaldursMouth_PlatformLoweredTrigger_8a698b58-42e5-48e7-bea1-273b125cf942, _X ,_Y, _Z)
THEN
DB_LOW_BaldursMouth_ElevatorState(1);
PlatformMoveTo(PLT_LOW_BaldursMouth_MoveableWalkway_000_a8dd4fa4-ffc9-4591-89fd-d55e0cd6f736, _X, _Y, _Z, 0.5, "LOW_BaldursMouth_ElevatorLowered", 1);
NOT DB_LOW_BaldursMouth_ElevatorState(0);

IF
UseStarted(_Player, _Switch)
AND
DB_LOW_BaldursMouth_LiftSwitches(_Switch)
AND
DB_LOW_BaldursMouth_ElevatorState(1)
THEN
ObjectTimerLaunch(_Player, "LOW_BaldursMouth_ElevatorRaised", 250);

IF
ObjectTimerFinished(_Player, "LOW_BaldursMouth_ElevatorRaised")
AND
GetPosition(S_LOW_BaldursMouth_PlatformRaisedTrigger_df728863-b270-4097-a97c-a4e220180565, _X ,_Y, _Z)
THEN
DB_LOW_BaldursMouth_ElevatorState(0);
PlatformMoveTo(PLT_LOW_BaldursMouth_MoveableWalkway_000_a8dd4fa4-ffc9-4591-89fd-d55e0cd6f736, _X, _Y, _Z, 0.5, "LOW_BaldursMouth_ElevatorRaised", 1);
NOT DB_LOW_BaldursMouth_ElevatorState(1);

//END_REGION

//REGION Handles stopping the printing of the Gazette FOR THE REST OF THE GAME

//If the printing press is destroyed
IF
DestroyedBy(S_LOW_BaldursMouth_BigMagicalPress_a6468d7c-2e5d-4cfb-a80d-fc5771c5795a, _, _, _)
THEN
PROC_GlobalSetFlagAndCache((FLAG)LOW_BaldursMouth_State_DestroyedPrinter_8bc8e697-d0bd-475e-8cc4-53c1c86c98cb);
PROC_GlobalClearFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);


//If Ettvard, Malek, and Ettvards Replacement are all killed
IF
DB_PermaDefeated(S_LOW_BaldursMouth_EttvardReplacement_f904fed9-497c-4ba8-986f-1a0d38bd852d)
AND
DB_PermaDefeated(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12)
THEN
PROC_GlobalClearFlagAndCache(GLO_Gazette_DailyGazettePrinting_5d9ab902-38c1-4a54-baa5-683d49614762);
//END_REGION

//REGION Reactivity for Merchants
IF
FlagSet((FLAG)LOW_BaldursMouth_Event_MerchantAttitudeImproved_5b162bdb-de94-46ca-9085-abb3b8c083db, _Speaker, _ID)
AND
DB_DialogSpeakers(_ID, _Player, 1)
THEN
AddAttitudeTowardsPlayer((CHARACTER)_Speaker, (CHARACTER)_Player, 5);

//Extra logic for specific merchants
//Figaro
IF
FlagSet((FLAG)LOW_SerialKiller_State_DolorIsPermaDefeated_a1ca5851-fea5-4536-934a-b402ac8d92a6, _, _)
THEN
NOT DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Figaro_3ff2b7ea-3de2-4bdc-a600-c973f290bc09);

//Jannath
PROC
PROC_LOW_OskasBeloved_SetJannathEstate()
THEN
DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_Jannath_f64fa57e-8061-4eb4-8d46-1ac743e1852d);

//Bosun Garret
IF
DB_GlobalFlag(LOW_BlushingMermaid_State_QuenoraIsSaved_2d5e3ae7-12b3-4dae-94c6-ec9acfceb61e)
AND
DB_GlobalFlag(LOW_BlushingMermaid_State_BosunGannetThanked_c3a3ab9e-d39c-26ff-10e7-be24a2bee92e)
THEN
NOT DB_LOW_BaldursMouth_Merchants((CHARACTER)S_LOW_BlushingMermaid_BosunGannet_d6f07cae-779b-4f10-b87c-c8117bfa1fe9);


//END_REGION

//REGION Combat support

//Malek flees
IF
EnteredCombat(S_LOW_BaldursMouth_SteelWatcher_000_e2dcd3e3-cd9e-49e0-8fe2-70af63e13530, _CombatID)
AND
QRY_OnlyOnce("LOW_BaldursMouth_MalekFlees")
THEN
PROC_TryStartAD(LOW_BaldursMouth_AD_MalekCombat_0f7cfd88-b2d4-66b5-6935-65d7fcfd2c65, S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12);
PROC_DisappearOutOfSight(S_LOW_BaldursMouth_Malek_Stones_633663b4-a38a-4982-9f44-8ca368740f12, "Run", 0, "Malek_Flees_BaldursMouthAttack");

//END_REGION

//REGION Silfy as broadsheet seller
// move to map
PROC
PROC_GLO_SetupForAct("CTY_Main_A", (CHARACTER)_Character, 1)
//AND
//DB_GlobalFlag(MOO_Jailbreak_State_LoverFreed_75a39abf-b7db-452d-991d-b158a4ea7d05) // Tieflings were freed from MOO prison
//AND
//NOT DB_GlobalFlag(HAV_Siege_State_NoProtection_2da0dbf1-88ca-4cab-9c8f-ee8921822958) // Haven is still intact, giving the tieflings a way out of SCL
AND
DB_LOW_BaldursMouth_BroadsheetSeller(_Character)
THEN
PROC_GLO_SetupForAct_Place(
	_Character, 
	(TRIGGER)S_LOW_BaldursMouth_Point_PaperGirl_4b252084-a62c-4c6e-abba-62bb31d27695, 
	(FACTION)ACT3_WYR_TieflingRefugees_bf98e827-e58f-42b2-9730-f226de97a8e8, 
	(DIALOGRESOURCE)WYR_Posthouse_BroadsheetSeller_6c840e1b-46ce-5fd1-b012-4c760d302c86);
PROC_SetCustomTradeTreasure(_Character, "LOW_BaldursMouth_Paperboy_Broadsheets");
DB_HasItemTemplateScriptFlag(1, (DIALOGRESOURCE)WYR_Posthouse_BroadsheetSeller_6c840e1b-46ce-5fd1-b012-4c760d302c86, (ITEMROOT)UNI_LOW_BaldursMouth_DailyPaper_5ffe11b1-4949-47cd-ab49-80053db261f9, 1);

// Generate trade treasure when talking to the paper girl
PROC
PROC_DialogFlagSetup(WYR_Posthouse_BroadsheetSeller_6c840e1b-46ce-5fd1-b012-4c760d302c86, S_DEN_Pickpocket_540ddc1f-42c6-4347-ba03-b3cf3d3942ab, _Player)
THEN
PROC_GenTradeItems((CHARACTER)_Player, S_DEN_Pickpocket_540ddc1f-42c6-4347-ba03-b3cf3d3942ab);

// Player bought a gazette
IF
MovedFromTo(_Item, (CHARACTER)_BroadsheetSeller, (CHARACTER)_Player, 1)
AND
DB_LOW_BaldursMouth_BroadsheetSeller(_BroadsheetSeller)
AND
DB_Players(_Player)
AND
GetTemplate(_Item, UNI_LOW_BaldursMouth_DailyPaper_5ffe11b1-4949-47cd-ab49-80053db261f9)
THEN
SetFlag(LOW_BaldursMouth_BoughtFromBroadsheetSeller_a6fdb074-0b7f-424c-8bdd-882dd719d1e3, _Player, 0);

IF
FlagSet(LOW_BaldursMouth_BoughtFromBroadsheetSeller_a6fdb074-0b7f-424c-8bdd-882dd719d1e3, _Player, _)
AND
NOT DB_GlobalFlag(LOW_BaldursMouth_State_BroadSheetSellerGoodAtSelling_f9c8a94d-746f-4687-b991-0959e73aee79)
THEN
SetFlag((FLAG)LOW_BaldursMouth_State_BoughtFromBroadsheetSellerBeforeGood_0bcf4d71-354a-4459-932f-fcc78eadf6ae, _Player);

PROC
PROC_LongRest()
AND
DB_Players(_Player)
THEN
ClearFlag(LOW_BaldursMouth_BoughtFromBroadsheetSeller_a6fdb074-0b7f-424c-8bdd-882dd719d1e3, _Player);

IF
FlagSet((FLAG)LOW_BaldursMouth_HasMet_BroadsheetSeller_d865bfce-5341-71b9-1ef5-2a85a3243d1b, _, _)
AND
QRY_OnlyOnce("LOW_BaldursMouth_BroadsheetSellerMetPlayers")
THEN
DB_LOW_BaldursMouth_BroadsheetSellerGetsBetter(1);

PROC
PROC_LongRest()
AND
DB_LOW_BaldursMouth_BroadsheetSellerGetsBetter(1)
THEN
SetFlag((FLAG)LOW_BaldursMouth_State_BroadSheetSellerGoodAtSelling_f9c8a94d-746f-4687-b991-0959e73aee79);
NOT DB_LOW_BaldursMouth_BroadsheetSellerGetsBetter(1);
//END_REGION

//REGION HasAny Flag support
IF
FlagSet(_Flag, _Char, _)
AND
DB_BaldursMouth_HasAnySupport(_Flag)
AND
DB_PartyMembers((CHARACTER)_Char)
AND
GetFlag(LOW_BaldursMouth_State_HasAnyArticleBlocks_3e8a9aec-98ee-4ef6-b222-39de214a6f0e, _Char, 0)
THEN
SetFlag(LOW_BaldursMouth_State_HasAnyArticleBlocks_3e8a9aec-98ee-4ef6-b222-39de214a6f0e, _Char, 0);

IF
FlagCleared(_Flag, _Char, _)
AND
DB_BaldursMouth_HasAnySupport(_Flag)
AND
DB_PartyMembers((CHARACTER)_Char)
AND
GetFlag(LOW_BaldursMouth_State_HasAnyArticleBlocks_3e8a9aec-98ee-4ef6-b222-39de214a6f0e, _Char, 1)
AND
NOT QRY_LOW_BaldursMouth_HasAnyBlocks((CHARACTER)_Char)
THEN
ClearFlag((FLAG)LOW_BaldursMouth_State_HasAnyArticleBlocks_3e8a9aec-98ee-4ef6-b222-39de214a6f0e, _Char, 0);

QRY
QRY_LOW_BaldursMouth_HasAnyBlocks((CHARACTER)_Char)
AND
DB_BaldursMouth_HasAnySupport(_Flag)
AND
GetFlag((FLAG)_Flag, _Char, 1)
THEN
DB_NOOP(1);
//END_REGION

//REGION Debug Commands
IF
FlagSet(LOW_BaldursMouth_Debug_GiveArticles_7ad42100-28a2-4d96-bb6c-fa8493e1a8f5, _Avatar, _)
AND
DB_Avatars((CHARACTER)_Avatar)
AND
DB_LOW_BaldursMouth_Articles(_, _Block, _)
THEN
ToInventory(_Block, _Avatar);

IF
TextEvent("GivePositiveArticles")
AND
DB_Avatars(_Avatar)
THEN
ToInventory(S_LOW_BaldursMouth_ArticleBlock_Positive01_1af44269-8d9b-4bd6-bdab-a9b3ca6a61f9, _Avatar);
ToInventory(S_LOW_BaldursMouth_ArticleBlock_Positive02_ab318f95-a9bd-4295-806e-c9ffa3eac9f6, _Avatar);
ToInventory(S_LOW_BaldursMouth_ArticleBlock_Positive03_2923d6c9-5640-49f1-a645-988dadfda21d, _Avatar);

IF
TextEvent("GiveAllArticles")
AND
DB_Avatars(_Avatar)
AND
DB_LOW_BaldursMouth_Articles(_, _Block, _)
THEN
ToInventory(_Block, _Avatar);
//END_REGION


//REGION LOW_StopTheGazette Journal
//BreakIn Start
IF
FlagSet((FLAG)LOW_BaldursMouth_State_NegativeArticleStarted_b1f2debb-9174-441f-9b1e-0e3bc9aba3eb, _Player, _)
AND
DB_Players((CHARACTER)_Player)
AND
QuestUpdateIsUnlocked(_Player, "LOW_StopTheGazette", "EttvardStart", 0)
THEN
QuestUpdate("LOW_StopTheGazette", "BreakInStart");

//Meeting Estra Start
IF
DialogEnded(LOW_BaldursMouth_Estra_DefaultDialog_e3c0791b-8fc6-7f07-5b7c-6a57d218a7da, _ID)
AND
DB_DialogSpeakers(_ID, _Player, 2)
AND
GetFlag(LOW_BaldursMouth_Knows_AboutNegativeArticle_d38ac3ad-39d7-3ba8-525f-d45ab50e10da, _Player, 1)
THEN
QuestUpdate("LOW_StopTheGazette", "JournalistStart");


//Finding Positive before Printer Update
IF
FlagSet(_PositiveArticleFlag, _Player, _)
AND
DB_HasItemEvent(_PositiveArticleItem, _PositiveArticleFlag)
AND
DB_LOW_BaldursMouth_PositiveArticles(_PositiveArticleItem)
AND
DB_Players((CHARACTER)_Player)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "EttvardStart", 1)
AND
QRY_OnlyOnce("LOW_StopTheGazette_1000Updates")
THEN
QuestUpdate("LOW_StopTheGazette", "PositiveFoundNoPrinter");

//Finding Printer before positive Update
IF
FlagSet((FLAG)LOW_BaldursMouth_HasMet_PrinterGremlin_f89f6d6f-17dc-4089-acb9-e859beec6e75, _Player, _)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "EttvardStart", 1)
AND
QRY_OnlyOnce("LOW_StopTheGazette_1000Updates")
THEN
QuestUpdate("LOW_StopTheGazette", "PrinterFound");

//Positive found after meeting printer Updates
IF
FlagSet(_PositiveArticleFlag, _Player, _)
AND
DB_HasItemEvent(_PositiveArticleItem, _PositiveArticleFlag)
AND
DB_LOW_BaldursMouth_PositiveArticles(_PositiveArticleItem)
AND
DB_Players((CHARACTER)_Player)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "BefriendedPrinter", 1)
THEN
QuestUpdate("LOW_StopTheGazette", "PositiveFoundGremlin");

IF
FlagSet(_PositiveArticleFlag, _Player, _)
AND
DB_HasItemEvent(_PositiveArticleItem, _PositiveArticleFlag)
AND
DB_LOW_BaldursMouth_PositiveArticles(_PositiveArticleItem)
AND
DB_Players((CHARACTER)_Player)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "BefriendedPrinter", 0)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "PositiveFoundNoPrinter", 0)
THEN
QuestUpdate("LOW_StopTheGazette", "PositiveFoundNoGremlin");

//Quest Ends
IF
DestroyedBy(S_LOW_BaldursMouth_BigMagicalPress_a6468d7c-2e5d-4cfb-a80d-fc5771c5795a, _, _, _)
THEN
QuestUpdate("LOW_StopTheGazette", "BrokePrinter");

IF
TemplateUseFinished(_Player, UNI_LOW_BaldursMouth_DailyPaper_5ffe11b1-4949-47cd-ab49-80053db261f9, _Item, _)
AND
DB_Act3_GLO_Gazette_OwnedPapers(_Item, _Issue)
AND
DB_GlobalFlag(GLO_Gazette_Headline_EttvardDead_4094f6a8-33bf-4f40-800a-5943e6872fe0)
AND
DB_LOW_BaldursMouth_EttvardHeadlineIssue(_Issue)
AND
DB_Players(_Player)
AND
QuestUpdateIsUnlocked((CHARACTER)_Player, "LOW_StopTheGazette", "EttvardStart", 1)
THEN
QuestUpdate("LOW_StopTheGazette", "KilledEttvard"); //text does not actually mention Ettvard being dead, but "ruined"

IF
FlagSet(LOW_BaldursMouth_State_PrintedNeutral_771b7dd5-59df-445d-8c45-3b13bc85d036, _, _)
THEN
QuestUpdate("LOW_StopTheGazette", "PrintedNeutral");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act3b"
