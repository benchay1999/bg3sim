Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Documentation on Confluence:
// -[Link Redacted]
// -[Link Redacted]

NOT DB_Camp_CustomSleepCutscene("",(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

//For Camp Priority use this guideline:
//Urgent = 8000+
//Story Crit Path = 7000+
//Avatar Crit Path = 6000+
//Companion Crit Path = 5000+
//Romance Scenes = 4000+
//Avatar Regular = 3000+
//Companion Regular = 2000+
//Story Regular = 1000+
//
//Give each night a unique score so there is no doubt over order
//If you're not sure whether a situation is Crit Path/Urgent/Regular, talk to your region lead/creative director. And remember: If everything is top priority, nothing is top priority!

NOT DB_CampNight((FLAG)NULL_00000000-0000-0000-0000-000000000000,-1);
NOT DB_CampNight((FLAG)NULL_00000000-0000-0000-0000-000000000000,-1,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Camp((FLAG)NULL_00000000-0000-0000-0000-000000000000,"");
NOT DB_CampNight_ExclusiveMoment((FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement_Approval((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0);
NOT DB_CampNight_Requirement_Partner((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement_Dating((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement_CanStartDating((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Requirement_SameUser((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_Cancels((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_CancelledBy((FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_ExpiresAfter((FLAG)NULL_00000000-0000-0000-0000-000000000000,0);
NOT DB_CampNight_CRD((FLAG)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_EveryCRDGetsExclamationMark((FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_CFM((FLAG)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_MorningCFM((FLAG)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_IVB((FLAG)NULL_00000000-0000-0000-0000-000000000000,(VOICEBARKRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_SCO((FLAG)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_SoloDream((FLAG)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_RomanceNight((FLAG)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_AvatarDream((FLAG)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_MorningIVB((FLAG)NULL_00000000-0000-0000-0000-000000000000,(VOICEBARKRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_OriginCampFlags((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_SetPosition((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "", (GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CampNight_ForceOnLevelSwap((FLAG)NULL_00000000-0000-0000-0000-000000000000,"_ReadyCheckIdentifier",0,0); //CampNightFlag,ReadyCheckIdentifier,Priority,OverrideRequirements
NOT DB_CampNight_ResurrectWhenForced((FLAG)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_Camp_StayInCampAfterMorningCFM((DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_FallbackCamp_TeleporterCampPairings("ReadyCheckID","CampID");

DB_CampNightFlags_PartySize(2,(FLAG)CAMP_PartySize_AtLeast2_3bf26823-3143-4d1a-85e6-8a7e04273d77);
DB_CampNightFlags_PartySize(3,(FLAG)CAMP_PartySize_AtLeast3_ed6c9959-36e4-4235-a841-63b395f0fe4e);
DB_CampNightFlags_PartySize(4,(FLAG)CAMP_PartySize_AtLeast4_62130ed1-4567-4f3a-82ed-7801dc58e01a);

NOT DB_Debug_PresetFlags((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
KBSECTION
//REGION CampNight - Avatar Priority > Companion Priority
IF
DB_CampNight((FLAG)_NightFlag,(INTEGER)_CompanionPriority,(CHARACTER)_Avatar)
AND
DB_Avatars(_Avatar)
AND
IntegerSum(_CompanionPriority,1000,_AvatarPriority)
THEN
NOT DB_CampNight(_NightFlag,_CompanionPriority);
DB_CampNight(_NightFlag,_AvatarPriority);

IF
DB_CampNight((FLAG)_NightFlag,(INTEGER)_CompanionPriority,(CHARACTER)_Companion)
AND
NOT DB_Avatars(_Companion)
AND
IntegerSum(_CompanionPriority,1000,_AvatarPriority)
THEN
DB_CampNight(_NightFlag,_CompanionPriority);
NOT DB_CampNight(_NightFlag,_AvatarPriority);
//END_REGION

//REGION CampNight - Selection
//Cleanup 1
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_BestCampNight(_NightFlag,_Priority)
THEN
NOT DB_Camp_BestCampNight(_NightFlag,_Priority);

//Cleanup 2
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedNight(_NightFlag)
THEN
NOT DB_Camp_QueuedNight(_NightFlag);

//Cleanup 3
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedSCO(_SCODialog)
THEN
NOT DB_Camp_QueuedSCO(_SCODialog);

//Cleanup 4
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedAvatarDream(_AvatarDream)
THEN
NOT DB_Camp_QueuedAvatarDream(_AvatarDream);

//Cleanup 5
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedSoloDream(_Character,_SoloDream)
THEN
NOT DB_Camp_QueuedSoloDream(_Character,_SoloDream);

//Cleanup 6
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedRomanceNight(_Character,_SoloDream,_Avatar)
THEN
NOT DB_Camp_QueuedRomanceNight(_Character,_SoloDream,_Avatar);

//Cleanup 7
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedMorningCFM(_MorningCFM)
THEN
NOT DB_Camp_QueuedMorningCFM(_MorningCFM);

//Cleanup 8
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedMorningIVB(_MorningIVB,_PartyMemberHint)
THEN
NOT DB_Camp_QueuedMorningIVB(_MorningIVB,_PartyMemberHint);

//Cleanup 9
PROC
PROC_CampNight_DecideCampNight()
AND
DB_Camp_QueuedIVB(_IVB,_PartyMemberHint)
THEN
NOT DB_Camp_QueuedIVB(_IVB,_PartyMemberHint);

//Cleanup 10
PROC
PROC_CampNight_DecideCampNight()
AND
DB_CampNight_CompletedQueuedCFM((DIALOGRESOURCE)_CFM)
THEN
NOT DB_CampNight_CompletedQueuedCFM(_CFM);

//Some camp nights have dynamic conditions. Give custom scripting a change to update the requirements at the last minute.
PROC
PROC_CampNight_DecideCampNight()
THEN
PROC_CampNight_PreSelection_Hook();

PROC
PROC_CampNight_PreSelection_Hook()
THEN
DB_NOOP(1);

//Forced Camp Night (Through Debug command) DO NOT USE AS PART OF SITUATION SCRIPTING
PROC
PROC_CampNight_DecideCampNight()
AND
DB_CampNight_DEBUG_ForcedEntry(_NightFlag,_IgnoreCampType)
AND
QRY_Camp_DebugQNight_AllowCampNightInCamp(_NightFlag,_IgnoreCampType)
THEN
NOT DB_CampNight_DEBUG_ForcedEntry(_NightFlag,_IgnoreCampType);
DB_Camp_QueuedNight(_NightFlag);

//If campnight can play in active camp, return true
QRY
QRY_Camp_DebugQNight_AllowCampNightInCamp((FLAG)_NightFlag,(INTEGER)_IgnoreCampType)
AND
DB_ActiveCamp(_Camp)
AND
DB_CampNight_Camp((FLAG)_NightFlag,_Camp)
THEN
DB_NOOP(1);

//If campnight can NOT play in active camp, throw warning and return true only if _IgnoreCampType
QRY
QRY_Camp_DebugQNight_AllowCampNightInCamp((FLAG)_NightFlag,(INTEGER)_IgnoreCampType)
AND
DB_ActiveCamp(_Camp)
AND
NOT DB_CampNight_Camp((FLAG)_NightFlag,_Camp)
AND
QRY_Camp_DebugQNight_AllowCampNightInCamp_ThrowWarning()
AND
_IgnoreCampType == 1
THEN
DB_NOOP(1);

QRY
QRY_Camp_DebugQNight_AllowCampNightInCamp_ThrowWarning()
THEN
TimerLaunch("DEBUG_CAMP_UnsupportedCampTypeFault",1000);

IF
TimerFinished("DEBUG_CAMP_UnsupportedCampTypeFault")
AND
GetHostCharacter(_Player)
THEN
OpenMessageBox(_Player,"DEBUG_CAMP_UnsupportedCampTypeFault");

//Normal Flow: Start Recursive Loop
PROC
PROC_CampNight_DecideCampNight()
AND
NOT DB_CampNight_DEBUG_ForcedEntry(_,_)
AND
NOT DB_CampNight_DEBUG_Disabled(1)
THEN
PROC_CampNight_CheckExpirationDates();
PROC_CampNight_CacheSleepSpeakers();
PROC_CampNight_DecideCampNight_Recursive();

PROC
PROC_CampNight_DecideCampNight()
AND
DB_FallbackCamp_InCamp(_)
THEN
PROC_FallbackCamp_EnsureResurrections();

//Expiration Dates: Once the requirements for a camp night are met, the timer starts counting down. If X days pass without it having triggered, cancel it anyway because it is no longer relevant.
//Assumes PROC_CampNight_DecideCampNight() gets only called once per day.
//
//Time's up -> Cancel
PROC
PROC_CampNight_CheckExpirationDates()
AND
DB_CampNight_StartedExpiring(_NightFlag,_LifetimeLeft)
AND
_LifetimeLeft <= 1
THEN
PROC_CampNight_ClearCampNight(_NightFlag);
NOT DB_CampNight_StartedExpiring(_NightFlag,_LifetimeLeft);

//Else Reduce Time
PROC
PROC_CampNight_CheckExpirationDates()
AND
DB_CampNight_StartedExpiring(_NightFlag,_LifetimeLeft)
AND
IntegerSubtract(_LifetimeLeft,1,_NewLifetimeLeft)
THEN
NOT DB_CampNight_StartedExpiring(_NightFlag,_LifetimeLeft);
DB_CampNight_StartedExpiring(_NightFlag,_NewLifetimeLeft);

//Not yet started -> Check conditions
PROC
PROC_CampNight_CheckExpirationDates()
AND
DB_CampNight_ExpiresAfter(_NightFlag,_Lifetime)
AND
NOT DB_CampNight_StartedExpiring(_NightFlag,_)
AND
QRY_CampNight_MeetsRequirements(_NightFlag)
THEN
DB_CampNight_StartedExpiring(_NightFlag,_Lifetime);


//We want to optimize the parallellization of dreams whenever possible. SCO & Avatar Dreams never allow parrallellization, Solo Dreams always allow it. But when it comes to romance nights, the logic gets tricky. We only sometimes know who the avatar is going to be. Hence all these checks.
//Clean old data 1
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_CachedSleepExclusiveDialogs(_NightFlag)
THEN
NOT DB_CampNight_CachedSleepExclusiveDialogs(_NightFlag);

//Clean old data 2
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual)
THEN
NOT DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual);

//SCO -> Always exclusive
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_SCO(_Nightflag,_SCO)
THEN
DB_CampNight_CachedSleepExclusiveDialogs(_NightFlag);

//Avatar Dream -> Always exclusive
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_AvatarDream(_Nightflag,_AvD)
THEN
DB_CampNight_CachedSleepExclusiveDialogs(_NightFlag);

//Solo Dream -> Always individual
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_SoloDream(_Nightflag,_Individual,_SD)
THEN
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual);

//Null-flagged romance Night & Partner -> 2 known individuals 
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_RomanceNight(_Nightflag,_Individual,_SD_Rom,(FLAG)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_ORI_Partnered(_Avatar,_Individual)
THEN
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual);
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Avatar);

//Null-flagged romance Night & Dating -> 2 known individuals 
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_RomanceNight(_Nightflag,_Individual,_SD_Rom,(FLAG)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_ORI_Dating(_Avatar,_Individual)
THEN
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual);
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Avatar);

//Flagged Romance Night -> Check Flag on Avatars -> Found -> 2 known individuals.
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_RomanceNight(_Nightflag,_Individual,_SD_Rom,_RomConFlag)
AND
_RomConFlag != NULL_00000000-0000-0000-0000-000000000000
AND
DB_Avatars(_Avatar)
AND
GetFlag(_RomConFlag,_Avatar,1)
THEN
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual);
DB_CampNight_SleepIndividualDialogs(_NightFlag,_Avatar);

//If none of the above -> Avatar unknown -> Exclusive sleep dialogue
PROC
PROC_CampNight_CacheSleepSpeakers()
AND
DB_CampNight_RomanceNight(_Nightflag,_Individual,_,_)
AND
NOT DB_CampNight_SleepIndividualDialogs(_NightFlag,_Individual)
THEN
DB_CampNight_CachedSleepExclusiveDialogs(_NightFlag);

PROC
PROC_CampNight_DecideCampNight_Recursive()
THEN
DB_Camp_BestCampNight((FLAG)Fake_00000000-0000-0000-0000-000000000000,-1);

//Non-forced camp night selection
PROC
PROC_CampNight_DecideCampNight_Recursive()
AND
NOT DB_FallbackCamp_InCamp(_)
AND
DB_ActiveCamp(_Camp)
AND
DB_CampNight(_NightFlag,_Priority)
AND
DB_CampNight_Camp(_NightFlag,_Camp)
AND
NOT DB_Camp_QueuedNight(_NightFlag)
AND
DB_Camp_BestCampNight(_CurrentBestNightFlag,_CurrentBestPriority)
AND
_Priority > _CurrentBestPriority
AND
NOT QRY_CampNight_HasExclusivityProblem(_NightFlag)
AND
NOT QRY_CampNight_HasEveningReservedSpeakerProblem(_NightFlag)
AND
NOT QRY_CampNight_HasSleepReservedSpeakerProblem(_NightFlag)
AND
NOT QRY_CampNight_HasMorningReservedSpeakerProblem(_NightFlag)
AND
QRY_CampNight_MeetsRequirements(_NightFlag)
AND
NOT QRY_CampNight_AllSpeakersMissing(_NightFlag)
THEN
NOT DB_Camp_BestCampNight(_CurrentBestNightFlag,_CurrentBestPriority);
DB_Camp_BestCampNight(_NightFlag,_Priority);

//Forced camp night selection
PROC
PROC_CampNight_DecideCampNight_Recursive()
AND
DB_FallbackCamp_InCamp(_ReadyCheckID)
AND
DB_ActiveCamp(_Camp)
AND
DB_CampNight_ForceOnLevelSwap(_NightFlag,_ReadyCheckID,_Priority,_)
AND
DB_CampNight_Camp(_NightFlag,_Camp)
AND
NOT DB_Camp_QueuedNight(_NightFlag)
AND
DB_Camp_BestCampNight(_CurrentBestNightFlag,_CurrentBestPriority)
AND
_Priority > _CurrentBestPriority
AND
QRY_CampNight_MeetsRequirements(_NightFlag)
AND
NOT QRY_CampNight_AllSpeakersMissing(_NightFlag)
THEN
NOT DB_Camp_BestCampNight(_CurrentBestNightFlag,_CurrentBestPriority);
DB_Camp_BestCampNight(_NightFlag,_Priority);

PROC
PROC_CampNight_DecideCampNight_Recursive()
THEN
NOT DB_Camp_BestCampNight((FLAG)Fake_00000000-0000-0000-0000-000000000000,-1);

//If selected Night is Non-Exclusive, see if we can find other non-exclusive nights with unclaimed speakers and do this as long as you keep finding new nights.
PROC
PROC_CampNight_DecideCampNight_Recursive()
AND
DB_Camp_BestCampNight(_NightFlag,_Priority)
THEN
NOT DB_Camp_BestCampNight(_NightFlag,_Priority);
DB_Camp_QueuedNight(_NightFlag);
PROC_CampNight_DecideCampNight_Recursive();

IF
DB_Camp_QueuedNight(_NightFlag)
AND
DB_CampNight_ForceOnLevelSwap(_NightFlag,_ReadyCheckID,_,_)
AND
DB_FallbackCamp_InCamp(_ReadyCheckID)
THEN
PROC_FallbackCamp_OnCampNightQueued((FLAG)_NightFlag);

PROC
PROC_FallbackCamp_OnCampNightQueued((FLAG)_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasExclusivityProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_ExclusiveMoment(_PotentialNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasExclusivityProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_ExclusiveMoment(_QueuedNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasExclusivityProblem((FLAG)_PotentialNight)
AND
DB_CampNight_OnlyAllowSleepOrMorningMoments(1)
AND
QRY_CampNight_HasEveningDialogs(_PotentialNight)
THEN
DB_NOOP(1);

//Evening: If there's already a queued night, a new night is only allowed if all max 1 night has exclusive dialogs and the speakers for non-exclusive dialogs don't overlap.
QRY
QRY_CampNight_HasEveningReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
QRY_CampNight_HasEveningExclusiveDialogs(_QueuedNight)
AND
QRY_CampNight_HasEveningExclusiveDialogs(_PotentialNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasEveningReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_CRD(_QueuedNight,_Speaker,_,_)
AND
DB_CampNight_CRD(_PotentialNight,_Speaker,_,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasEveningExclusiveDialogs((FLAG)_NightFlag)
AND
DB_CampNight_CFM(_NightFlag,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasEveningExclusiveDialogs((FLAG)_NightFlag)
AND
DB_CampNight_IVB(_NightFlag,_,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasEveningDialogs((FLAG)_NightFlag)
AND
QRY_CampNight_HasEveningExclusiveDialogs(_NightFlag)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasEveningDialogs((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,_,_,_)
THEN
DB_NOOP(1);

//Night/Dream dialogs: Avatar dreams, sleep cutscene overrides and romance night are exclusive, but solo dreams can happen simultaneously as long as there are no speaker overlaps.
QRY
QRY_CampNight_HasSleepReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_CachedSleepExclusiveDialogs(_QueuedNight)
AND
DB_CampNight_CachedSleepExclusiveDialogs(_PotentialNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasSleepReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_SleepIndividualDialogs(_QueuedNight,_)
AND
DB_CampNight_CachedSleepExclusiveDialogs(_PotentialNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasSleepReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_SleepIndividualDialogs(_PotentialNight,_)
AND
DB_CampNight_CachedSleepExclusiveDialogs(_QueuedNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasSleepReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_SleepIndividualDialogs(_PotentialNight,_Speaker)
AND
DB_CampNight_SleepIndividualDialogs(_QueuedNight,_Speaker)
THEN
DB_NOOP(1);

//Prevent multiple SD/Romance Nights for one user.
QRY
QRY_CampNight_HasSleepReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
DB_CampNight_SleepIndividualDialogs(_PotentialNight,_Speaker)
AND
DB_CampNight_SleepIndividualDialogs(_QueuedNight,_Speaker2)
AND
DB_Avatars(_Speaker)
AND
DB_Avatars(_Speaker2)
AND
_Speaker != _Speaker2
AND
GetReservedUserID(_Speaker,_SameUserID)
AND
GetReservedUserID(_Speaker2,_SameUserID)
THEN
DB_NOOP(1);

//For now we only want one moment in the morning. Can be upgraded later to allow a MorningIVB & MorningCFM from different nights should need arise.
QRY
QRY_CampNight_HasMorningReservedSpeakerProblem((FLAG)_PotentialNight)
AND
DB_Camp_QueuedNight(_QueuedNight)
AND
QRY_CampNight_HasMorningExclusiveDialogs(_QueuedNight)
AND
QRY_CampNight_HasMorningExclusiveDialogs(_PotentialNight)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasMorningExclusiveDialogs((FLAG)_NightFlag)
AND
DB_CampNight_MorningIVB(_NightFlag,_,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_HasMorningExclusiveDialogs((FLAG)_NightFlag)
AND
DB_CampNight_MorningCFM(_NightFlag,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements((FLAG)_NightFlag)
AND
NOT QRY_CampNight_MeetsRequirements_IsInFallback((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_Approval((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_Partner((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_Dating((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_StartDating((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_SameUser((FLAG)_NightFlag)
THEN
DB_NOOP(1);

//Checks whether we are in a fallback camp and this camp night can be forced here
QRY
QRY_CampNight_MeetsRequirements((FLAG)_NightFlag)
AND
QRY_CampNight_MeetsRequirements_IsInFallback((FLAG)_NightFlag)
AND
QRY_FallbackCamp_CampNightMeetsRequirements(_NightFlag) //checks the requirements for this camp night to be forced here
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_IsInFallback((FLAG)_NightFlag)
AND
DB_CampNight_ForceOnLevelSwap((FLAG)_NightFlag,_ReadyCheckID,_,1)
AND
DB_FallbackCamp_InCamp(_ReadyCheckID)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_)
AND
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_,(FLAG)_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag3) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag3) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag4) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag3) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag4) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag5) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag3) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag4) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag5) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag6) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Flags((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6,(FLAG)_Flag7)
AND
DB_GlobalFlag((FLAG)_Flag1) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag2) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag3) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag4) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag5) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag6) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
AND
DB_GlobalFlag((FLAG)_Flag7) // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global // flagType: Global
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Approval((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement_Approval((FLAG)_NightFlag, _, _)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Approval((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_Approval((FLAG)_NightFlag, (CHARACTER)_Companion, (INTEGER)_MinApproval)
AND
DB_InCamp(_Companion)
AND
NOT DB_Avatars(_Companion)
AND 
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
NOT QRY_PreventMPDialogue(_Companion, _Avatar)
AND
GetApprovalRating(_Companion, _Avatar, _Approval)
AND
_Approval >= _MinApproval
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Partner((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement_Partner((FLAG)_NightFlag, _)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_Partner((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_Partner((FLAG)_NightFlag, (CHARACTER)_Companion)
AND
DB_ORI_Partnered(_Avatar,_Companion)
AND
DB_InCamp(_Avatar)
AND
NOT QRY_PreventMPDialogue(_Companion, _Avatar)
THEN
DB_NOOP(1);

QRY	
QRY_CampNight_MeetsRequirements_Dating((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_Dating(_NightFlag, _Character)
AND
DB_ORI_Dating(_Avatar, _Character)
AND
NOT QRY_PartneredWithOther(_Avatar, _Character)
AND
DB_InCamp(_Avatar)
AND
NOT DB_Avatars(_Character)
AND
NOT QRY_PreventMPDialogue(_Character, _Avatar)
THEN
DB_NOOP(1);


QRY	
QRY_CampNight_MeetsRequirements_Dating((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement_Dating(_NightFlag, _)
THEN
DB_NOOP(1);

QRY	
QRY_CampNight_MeetsRequirements_StartDating((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_CanStartDating(_NightFlag, _Character)
AND
NOT DB_ORI_Dating(_, _Character)
AND
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
NOT DB_Avatars(_Character)
AND
NOT DB_ORI_Partnered(_Avatar, _)
AND
GetFlag(ORI_State_DoubleDating_41320aeb-8e1a-433d-a82e-3d78aff578da, _Avatar, 0)
AND
NOT DB_ORI_WasDating(_Avatar, _Character)
AND
QRY_CampNight_MeetsRequirements_StartDating_RomanceNight((FLAG)_NightFlag, (CHARACTER)_Avatar) //Make sure that if there's a romance night, that romance night can actually be queued for the same Avatar.
AND
QRY_CampNight_MeetsRequirements_StartDating_Approval((FLAG)_NightFlag, _Character, _Avatar)
AND
NOT QRY_PreventMPDialogue(_Character, _Avatar)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_StartDating_Approval((FLAG)_NightFlag, (CHARACTER)_Character, (CHARACTER)_Avatar)
AND
NOT DB_CampNight_Requirement_Approval((FLAG)_NightFlag, (CHARACTER)_Character, _)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_StartDating_Approval((FLAG)_NightFlag, (CHARACTER)_Character, (CHARACTER)_Avatar)
AND
DB_CampNight_Requirement_Approval((FLAG)_NightFlag, (CHARACTER)_Character, _MinApproval)
AND
DB_ApprovalRating(_Character, _Avatar, _Approval)
AND
_Approval > _MinApproval
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_StartDating_RomanceNight((FLAG)_NightFlag, (CHARACTER)_Avatar)
AND
NOT DB_CampNight_RomanceNight(_Nightflag, _, _, _)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_StartDating_RomanceNight((FLAG)_NightFlag, (CHARACTER)_Avatar)
AND
DB_CampNight_RomanceNight(_Nightflag, _, _, NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_StartDating_RomanceNight((FLAG)_NightFlag, (CHARACTER)_Avatar)
AND
DB_CampNight_RomanceNight(_Nightflag, _, _, _RomConFlag)
AND
_RomConFlag != NULL_00000000-0000-0000-0000-000000000000
AND
GetFlag(_RomConFlag, _Avatar, 1)
THEN
DB_NOOP(1);

QRY	
QRY_CampNight_MeetsRequirements_StartDating((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement_CanStartDating(_NightFlag, _)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_SameUser((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_SameUser(_NightFlag, _Companion1, _Companion2)
AND
NOT QRY_PreventMPDialogue( _Companion1, _Companion2)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_MeetsRequirements_SameUser((FLAG)_NightFlag)
AND
NOT DB_CampNight_Requirement_SameUser(_NightFlag, _, _)
THEN
DB_NOOP(1);

//If the camp night only has conditional moments (CRDs, Solo Dreams, Romance Nights) then at least one involved companion should be present
QRY
QRY_CampNight_AllSpeakersMissing((FLAG)_NightFlag)
AND
NOT DB_CampNight_CFM(_NightFlag,_)
AND
NOT DB_CampNight_IVB(_NightFlag,_,_)
AND
NOT DB_CampNight_SCO(_NightFlag,_)
AND
NOT DB_CampNight_MorningIVB(_NightFlag,_,_)
AND
NOT DB_CampNight_MorningCFM(_NightFlag,_)
AND
NOT QRY_CampNight_AtLeastOneCompanionAvailableForCRD(_NightFlag)
AND
NOT QRY_CampNight_AtLeastOneAvatarAvailableForSoloDream(_NightFlag)
AND
NOT QRY_CampNight_AtLeastOneAvatarAvailableForAvatarDream(_NightFlag)
AND
NOT QRY_CampNight_AtLeastOneCompanionAvailableForRomanceMoment(_NightFlag)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_AtLeastOneCompanionAvailableForCRD((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,_NarratorFallbackCRD,_)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_AtLeastOneCompanionAvailableForCRD((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,_Companion,_,_)
AND
NOT DB_Avatars(_Companion)
AND
DB_InCamp(_Companion)
AND
NOT DB_CantTalk(_Companion)
AND
QRY_SpeakerIsAvailable(_Companion)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_AtLeastOneAvatarAvailableForSoloDream((FLAG)_NightFlag)
AND
DB_CampNight_SoloDream(_NightFlag,_Avatar,_)
AND
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
NOT DB_CantTalk(_Avatar)
AND
QRY_SpeakerIsAvailable(_Avatar)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_AtLeastOneAvatarAvailableForAvatarDream((FLAG)_NightFlag)
AND
DB_CampNight_AvatarDream(_NightFlag,_)
AND
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
NOT DB_CantTalk(_Avatar)
AND
QRY_SpeakerIsAvailable(_Avatar)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_AtLeastOneCompanionAvailableForRomanceMoment((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight(_NightFlag,_Companion,_,_)
AND
NOT DB_Avatars(_Companion)
AND
DB_InCamp(_Companion)
AND
NOT DB_CantTalk(_Companion)
AND
QRY_SpeakerIsAvailable(_Companion)
THEN
DB_NOOP(1);

//END_REGION

//REGION CampNight - Disable Attack Button during Camp Nights
IF
DB_CampNight_CRD(_,_,_CRD,_)
THEN
DB_DialogBlockTradeButton(_CRD);
DB_DialogBlockAttackButton(_CRD);

IF
DB_CampNight_CFM(_,_CFM)
THEN
DB_DialogBlockTradeButton(_CFM);
DB_DialogBlockAttackButton(_CFM);

IF
DB_CampNight_SCO(_,_SCO)
THEN
DB_DialogBlockTradeButton(_SCO);
DB_DialogBlockAttackButton(_SCO);

IF
DB_CampNight_SoloDream(_,_,_SD)
THEN
DB_DialogBlockTradeButton(_SD);
DB_DialogBlockAttackButton(_SD);

IF
DB_CampNight_RomanceNight(_,_,_SD,_)
THEN
DB_DialogBlockTradeButton(_SD);
DB_DialogBlockAttackButton(_SD);

IF
DB_CampNight_AvatarDream(_,_AvD)
THEN
DB_DialogBlockTradeButton(_AvD);
DB_DialogBlockAttackButton(_AvD);

IF
DB_CampNight_MorningCFM(_,_CFM)
THEN
DB_DialogBlockTradeButton(_CFM);
DB_DialogBlockAttackButton(_CFM);
//END_REGION

//REGION CampNight - Evening - Execution 0: DEBUG: Display selected Camp Night
PROC
PROC_CampNight_StartSelected()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
GUIDToString(_NightFlag,_Output)
AND
GetHostCharacter(_Player)
THEN
DebugText(_Player,_Output);

IF
TextEvent("queuednights")
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
GUIDToString(_NightFlag,_Output)
AND
GetHostCharacter(_Player)
THEN
DebugText(_Player,_Output);
//END_REGION

//REGION CampNight - Evening - Execution 1: Set characters on their night-specific positions.
PROC
PROC_CampNight_StartSelected()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_ActiveCamp(_Camp)
AND
DB_CampNight_SetPosition(_NightFlag, _Character, _Camp, _Trigger)
AND
DB_InCamp(_Character)
AND
NOT DB_Avatars(_Character)
THEN
TeleportTo(_Character, _Trigger, "", 0, 0, 0, 0, 1);
PROC_CampSwap_UpdateAnubisCampPos(_Camp,_Character);
//END_REGION

//REGION CampNight - Evening - Execution 2: Try CFM (Campfire Moment Dialog: Involves certain fixed speakers, possibly some optional speakers and every party member)
PROC
PROC_CampNight_StartSelected()
THEN
PROC_CampNight_StartSelected_CFM();

PROC
PROC_CampNight_StartSelected_CFM()
AND
QRY_OnlyOnce_Reset("GLO_CampNight_ExecutingCampfireMoment")
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_CFM((FLAG)_NightFlag,_CampfireMoment)
AND
NOT DB_CampNight_CompletedQueuedCFM(_CampfireMoment)
AND
QRY_OnlyOnce("GLO_CampNight_ExecutingCampfireMoment")
THEN
PROC_CampfireMoment_PreDialog(_CampfireMoment);
PROC_CampfireMoment_Dialog(_CampfireMoment);

PROC
PROC_CampfireMoment_Failed((DIALOGRESOURCE)_CampfireMoment)
AND
DB_CampNight_CFM(_NightFlag,_CampfireMoment)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
DB_CampNight_CompletedQueuedCFM(_CampfireMoment);
PROC_CampfireMoment_CheckEndCFM();

IF
DialogEnded(_CampfireMoment,_)
AND
DB_CampNight_CFM(_NightFlag,_CampfireMoment)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
PROC_CampfireMoment_ClearCampfireMoment(_CampfireMoment);
PROC_CampfireMoment_PostDialog(_CampfireMoment);
DB_CampNight_Completed(_NightFlag);
DB_CampNight_CompletedQueuedCFM(_CampfireMoment);
PROC_CampfireMoment_CheckEndCFM();

PROC
PROC_CampfireMoment_CheckEndCFM()
AND
NOT QRY_CampfireMoment_AnyCFMLeft()
THEN
PROC_CampNight_EndCFM();

QRY
QRY_CampfireMoment_AnyCFMLeft()
AND
QRY_OnlyOnce_Reset("CFM_StartFollowUp")
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_CFM(_NightFlag,_CampfireMoment)
AND
NOT DB_CampNight_CompletedQueuedCFM(_CampfireMoment)
AND
QRY_OnlyOnce("CFM_StartFollowUp")
THEN
PROC_CampNight_StartSelected_CFM();

PROC
PROC_CampNight_EndCFM()
AND
NOT DB_CampNight_PreventAutomaticContinue(1)
THEN
PROC_CampNight_StartSelected_IVB();

PROC
PROC_CampNight_EndCFM()
THEN
NOT DB_CampNight_PreventAutomaticContinue(1);

PROC
PROC_CampNight_StartSelected()
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingCampfireMoment")
THEN
PROC_CampNight_StartSelected_IVB();
//END_REGION

//REGION CampNight - Evening - Execution 3: Try IVB (Interactive Voicebark: Choice of dialog depends on partysetup)
IF
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_IVB(_NightFlag,_IVB,_PartyMemberHint)
THEN
DB_Camp_QueuedIVB(_IVB,_PartyMemberHint);

PROC
PROC_CampNight_StartSelected_IVB()
AND
QRY_OnlyOnce_Reset("GLO_CampNight_ExecutingInteractiveVoicebark")
AND
DB_Camp_QueuedIVB(_IVB,_PartyMemberHint)
AND
QRY_CampNight_IVB_GetBestPartyMember(_PartyMemberHint)
AND
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_PartyMember)
AND
QRY_OnlyOnce("GLO_CampNight_ExecutingInteractiveVoicebark")
THEN
StartInteractiveVoicebark(_IVB,_PartyMember);

QRY
QRY_CampNight_IVB_GetBestPartyMember((CHARACTER)_PartyMemberHint)
AND
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_PartyMember)
THEN
NOT DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_PartyMember);

//Hint is partymember
QRY
QRY_CampNight_IVB_GetBestPartyMember((CHARACTER)_PartyMemberHint)
AND
DB_PartyMembers(_PartyMemberHint)
THEN
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_PartyMemberHint);

//Hint is unassigned companion
QRY
QRY_CampNight_IVB_GetBestPartyMember((CHARACTER)_PartyMemberHint)
AND
NOT DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_)
AND
DB_Origins(_PartyMemberHint)
AND
QRY_GetBestAvatarForCompanion(_PartyMemberHint,1,1)
AND
DB_QRYRTN_GetBestAvatarForCompanion(_PartyMemberHint,_Avatar)
THEN
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_Avatar);

QRY
QRY_CampNight_IVB_GetBestPartyMember((CHARACTER)_PartyMemberHint)
AND
NOT DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_)
AND
QRY_Camp_GetPreferredPlayerForDialogs()
AND
DB_QRYRTN_Camp_GetPreferredPlayerForDialogs(_Player)
THEN
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_Player);

IF
VoiceBarkStarted(_IVB,_ID)
AND
DB_Camp_QueuedIVB(_IVB,_PartyMemberHint)
AND
DB_CampNight_IVB(_NightFlag,_IVB,_PartyMemberHint)
THEN
NOT DB_Camp_QueuedIVB(_IVB,_PartyMemberHint);
DB_CampNight_Completed(_NightFlag);
DB_CampNight_IVB_AddRemainingPartyMembers(_ID);
PROC_Camp_ForceAvatarControl();

IF
VoiceBarkEnded(_IVB,_ID)
AND
DB_CampNight_IVB(_NightFlag,_IVB,_PartyMemberHint)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
PROC_CampNight_StartSelected_IVB(); //keep queueing IVBs if possible

IF
VoiceBarkEnded(_IVB,_ID)
AND
DB_CampNight_IVB_AddRemainingPartyMembers(_ID)
THEN
NOT DB_CampNight_IVB_AddRemainingPartyMembers(_ID);

IF
DialogStarted(_,_ID)
AND
DB_CampNight_IVB_AddRemainingPartyMembers(_ID)
AND
DB_PlayerInCamp(_Player)
AND
NOT DB_DialogPlayers(_,_Player,_)
THEN
PROC_DialogAddListeningActor(_ID,_Player);

IF
VoiceBarkFailed(_IVB)
AND
DB_Camp_QueuedIVB(_IVB,_PartyMemberHint)
THEN
NOT DB_Camp_QueuedIVB(_IVB,_PartyMemberHint);
NOT DB_OnlyOnce("GLO_CampNight_ExecutingInteractiveVoicebark");
PROC_CampNight_StartSelected_IVB(); //keep queueing IVBs if possible

//Start CRDs if no (more) IVBs are queued
PROC
PROC_CampNight_StartSelected_IVB()
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingInteractiveVoicebark")
THEN
PROC_CampNight_StartSelected_CRDs();
PROC_CampNight_TestNoEveningDialogs();

//END_REGION

//REGION CampNight - Evening - Execution 4: Try CRDs (Camp Relationship Dialog: One camper, one avatar)
PROC
PROC_CampNight_StartSelected_CRDs()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
QRY_CountHelperReset("CampNight_CRDIndex")
AND
DB_CampNight_CRD(_NightFlag,_Camper,_CRD,_RelationshipFlag)
AND
_Camper != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_CampNight_CRD_ResetCounterIfNecessary(_NightFlag)
AND
DB_InCamp(_Camper)
AND
NOT DB_CantTalk(_Camper)
AND
NOT DB_Avatars(_Camper)
AND
QRY_CampNight_CRD_PartnerDateExclusive(_NightFlag,_Camper)
AND
DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(_PartnerDateExclusive)
AND
QRY_CampNight_CRD_MinimalApproval(_NightFlag,_Camper)
AND
DB_QRYRTN_CampNight_CRD_MinimalApproval(_MinApproval)
AND
QRY_CountHelper("CampNight_CRDIndex")
AND
DB_CountHelper("CampNight_CRDIndex",_Index)
THEN
DB_CampNight_CRDSet(1);
PROC_CampRelationshipDialog(_Camper,_CRD, _RelationshipFlag,_PartnerDateExclusive, _MinApproval);
PROC_Try_CampRelationshipDialog(_Camper,_Index); //Only the first camper per camp night gets an exclamation mark
DB_CampNight_Completed(_NightFlag); //CRDs are optional. Just showing the flag is enough. If the players choose to ignore it, they'll get a message before sleeping. If they still continue, we assume they are not interested.

QRY
QRY_CampNight_CRD_ResetCounterIfNecessary((FLAG)_NightFlag)
AND
DB_CampNight_EveryCRDGetsExclamationMark(_NightFlag)
AND
QRY_CountHelperReset("CampNight_CRDIndex")
THEN
DB_NOOP(1);

QRY
QRY_CampNight_CRD_ResetCounterIfNecessary((FLAG)_NightFlag)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_CRD_PartnerDateExclusive((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
DB_CampNight_Requirement_Partner(_NightFlag, _Camper)
THEN
NOT DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(0);
DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(1);

QRY
QRY_CampNight_CRD_PartnerDateExclusive((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
DB_CampNight_Requirement_Dating(_NightFlag, _Camper)
THEN
NOT DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(0);
DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(1);

QRY
QRY_CampNight_CRD_PartnerDateExclusive((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
NOT DB_CampNight_Requirement_Partner(_NightFlag, _Camper)
AND
NOT DB_CampNight_Requirement_Dating(_NightFlag, _Camper)
THEN
DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(0);
NOT DB_QRYRTN_CampNight_CRD_PartnerDateExclusive(1);

QRY
QRY_CampNight_CRD_MinimalApproval((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
DB_QRYRTN_CampNight_CRD_MinimalApproval(_MinApp)
THEN
NOT DB_QRYRTN_CampNight_CRD_MinimalApproval(_MinApp);

QRY
QRY_CampNight_CRD_MinimalApproval((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
NOT DB_CampNight_Requirement_Approval(_NightFlag, _Camper, _)
THEN
DB_QRYRTN_CampNight_CRD_MinimalApproval(-100);

QRY
QRY_CampNight_CRD_MinimalApproval((FLAG)_NightFlag,(CHARACTER)_Camper)
AND
DB_CampNight_Requirement_Approval(_NightFlag, _Camper, _MinApp)
THEN
DB_QRYRTN_CampNight_CRD_MinimalApproval(_MinApp);

PROC
PROC_CampNight_StartSelected_CRDs()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,_NarratorFallbackCRD,_)
AND
NOT DB_CampNight_CRDSet(1)
AND
QRY_Camp_GetPreferredPlayerForDialogs()
AND
DB_QRYRTN_Camp_GetPreferredPlayerForDialogs(_Player)
AND
QRY_StartDialog_Fixed(_NarratorFallbackCRD,_Player)
THEN
DB_NOOP(1);

PROC
PROC_StartDialog_AddExtraSpeakers((DIALOGRESOURCE)_NarratorFallbackCRD,(INTEGER)_ID)
AND
DB_CampNight_CRD(_NightFlag,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,_NarratorFallbackCRD,_)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_PlayerInCamp(_Player)
THEN
PROC_DialogAddListeningActor(_ID,_Player);

PROC
PROC_CampNight_StartSelected_CRDs()
THEN
NOT DB_CampNight_CRDSet(1);

//If you start a CRD with a secondary camper, hide the relationship marker for the primary camper.
IF
DialogStarted(_CRD,_)
AND
DB_CampNight_CRD(_NightFlag,_,_CRD,_)
AND
NOT DB_CampNight_EveryCRDGetsExclamationMark(_NightFlag)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,_Camper1,_,_)
AND
DB_InCamp(_Camper1)
THEN
PROC_ExclamationMark_Hide(_Camper1);

IF
DialogEnded(_CRD,_)
AND
DB_CampNight_CRD(_NightFlag,_Camper,_CRD,_RelationshipFlag)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
DB_CampNight_Completed(_NightFlag);
//END_REGION

//REGION CampNight - Evening - If Sleep & Morning Moments are defined, prep it. SoloDreams -> AvatarDreams -> SleepCutsceneOverride -> MorningIVB
PROC
PROC_CampNight_StartSelected()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
QRY_CampNight_QueueSleepMoment(_NightFlag)
THEN
DB_NOOP(1);

IF
DialogEnded(_Dialog, _ID)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_SCO(_NightFlag, _Dialog)
THEN
DB_CampNight_Completed(_NightFlag);

IF
DialogEnded(_Dialog, _ID)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_AvatarDream(_NightFlag, _Dialog)
THEN
DB_CampNight_Completed(_NightFlag);

IF
DialogEnded(_Dialog, _ID)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_SoloDream(_NightFlag, _, _Dialog)
THEN
DB_CampNight_Completed(_NightFlag);

IF
DialogEnded(_Dialog, _ID)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight(_NightFlag, _, _Dialog, _)
THEN
DB_CampNight_Completed(_NightFlag);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_AvatarDream((FLAG)_NightFlag,(DIALOGRESOURCE)_AvatarDream)
AND
QRY_Camp_AnyAvatarInCamp()
THEN
DB_Camp_QueuedAvatarDream(_AvatarDream);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_SCO((FLAG)_NightFlag,(DIALOGRESOURCE)_SleepCutsceneOverride)
THEN
DB_Camp_QueuedSCO(_SleepCutsceneOverride);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_SoloDream((FLAG)_NightFlag,(CHARACTER)_Character,(DIALOGRESOURCE)_SoloDream)
AND
DB_Avatars(_Character)
AND
DB_InCamp(_Character)
THEN
DB_Camp_QueuedSoloDream(_Character,_SoloDream);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight((FLAG)_NightFlag,(CHARACTER)_Companion,(DIALOGRESOURCE)_RomanceNight,(FLAG)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_ORI_Partnered(_Avatar,_Companion)
AND
DB_InCamp(_Avatar)
AND
DB_InCamp(_Companion)
AND
NOT QRY_PreventMPDialogue(_Companion, _Avatar)
THEN
DB_Camp_QueuedRomanceNight(_Companion,_RomanceNight,_Avatar);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight((FLAG)_NightFlag,(CHARACTER)_Companion,(DIALOGRESOURCE)_RomanceNight,(FLAG)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_ORI_Dating(_Avatar,_Companion)
AND
DB_InCamp(_Avatar)
AND
DB_InCamp(_Companion)
AND
NOT QRY_PartneredWithOther(_Avatar, _Companion)
AND
NOT QRY_PreventMPDialogue(_Companion, _Avatar)
THEN
DB_Camp_QueuedRomanceNight(_Companion,_RomanceNight,_Avatar);

QRY
QRY_PartneredWithOther((CHARACTER)_Avatar, (CHARACTER)_Companion)
AND
DB_ORI_Partnered(_Avatar, _OtherCompanion)
AND
_OtherCompanion != _Companion
THEN
DB_NOOP(1);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight((FLAG)_NightFlag,(CHARACTER)_Companion,(DIALOGRESOURCE)_RomanceNight,(FLAG)_RomanceCondition)
AND
_RomanceCondition != NULL_00000000-0000-0000-0000-000000000000
AND
NOT DB_Camp_QueuedRomanceNight(_Companion,_,_)
AND
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
DB_InCamp(_Companion)
AND
GetFlag(_RomanceCondition,_Avatar,1)
AND
NOT QRY_PreventMPDialogue(_Companion, _Avatar)
THEN
DB_Camp_QueuedRomanceNight(_Companion,_RomanceNight,_Avatar);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_MorningIVB(_NightFlag,_MorningIVB,_PartymemberHint)
THEN
DB_Camp_StayInCampAfterLongRest(1);
DB_Camp_QueuedMorningIVB(_MorningIVB,_PartymemberHint);

QRY
QRY_CampNight_QueueSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_MorningCFM(_NightFlag,_MorningCFM)
THEN
DB_Camp_StayInCampAfterLongRest(1);
DB_Camp_QueuedMorningCFM(_MorningCFM);

//END_REGION

//REGION CampNight - Evening - Exception: No dialogs found!

PROC
PROC_CampNight_StartSelected()
THEN
PROC_CampNight_TestNoEveningDialogs();

PROC
PROC_CampNight_TestNoEveningDialogs()
AND
NOT DB_FallbackCamp_InCamp(_)
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingCampfireMoment")
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingInteractiveVoicebark")
AND
NOT DB_HandlingRelationshipDialog(_,_,_,"CAMP",_, _)
THEN
PROC_Camp_NoEveningDialogs();

PROC
PROC_CampNight_TestNoEveningDialogs()
AND
DB_FallbackCamp_InCamp(_)
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingCampfireMoment")
AND
NOT DB_OnlyOnce("GLO_CampNight_ExecutingInteractiveVoicebark")
AND
NOT DB_Camp_QueuedNight(_)
AND
NOT DB_Camp_RequiredTalks(_,_) //also includes forced CRDs
THEN
PROC_Camp_NoEveningDialogs();

//END_REGION

//REGION CampNight - Evening - Complete all campnights, set all flags and try if a new Sleep/Morning camp moments are available.
//If completed, -> Set its flag.
//If not completed -> Do nothing, it'll get picked again next time.
PROC
PROC_Camp_EndEvening()
AND
NOT DB_Camp_ForceNextLongRest(1) //Is set if we woke up at night and are going to bed for the second time -> Don't queue new nights
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_Completed(_NightFlag)
AND
NOT DB_CampNight_ExclusiveMoment(_NightFlag)
AND
QRY_CampNight_QueueSleepMoment(_NightFlag) //Once before looking for new camp nights (Some sleep moments have conditions that are only met during evening free roam e.g. a Romance Night that requires a flag set in a CRD)
THEN
PROC_GlobalSetFlagAndCache(_NightFlag);

PROC
PROC_Camp_EndEvening()
AND
NOT DB_CampNight_DEBUG_Disabled(1)
AND
NOT DB_Camp_ForceNextLongRest(1) //Is set if we woke up at night and are going to bed for the second time -> Don't queue new nights
AND
NOT DB_Camp_QueuedSoloDream(_,_)
AND
NOT DB_Camp_QueuedRomanceNight(_,_,_)
AND
NOT DB_Camp_QueuedAvatarDream(_)
AND
NOT DB_Camp_QueuedSCO(_)
AND
NOT DB_Camp_QueuedMorningIVB(_,_)
AND
NOT DB_Camp_QueuedMorningCFM(_)
THEN
DB_CampNight_OnlyAllowSleepOrMorningMoments(1);
PROC_CampNight_CacheSleepSpeakers();
PROC_CampNight_DecideCampNight_Recursive();
NOT DB_CampNight_OnlyAllowSleepOrMorningMoments(1);

PROC
PROC_Camp_EndEvening()
AND
NOT DB_Camp_ForceNextLongRest(1) //Is set if we woke up at night and are going to bed for the second time -> Don't queue new nights
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
QRY_CampNight_QueueSleepMoment(_NightFlag)  //Once after looking for new camp nights: New queuednights may have been added.
THEN
DB_NOOP(1);

IF
DialogEnded(_Dialog, _ID)
AND
DB_Camp_QueuedMorningCFM(_Dialog)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
DB_CampNight_Completed(_NightFlag);

IF
VoiceBarkStarted(_Voicebark, _ID)
AND
DB_Camp_QueuedMorningIVB(_Voicebark,_)
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
THEN
DB_CampNight_Completed(_NightFlag);
//END_REGION

//REGION CampNight - Sleep - Moments (Avatar Dream, Solo Dream, Romance Moment & SleepCutsceneOverride)
PROC
PROC_CampNight_StartSleepMoments_PreHook()
AND
DB_FallbackCamp_InCamp(_)
THEN
PROC_FallbackCamp_EnsureResurrections();

QRY
QRY_Inclusion_BlockCompanionInclusion(_Companion,_Dialog)
AND
DB_Camp_QueuedSoloDream((CHARACTER)_Companion,_)
THEN
DB_NOOP(1);

QRY
QRY_Inclusion_BlockCompanionInclusion(_Companion,_Dialog)
AND
DB_Camp_QueuedRomanceNight((CHARACTER)_Companion,_,_)
THEN
DB_NOOP(1);

PROC
PROC_CampNight_StartSleepMoments()
THEN
DB_CampNight_StartSleepMoments_EmptyLoopFlag(1); //If this does not get cleared before the end, we have an empty loop

IF
DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag)
THEN
NOT DB_CampNight_StartSleepMoments_EmptyLoopFlag(1);

PROC
PROC_CampNight_StartSleepMoments()
AND
DB_Camp_QueuedNight(_NightFlag)
AND
NOT DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag)
THEN
PROC_CampNight_TryStartSleepMoment(_NightFlag);

//Play Queued Avatar Dream Moments
PROC
PROC_CampNight_TryStartSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_AvatarDream(_NightFlag,_AvatarDreamDialog)
AND
DB_Camp_QueuedAvatarDream(_AvatarDreamDialog)
AND
NOT QRY_CampNight_SpeakersUnavailable_AvatarDream()
AND
DB_Avatars(_Avatar)
AND
DB_InCamp(_Avatar)
AND
QRY_CampNight_TryStartSleepMoment_AvatarDream(_AvatarDreamDialog,_Avatar)
THEN
DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag);

QRY
QRY_CampNight_TryStartSleepMoment_AvatarDream((DIALOGRESOURCE)_AvatarDreamDialog,(CHARACTER)_Avatar)
AND
QRY_Camp_StartAvatarDream_CustomDialogStart(_AvatarDreamDialog,_Avatar)
THEN
DB_CampNight_TryStartSleepMoment_StartedCustomAvatarDream(1);

QRY
QRY_CampNight_TryStartSleepMoment_AvatarDream((DIALOGRESOURCE)_AvatarDreamDialog,(CHARACTER)_Avatar)
AND
NOT DB_CampNight_TryStartSleepMoment_StartedCustomAvatarDream(1)
AND
QRY_StartDialog_Fixed(_AvatarDreamDialog,_Avatar)
THEN
MakePlayerActive(_Avatar);

QRY
QRY_CampNight_TryStartSleepMoment_AvatarDream((DIALOGRESOURCE)_AvatarDreamDialog,(CHARACTER)_Avatar)
AND
DB_CampNight_TryStartSleepMoment_StartedCustomAvatarDream(1)
THEN
NOT DB_CampNight_TryStartSleepMoment_StartedCustomAvatarDream(1);

QRY
QRY_CampNight_SpeakersUnavailable_AvatarDream()
AND
DB_Avatars(_Avatar)
AND
IsSpeakerReserved(_Avatar,1)
THEN
DB_NOOP(1);

//Play Queued Solo Dream Moments
PROC
PROC_CampNight_TryStartSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_SoloDream(_NightFlag,_,_SoloDreamDialog)
AND
DB_Camp_QueuedSoloDream(_Character,_SoloDreamDialog)
AND
DB_Avatars(_Character)
AND
IsSpeakerReserved(_Character,0)
AND
QRY_CampNight_TryStartSleepMoment_SoloDream(_SoloDreamDialog,_Character)
THEN
DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag);

QRY
QRY_CampNight_TryStartSleepMoment_SoloDream((DIALOGRESOURCE)_SoloDreamDialog,(CHARACTER)_Character)
AND
QRY_Camp_StartSoloDream_CustomDialogStart(_SoloDreamDialog,_Character)
THEN
DB_CampNight_TryStartSleepMoment_StartedCustomSoloDream(1);

QRY
QRY_CampNight_TryStartSleepMoment_SoloDream((DIALOGRESOURCE)_SoloDreamDialog,(CHARACTER)_Character)
AND
NOT DB_CampNight_TryStartSleepMoment_StartedCustomSoloDream(1)
AND
QRY_StartDialog_Fixed(_SoloDreamDialog,_Character)
THEN
MakePlayerActive(_Character);

QRY
QRY_CampNight_TryStartSleepMoment_SoloDream((DIALOGRESOURCE)_SoloDreamDialog,(CHARACTER)_Character)
AND
DB_CampNight_TryStartSleepMoment_StartedCustomSoloDream(1)
THEN
NOT DB_CampNight_TryStartSleepMoment_StartedCustomSoloDream(1);

//Play Queued Romance Night Moments
PROC
PROC_CampNight_TryStartSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight(_NightFlag,_,_RomanceNightDialog,_)
AND
DB_Camp_QueuedRomanceNight(_Character,_RomanceNightDialog,_Avatar)
AND
IsSpeakerReserved(_Character,0)
AND
IsSpeakerReserved(_Avatar,0)
AND
DB_Players(_Avatar)
AND
QRY_CampNight_TryStartSleepMoment_RomanceNight(_RomanceNightDialog,_Character,_Avatar)
THEN
DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag);

QRY
QRY_CampNight_TryStartSleepMoment_RomanceNight((DIALOGRESOURCE)_RomanceNightDialog,(CHARACTER)_Character,(CHARACTER)_Avatar)
AND
QRY_Camp_StartRomanceNight_CustomDialogStart(_RomanceNightDialog,_Character,_Avatar)
THEN
DB_CampNight_TryStartSleepMoment_StartedCustomRomanceNight(1);

QRY
QRY_CampNight_TryStartSleepMoment_RomanceNight((DIALOGRESOURCE)_RomanceNightDialog,(CHARACTER)_Character,(CHARACTER)_Avatar)
AND
NOT DB_CampNight_TryStartSleepMoment_StartedCustomRomanceNight(1)
AND
NOT QRY_PreventMPDialogue(_Character, _Avatar)
AND
QRY_StartDialog_Fixed(_RomanceNightDialog,_Character,_Avatar)
THEN
MakePlayerActive(_Avatar);

QRY
QRY_CampNight_TryStartSleepMoment_RomanceNight((DIALOGRESOURCE)_RomanceNightDialog,(CHARACTER)_Character,(CHARACTER)_Avatar)
AND
DB_CampNight_TryStartSleepMoment_StartedCustomRomanceNight(1)
THEN
NOT DB_CampNight_TryStartSleepMoment_StartedCustomRomanceNight(1);

//Play Queued Sleep Cutscene Override
PROC
PROC_CampNight_TryStartSleepMoment((FLAG)_NightFlag)
AND
DB_CampNight_SCO(_NightFlag,_SleepCutsceneOverride)
AND
DB_Camp_QueuedSCO(_SleepCutsceneOverride)
AND
NOT QRY_CampNight_SpeakersUnavailable_SCO()
AND
QRY_Camp_GetPreferredPlayerForDialogs()
AND
DB_QRYRTN_Camp_GetPreferredPlayerForDialogs(_Player)
AND
QRY_CAMP_GetPlayerInCamp(_Player,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_QRYRTN_CAMP_GetPlayerInCamp((CHARACTER)_Player2)
AND
QRY_CAMP_GetPlayerInCamp(_Player,_Player2,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000)
AND
DB_QRYRTN_CAMP_GetPlayerInCamp((CHARACTER)_Player3)
AND
QRY_CAMP_GetPlayerInCamp(_Player,_Player2,_Player3)
AND
DB_QRYRTN_CAMP_GetPlayerInCamp((CHARACTER)_Player4)
AND
QRY_CampNight_TryStartSleepMoment_SCO(_SleepCutsceneOverride,_Player,_Player2,_Player3,_Player4)
THEN
DB_CampNight_StartSleepMoments_AwaitCompletion(_NightFlag);

QRY
QRY_CampNight_TryStartSleepMoment_SCO((DIALOGRESOURCE)_SleepCutsceneOverride,(CHARACTER)_Player,(CHARACTER)_Player2,(CHARACTER)_Player3,(CHARACTER)_Player4)
AND
QRY_Camp_SleepCutsceneOverride_CustomDialogStart(_SleepCutsceneOverride,_Player,_Player2,_Player3,_Player4)
THEN
DB_CampNight_TryStartSleepMoment_StartedCustomSCO(1);

QRY
QRY_CampNight_TryStartSleepMoment_SCO((DIALOGRESOURCE)_SleepCutsceneOverride,(CHARACTER)_Player,(CHARACTER)_Player2,(CHARACTER)_Player3,(CHARACTER)_Player4)
AND
NOT DB_CampNight_TryStartSleepMoment_StartedCustomSCO(1)
AND
QRY_StartDialog_Fixed(_SleepCutsceneOverride,_Player,_Player2,_Player3,_Player4)
THEN
DB_NOOP(1);

QRY
QRY_CampNight_TryStartSleepMoment_SCO((DIALOGRESOURCE)_SleepCutsceneOverride,(CHARACTER)_Player,(CHARACTER)_Player2,(CHARACTER)_Player3,(CHARACTER)_Player4)
AND
DB_CampNight_TryStartSleepMoment_StartedCustomSCO(1)
THEN
NOT DB_CampNight_TryStartSleepMoment_StartedCustomSCO(1);

QRY
QRY_CampNight_SpeakersUnavailable_SCO()
AND
DB_Players(_Player)
AND
IsSpeakerReserved(_Player,1)
THEN
DB_NOOP(1);

//Cleanup
IF
DialogStarted(_SleepCutsceneOverride,_)
AND
DB_Camp_QueuedSCO(_SleepCutsceneOverride)
AND
DB_CampNight_SCO(_NightFlag,_SleepCutsceneOverride)
THEN
NOT DB_Camp_QueuedSCO(_SleepCutsceneOverride);

IF
DialogStarted(_AvatarDream,_)
AND
DB_Camp_QueuedAvatarDream(_AvatarDream)
AND
DB_CampNight_AvatarDream(_NightFlag,_AvatarDream)
THEN
NOT DB_Camp_QueuedAvatarDream(_AvatarDream);

IF
DialogStarted(_SoloDream,_)
AND
DB_Camp_QueuedSoloDream(_Character,_SoloDream)
AND
DB_CampNight_SoloDream(_NightFlag,_,_SoloDream)
THEN
NOT DB_Camp_QueuedSoloDream(_Character,_SoloDream);

IF
DialogStarted(_RomanceNight,_)
AND
DB_Camp_QueuedRomanceNight(_Character,_RomanceNight,_Avatar)
AND
DB_CampNight_RomanceNight(_NightFlag,_,_RomanceNight,_)
THEN
NOT DB_Camp_QueuedRomanceNight(_Character,_RomanceNight,_Avatar);

//All custom scenes are started! Now we wait for them all to end.

//Potentially some players are in sleep scenes. We await until they have all left.
PROC
PROC_CampNight_StartSleepMoments()
THEN
DB_Camp_WaitingforSleepMomentsDone(1);

//1. Any player who's not currently in a dialogue, -> Set to DB_Camp_ReadyForSleepCutscene
PROC
PROC_CampNight_StartSleepMoments()
AND
DB_Players(_Player)
AND
NOT DB_Camp_SleepMomentsDone(_Player)
AND
IsSpeakerReserved(_Player,0)
THEN
DB_Camp_SleepMomentsDone(_Player);

//In case no dialogue started -> Check if all players already done.
PROC
PROC_CampNight_StartSleepMoments()
THEN
PROC_Camp_CheckSleepMomentsLoopDone();

//2. Failed Inclusion
IF
DialogActorJoinFailed(_,_,_Player)
AND
DB_PlayerInCamp((CHARACTER)_Player)
AND
DB_Camp_WaitingforSleepMomentsDone(1)
THEN
DB_Camp_SleepMomentsDone(_Player);
PROC_Camp_CheckSleepMomentsLoopDone();

//3. DialogEnded properly
IF
DialogEnded(_DialogName,_ID)
AND
DB_DialogPlayers(_ID,_Player,_)
AND
DB_PlayerInCamp((CHARACTER)_Player)
AND
DB_Camp_WaitingforSleepMomentsDone(1)
AND
NOT QRY_CampNight_PreventEndNightForPlayer(_DialogName,_ID,_Player)
AND
IsSpeakerReserved(_Player,0)
THEN
DB_Camp_SleepMomentsDone(_Player);
PROC_Camp_CheckSleepMomentsLoopDone();

//4. Inclusion ended
PROC
PROC_Inclusion_RemoveOrigin(_Player)
AND
DB_PlayerInCamp((CHARACTER)_Player)
AND
DB_Camp_WaitingforSleepMomentsDone(1)
AND
IsSpeakerReserved(_Player,0)
THEN
DB_Camp_SleepMomentsDone(_Player);
PROC_Camp_CheckSleepMomentsLoopDone();

//If a sleepdialogended but not all dialogues are done -> Fade in everyone who's done
IF
DialogEnded(_DialogName,_ID)
AND
DB_Camp_WaitingforSleepMomentsDone(1)
AND
DB_Camp_SleepMomentsDone(_Player)
THEN
PROC_UserSwapToActiveDialog(_Player);

PROC
PROC_UserSwapToActiveDialog((CHARACTER)_Player)
AND
QRY_OnlyOnce_Reset("UserSwapToActiveDialog_Once")
AND
IsControlled(_Player,1)
AND
IsSpeakerReserved(_Player,0)
AND
GetReservedUserID(_Player,_SameUserID)
AND
DB_Players(_OtherPlayer)
AND
_Player != _OtherPlayer
AND
GetReservedUserID(_OtherPlayer,_SameUserID)
AND
IsSpeakerReserved(_OtherPlayer,1)
AND
QRY_OnlyOnce("UserSwapToActiveDialog_Once")
THEN
MakePlayerActive(_OtherPlayer);

//Exceptional case when a player leaves during a sleep moment
PROC
PROC_GLO_PartyMembers_MakeNPCHook(_Player)
AND
DB_Camp_SleepMomentsDone(_Player)
THEN
NOT DB_Camp_SleepMomentsDone(_Player);

QRY
QRY_CampNight_PreventEndNightForPlayer((DIALOGRESOURCE)_DialogName,(INTEGER)_ID,(CHARACTER)_Player)
AND
1 == 2
THEN
DB_NOOP(1);

//Wait for all players to be ReadyForSleepCutscene
PROC
PROC_Camp_CheckSleepMomentsLoopDone()
AND
SysCount("DB_Camp_SleepMomentsDone",1,_Count)
AND
SysCount("DB_Players",1,_Count)
THEN
SysClear("DB_Camp_SleepMomentsDone",1);
NOT DB_Camp_WaitingforSleepMomentsDone(1);
PROC_Camp_SleepMomentsLoopDone();

//Breakout condition: Empty Loop. No dialog was queued.
PROC
PROC_Camp_SleepMomentsLoopDone()
AND
DB_CampNight_StartSleepMoments_EmptyLoopFlag(1)
THEN
PROC_Campnight_SleepMomentsDone();

//If we didn't break out: Next loop.
PROC
PROC_Camp_SleepMomentsLoopDone()
AND
NOT DB_CampNight_StartSleepMoments_EmptyLoopFlag(1)
THEN
PROC_CampNight_StartSleepMoments();

IF
FlagSet((FLAG)GLO_Camp_Event_SkipSleepCutscene_1ee0a25e-4115-44ef-b87d-c2a5eee494b6, (FLAG)NULL_00000000-0000-0000-0000-000000000000,_)
THEN
DB_CAMP_SkipSleepCutscene(1);
ClearFlag((FLAG)GLO_Camp_Event_SkipSleepCutscene_1ee0a25e-4115-44ef-b87d-c2a5eee494b6, (FLAG)NULL_00000000-0000-0000-0000-000000000000,0);

//END_REGION

//REGION CampNight - Morning - CFM

//Morning CFM
PROC
PROC_CampNight_StartMorningMoments()
AND
QRY_OnlyOnce_Reset("GLO_CampNight_MorningCFM")
AND
DB_Camp_QueuedMorningCFM(_CFM)
AND
QRY_OnlyOnce("GLO_CampNight_MorningCFM")
THEN
PROC_CampfireMoment_PreDialog(_CFM);
PROC_CampfireMoment_Dialog(_CFM);

PROC
PROC_CampNight_StartMorningMoments()
AND
NOT DB_OnlyOnce("GLO_CampNight_MorningCFM")
THEN
PROC_CampNight_EndMorningCFM();

PROC
PROC_CampfireMoment_PreDialog(_CFM)
AND
DB_Camp_QueuedMorningCFM(_CFM)
AND
NOT DB_Camp_StayInCampAfterMorningCFM(_CFM)
AND
NOT DB_Camp_QueuedMorningIVB(_,_)
THEN
DB_Camp_LeaveAfterCFM(_CFM);

IF
DialogEnded(_CFM,_)
AND
DB_Camp_QueuedMorningCFM(_CFM)
THEN
PROC_CampfireMoment_ClearCampfireMoment(_CFM);
PROC_CampfireMoment_PostDialog(_CFM);
NOT DB_Camp_QueuedMorningCFM(_CFM);
DB_CampNight_CompletedQueuedCFM(_CFM);
PROC_CampfireMoment_CheckEndMorningCFM();

PROC
PROC_CampfireMoment_CheckEndMorningCFM()
AND
NOT QRY_CampfireMoment_AnyMorningCFMLeft()
THEN
PROC_CampNight_EndMorningCFM();

QRY
QRY_CampfireMoment_AnyMorningCFMLeft()
AND
DB_Camp_QueuedMorningCFM(_)
THEN
DB_NOOP(1);

PROC
PROC_CampfireMoment_Failed((DIALOGRESOURCE)_CFM)
AND
DB_Camp_QueuedMorningCFM(_CFM)
THEN
PROC_CampNight_EndMorningCFM();

PROC
PROC_CampNight_EndMorningCFM()
AND
DB_Camp_LeaveAfterCFM(_CFM)
AND
DB_PlayerInCamp(_Player)
AND
NOT DB_CantMove(_Player)
THEN
PROC_Camp_Leave(_Player);

PROC
PROC_CampNight_EndMorningCFM()
AND
DB_Camp_QueuedMorningCFM(_CFM)
THEN
NOT DB_Camp_QueuedMorningCFM(_CFM);

PROC
PROC_CampNight_EndMorningCFM()
AND
NOT DB_Camp_LeaveAfterCFM(_) //if you're leaving after the CFM, there is no IVB to trigger.
THEN
PROC_CampNight_StartSelected_MorningIVB();

PROC
PROC_CampNight_EndMorningCFM()
AND
DB_Camp_LeaveAfterCFM(_CFM)
THEN
PROC_CampNight_LastDialogPlayed();
NOT DB_Camp_LeaveAfterCFM(_CFM);

//END_REGION

//REGION CampNight - Morning - IVB

PROC
PROC_CampNight_StartSelected_MorningIVB()
AND
QRY_OnlyOnce_Reset("GLO_CampNight_MorningIVB")
AND
DB_Camp_QueuedMorningIVB(_IVB,_PartyMemberHint)
AND
QRY_CampNight_IVB_GetBestPartyMember(_PartyMemberHint)
AND
DB_QRYRTN_CampNight_IVB_GetBestPartyMember(_PartyMember)
AND
QRY_OnlyOnce("GLO_CampNight_MorningIVB")
THEN
StartInteractiveVoicebark(_IVB,_PartyMember);
DB_Camp_LeaveAfterIVB(_IVB);

PROC
PROC_CampNight_StartSelected_MorningIVB()
AND
NOT DB_OnlyOnce("GLO_CampNight_MorningIVB")
THEN
PROC_CampNight_LastDialogPlayed();

IF
VoiceBarkStarted(_IVB,_ID)
AND
DB_Camp_QueuedMorningIVB(_IVB,_PartyMemberHint)
THEN
PROC_Camp_ForceAvatarControl();
NOT DB_Camp_QueuedMorningIVB(_IVB,_PartyMemberHint);
DB_CampNight_IVB_AddRemainingPartyMembers(_ID);

IF
VoiceBarkFailed(_IVB)
AND
DB_Camp_QueuedMorningIVB(_IVB,_PartyMemberHint)
THEN
NOT DB_Camp_QueuedMorningIVB(_IVB,_PartyMemberHint);

IF
VoiceBarkEnded(_IVB,_)
AND
NOT DB_FallbackCamp_InCamp(_)
AND
DB_Camp_LeaveAfterIVB(_IVB)
AND
DB_PlayerInCamp(_Player)
AND
NOT DB_CantMove(_Player)
THEN
PROC_Camp_Leave(_Player);

IF
VoiceBarkEnded(_IVB,_)
AND
DB_Camp_LeaveAfterIVB(_IVB)
THEN
NOT DB_Camp_LeaveAfterIVB(_IVB);

//Last morning IVB played
IF
VoiceBarkEnded(_IVB,_)
AND
DB_CampNight_MorningIVB(_,_IVB,_)
AND
NOT QRY_Camp_AnyMorningIVBLeft()
THEN
PROC_CampNight_LastDialogPlayed();

IF
VoiceBarkFailed(_IVB)
AND
DB_CampNight_MorningIVB(_,_IVB,_)
AND
NOT QRY_Camp_AnyMorningIVBLeft()
THEN
PROC_CampNight_LastDialogPlayed();

//Queue next MorningIVB
IF
VoiceBarkEnded(_IVB,_)
AND
DB_CampNight_MorningIVB(_,_IVB,_)
AND
QRY_Camp_AnyMorningIVBLeft()
THEN
PROC_CampNight_StartSelected_MorningIVB();

IF
VoiceBarkFailed(_IVB)
AND
DB_CampNight_MorningIVB(_,_IVB,_)
AND
QRY_Camp_AnyMorningIVBLeft()
THEN
PROC_CampNight_StartSelected_MorningIVB();

QRY
QRY_Camp_AnyMorningIVBLeft()
AND
DB_Camp_QueuedMorningIVB(_,_)
THEN
DB_NOOP(1);

//END_REGION

//REGION CampNight - Morning - End of Night
//Normal case: At least one dialogue played.
PROC
PROC_CampNight_LastDialogPlayed()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
DB_CampNight_Completed(_NightFlag)
THEN
NOT DB_Camp_QueuedNight(_NightFlag);
PROC_CampNight_ForceComplete(_NightFlag);

//Exception case: No dialogue was selected but handle gracefully (we consider this player choice to ignore)
PROC
PROC_CampNight_LastDialogPlayed()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
NOT DB_CampNight_Completed(_NightFlag)
AND
QRY_CampNight_CampnightFailedValidException(_NightFlag)
THEN
NOT DB_Camp_QueuedNight((FLAG)_NightFlag);
PROC_CampNight_ForceComplete(_NightFlag);

//Fail state: Throw assert and Force Complete (so it doesn't block all other nights perpetually)
PROC
PROC_CampNight_LastDialogPlayed()
AND
DB_Camp_QueuedNight((FLAG)_NightFlag)
AND
NOT DB_CampNight_Completed(_NightFlag)
AND
GetHostCharacter(_Player)
AND
GetFlagName(_NightFlag,_FlagName)
AND
Concatenate("Camp Error: A scheduled Camp Night (",_FlagName,_SubString)
AND
Concatenate(_SubString,") failed to play any dialogue. Contact @greever ASAP. (Osirislog + Savegame)",_Message)
THEN
NOT DB_Camp_QueuedNight((FLAG)_NightFlag);
DB_CampNight_Error_CampNightFailedToPlay(_NightFlag);
DebugBreak(_Message);
PROC_CampNight_ForceComplete(_NightFlag);

QRY
QRY_CampNight_CampnightFailedValidException((FLAG)_NightFlag)
AND
1 == 0
THEN
DB_NOOP(1);

PROC
PROC_CampNight_CancelOtherNights((FLAG)_NightFlag)
AND
DB_CampNight_Cancels(_NightFlag,(FLAG)_OtherFlag)
THEN
PROC_CampNight_ClearCampNight(_OtherFlag);

PROC
PROC_CampNight_ForceComplete((FLAG)_NightFlag)
THEN
PROC_GlobalSetFlagAndCache(_NightFlag);
PROC_CampNight_CancelOtherNights((FLAG)_NightFlag);
PROC_CampNight_ClearCampNight((FLAG)_NightFlag);

IF
DB_GlobalFlag(_CancellingFlag)
AND
DB_CampNight_CancelledBy(_CampFlag,_CancellingFlag)
AND
NOT DB_Camp_QueuedNight(_CampFlag) //Don't cancel a night that's already playing. This flag is likely set by the night itself.
THEN
PROC_CampNight_ClearCampNight(_CampFlag);
//END_REGION

//REGION CampNight - Cleanup
PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight(_NightFlag,_Priority)
THEN
NOT DB_CampNight(_NightFlag,_Priority);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight(_NightFlag,_CompanionPriority,_Companion)
THEN
NOT DB_CampNight(_NightFlag,_CompanionPriority,_Companion);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Camp(_NightFlag,_Camp)
THEN
NOT DB_CampNight_Camp(_NightFlag,_Camp);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_ExclusiveMoment(_NightFlag)
THEN
NOT DB_CampNight_ExclusiveMoment(_NightFlag);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_ExpiresAfter(_NightFlag,_Lifetime)
THEN
NOT DB_CampNight_ExpiresAfter(_NightFlag,_Lifetime);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_StartedExpiring(_NightFlag,_Lifetime)
THEN
NOT DB_CampNight_StartedExpiring(_NightFlag,_Lifetime);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,_Camper,_Dialog,_Flag)
THEN
NOT DB_CampNight_CRD(_NightFlag,_Camper,_Dialog,_Flag);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_CFM(_NightFlag,_CFM)
THEN
NOT DB_CampNight_CFM(_NightFlag,_CFM);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_IVB(_NightFlag,_IVB,_PartyMemberHint)
THEN
NOT DB_CampNight_IVB(_NightFlag,_IVB,_PartyMemberHint);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_MorningIVB(_NightFlag,_IVB,_PartyMemberHint)
THEN
NOT DB_CampNight_MorningIVB(_NightFlag,_IVB,_PartyMemberHint);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_MorningCFM(_NightFlag,_CFM)
THEN
NOT DB_CampNight_MorningCFM(_NightFlag,_CFM);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_SCO(_NightFlag,_SCO)
THEN
NOT DB_CampNight_SCO(_NightFlag,_SCO);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_AvatarDream(_NightFlag,_AvatarDream)
THEN
NOT DB_CampNight_AvatarDream(_NightFlag,_AvatarDream);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_SoloDream(_NightFlag,_Character,_SoloDream)
THEN
NOT DB_CampNight_SoloDream(_NightFlag,_Character,_SoloDream);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_RomanceNight(_NightFlag,_Character,_RomanceNight,_Flag)
THEN
NOT DB_CampNight_RomanceNight(_NightFlag,_Character,_RomanceNight,_Flag);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Cancels(_NightFlag,(FLAG)_Flag)
THEN
NOT DB_CampNight_Cancels(_NightFlag,(FLAG)_Flag);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_CancelledBy(_NightFlag,(FLAG)_Flag)
THEN
NOT DB_CampNight_CancelledBy(_NightFlag,(FLAG)_Flag);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_SetPosition(_NightFlag,(CHARACTER)_Character,(STRING)_Camp,(GUIDSTRING)_Position)
THEN
NOT DB_CampNight_SetPosition(_NightFlag,(CHARACTER)_Character,(STRING)_Camp,(GUIDSTRING)_Position);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6,(FLAG)_Flag7)
THEN
NOT DB_CampNight_Requirement(_NightFlag,(FLAG)_Flag1,(FLAG)_Flag2,(FLAG)_Flag3,(FLAG)_Flag4,(FLAG)_Flag5,(FLAG)_Flag6,(FLAG)_Flag7);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_Approval(_NightFlag,(CHARACTER)_Origin,(INTEGER)_Amount)
THEN
NOT DB_CampNight_Requirement_Approval(_NightFlag,_Origin,_Amount);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_Requirement_Partner(_NightFlag,(CHARACTER)_Partner)
THEN
NOT DB_CampNight_Requirement_Partner(_NightFlag,_Partner);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_ForceOnLevelSwap((FLAG)_NightFlag,(STRING)_ReadyCheckIdentifier,(INTEGER)_Priority,(INTEGER)_OverrideRequirements)
THEN
NOT DB_CampNight_ForceOnLevelSwap((FLAG)_NightFlag,(STRING)_ReadyCheckIdentifier,(INTEGER)_Priority,(INTEGER)_OverrideRequirements);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_ResurrectWhenForced((FLAG)_NightFlag,(CHARACTER)_Character)
THEN
NOT DB_CampNight_ResurrectWhenForced((FLAG)_NightFlag,(CHARACTER)_Character);

PROC
PROC_CampNight_ClearCampNight((FLAG)_NightFlag)
AND
DB_CampNight_StartSleepMoments_AwaitCompletion((FLAG)_NightFlag)
THEN
NOT DB_CampNight_StartSleepMoments_AwaitCompletion((FLAG)_NightFlag);
//END_REGION

//REGION CampNight - Helper Queries
QRY
QRY_CAMP_GetPlayerInCamp((CHARACTER)_Ignore1,(CHARACTER)_Ignore2,(CHARACTER)_Ignore3)
THEN
SysClear("DB_QRYRTN_CAMP_GetPlayerInCamp", 1);

QRY
QRY_CAMP_GetPlayerInCamp((CHARACTER)_Ignore1,(CHARACTER)_Ignore2,(CHARACTER)_Ignore3)
AND
DB_PlayerInCamp(_Player)
AND
NOT DB_QRYRTN_CAMP_GetPlayerInCamp(_)
AND
_Player != _Ignore1
AND
_Player != _Ignore2
AND
_Player != _Ignore3
AND
QRY_SpeakerIsAvailable(_Player,0,1)
THEN
DB_QRYRTN_CAMP_GetPlayerInCamp(_Player);

QRY
QRY_CAMP_GetPlayerInCamp((CHARACTER)_Ignore1,(CHARACTER)_Ignore2,(CHARACTER)_Ignore3)
AND
NOT DB_QRYRTN_CAMP_GetPlayerInCamp(_)
THEN
DB_QRYRTN_CAMP_GetPlayerInCamp(NULL_00000000-0000-0000-0000-000000000000);

QRY
QRY_Camp_SleepCutsceneOverride_CustomDialogStart((DIALOGRESOURCE)_SleepCutsceneOverride,(CHARACTER)_Player,(CHARACTER)_Player2,(CHARACTER)_Player3,(CHARACTER)_Player4)
AND
1 == 2
THEN
DB_NOOP(1);

QRY
QRY_Camp_StartAvatarDream_CustomDialogStart((DIALOGRESOURCE)_AvatarDream,(CHARACTER)_Player)
AND
1 == 2
THEN
DB_NOOP(1);

QRY
QRY_Camp_StartSoloDream_CustomDialogStart((DIALOGRESOURCE)_SoloDream,(CHARACTER)_Player)
AND
1 == 2
THEN
DB_NOOP(1);

QRY
QRY_Camp_StartRomanceNight_CustomDialogStart((DIALOGRESOURCE)_RomanceNight,(CHARACTER)_Player,(CHARACTER)_Avatar)
AND
1 == 2
THEN
DB_NOOP(1);

QRY
QRY_CamperInDialog()
AND
DB_PlayerInCamp(_Player)
AND
IsSpeakerReserved(_Player,1)
THEN
DB_NOOP(1);
//END_REGION

//REGION CampNight - Camp Flags

//EXAMPLE:
//
//LAEZELAVATAR: Laezel is in camp and is an avatar
//LAEZELCOMPANION: Laezel is in camp and is a companion
//LAEZELPARTY: Laezel is in the party & camp
//LAEZELCAMP: Laezel is in camp and not in the party
//LAEZEL: Laezel is in camp.
//

PROC
PROC_Camp_PlayerInCampChanged()
AND
SysCount("DB_PlayerInCamp",1,_PartySize)
THEN
PROC_Camp_SetCampNightFlags_PartySize(_PartySize);

PROC
PROC_Camp_SetCampNightFlags_PartySize((INTEGER)_PartySize)
AND
DB_CampNightFlags_PartySize(_MinimumPartySize,_Flag)
AND
_PartySize >= _MinimumPartySize
THEN
PROC_GlobalSetFlagAndCache(_Flag);

PROC
PROC_Camp_SetCampNightFlags_PartySize((INTEGER)_PartySize)
AND
DB_CampNightFlags_PartySize(_MinimumPartySize,_Flag)
AND
_PartySize < _MinimumPartySize
THEN
PROC_GlobalClearFlagAndCache(_Flag);

//REGION BASE Flag e.g. LAEZEL
IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_InCamp(_Camper)
AND
NOT DB_Defeated(_Camper)
AND
NOT DB_GlobalFlag(_BaseFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_BaseFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
DB_Defeated(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_BaseFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
NOT DB_InCamp(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_BaseFlag);
//END_REGION

//REGION AVATAR Flag e.g. LAEZELAVATAR
IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
DB_Avatars(_Camper)
AND
NOT DB_GlobalFlag(_AvatarFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_AvatarFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_AvatarFlag)
AND
NOT DB_GlobalFlag(_BaseFlag)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_AvatarFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_AvatarFlag)
AND
NOT DB_Avatars(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_AvatarFlag);
//END_REGION

//REGION COMPANION Flag e.g. LAEZELCOMPANION
IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
NOT DB_Avatars(_Camper)
AND
NOT DB_GlobalFlag(_CompanionFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_CompanionFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_CompanionFlag)
AND
NOT DB_GlobalFlag(_BaseFlag)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_CompanionFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_CompanionFlag)
AND
DB_Avatars(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_CompanionFlag);
//END_REGION

//REGION PARTY Flag e.g. LAEZELPARTY
IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
DB_Players(_Camper)
AND
NOT DB_GlobalFlag(_PartyFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_PartyFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_PartyFlag)
AND
NOT DB_GlobalFlag(_BaseFlag)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_PartyFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_PartyFlag)
AND
NOT DB_Players(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_PartyFlag);
//END_REGION

//REGION CAMP Flag e.g. LAEZELCAMP
IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_BaseFlag)
AND
NOT DB_Players(_Camper)
AND
NOT DB_GlobalFlag(_CampFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_CampFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_CampFlag)
AND
NOT DB_GlobalFlag(_BaseFlag)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_CampFlag);

IF
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
AND
DB_GlobalFlag(_CampFlag)
AND
DB_Players(_Camper)
THEN
PROC_GlobalClearFlagAndCache((FLAG)_CampFlag);
//END_REGION

//END_REGION

//REGION Fallback Camp

//REGION Fallback Camp - Enter fallback camp

IF
TextEvent("ignorefallbackcamp")
THEN
DB_FallbackCamp_DebugIgnore(1);

IF
TextEvent("unignorefallbackcamp")
THEN
NOT DB_FallbackCamp_DebugIgnore(1);

IF
TextEvent("ignorefallbackcamptransition")
AND
GetHostCharacter(_Player)
THEN
DB_FallbackCamp_DebugIgnoreTransition(1);
DebugText(_Player,"Enabled fallback level swap ignore");

IF
TextEvent("unignorefallbackcamptransition")
AND
GetHostCharacter(_Player)
THEN
NOT DB_FallbackCamp_DebugIgnoreTransition(1);
DebugText(_Player,"Disabled fallback level swap ignore");

IF
TextEvent("fallbackcamp")
AND
GetTextEventParamString(1,_ReadyCheckID)
AND
GetHostCharacter(_Player)
AND
DB_GLO_LevelSwap_Teleporter((ITEM)_Teleporter,_ReadyCheckID)
THEN
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID);

//Start via level swap teleporter
PROC
PROC_GLO_LevelSwap_BlockSwap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
AND
NOT DB_FallbackCamp_InCamp((STRING)_)
AND
NOT QRY_FallbackCamp_BlockShouldTrigger((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
THEN
DB_GLO_LevelSwap_Blocked(_CurrentLevel);
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID);

//Start via waypoint intercept
QRY
QRY_WaypointTravel_RegionSwapPrevented_AfterReadyCheck((CHARACTER)_Player,(STRING)_WaypointID)
AND
NOT DB_FallbackCamp_InCamp((STRING)_)
AND
DB_Players(_Player)
AND
QRY_FallbackCamp_WaypointToReadyCheckID(_WaypointID)
AND
DB_QRYRTN_WaypointToReadyCheckID((STRING)_WaypointID,(STRING)_ReadyCheckID)
THEN
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID);

QRY
QRY_FallbackCamp_WaypointToReadyCheckID((STRING)_WaypointID)
AND
DB_QRYRTN_WaypointToReadyCheckID((STRING)_WaypointID,(STRING)_ReadyCheckID)
THEN
NOT DB_QRYRTN_WaypointToReadyCheckID(_WaypointID,_ReadyCheckID);

QRY
QRY_FallbackCamp_WaypointToReadyCheckID((STRING)_WaypointID)
AND
DB_CurrentLevel(_CurrentLevel)
AND
QRY_OnlyOnce_Reset("FallbackCamp_WaypointReadyCheckID_Determined")
AND
DB_WaypointInfo(_,_WaypointID,_,_Trigger)
AND
GetRegion(_Trigger,_DestinationLevel)
AND
DB_GLO_LevelSwap_Location((STRING)_ReadyCheckID,(TRIGGER)_,(STRING)_,(STRING)_,(INTEGER)_,(STRING)_,_DestinationLevel)
AND
DB_GLO_LevelSwap_Teleporter(_Teleporter,_ReadyCheckID)
AND
GetRegion(_Teleporter,_CurrentLevel)
AND
QRY_OnlyOnce("FallbackCamp_WaypointReadyCheckID_Determined")
//TODO: doesn't matter right now, but we could prioritize the closest level swap teleporter
//if there are multiple teleporters going to and from the same levels
THEN
DB_QRYRTN_WaypointToReadyCheckID(_WaypointID,_ReadyCheckID);

//Start fallback camp
PROC
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID)
AND
DB_CurrentLevel(_CurrentLevel)
THEN
PROC_FallbackCamp_CheckSpecialConditions((STRING)_ReadyCheckID);
DB_FallbackCamp_QueuedLevelswap(_Player,_ReadyCheckID,_CurrentLevel);

PROC
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID)
AND
DB_FallbackCamp_TeleporterCampPairings(_ReadyCheckID,_Camp)
THEN
PROC_Camp_ForceEndTheDay(_Player,_Camp);

PROC
PROC_FallbackCamp_Start((CHARACTER)_Player,(STRING)_ReadyCheckID)
AND
NOT DB_FallbackCamp_TeleporterCampPairings(_ReadyCheckID,_)
THEN
PROC_Camp_ForceEndTheDay(_Player,"");

//Enter existing fallback camp (fallback for if anyone is somehow outside of camp)
PROC
PROC_GLO_LevelSwap_BlockSwap((CHARACTER)_Player, (STRING)_ReadyCheckID, (STRING)_CurrentLevel)
AND
NOT DB_FallbackCamp_DebugIgnore(1)
AND
DB_FallbackCamp_InCamp((STRING)_)
THEN
DB_GLO_LevelSwap_Blocked(_CurrentLevel);
PROC_DismissToCamp(_Player);

//You can use this PROC to define special conditions for the fallback camp that are not camp nights
//Currently the system requires you to either have queued camp nights or required talks for the fallback camp to start
//You can take a look at the fallback camp rule block for PROC_Camp_NoEveningDialogs should you need to modify this
//This PROC is expected to add a DB_Camp_RequiredTalks fact, camp nights should be queued using the fallback camp night systemics
PROC
PROC_FallbackCamp_CheckSpecialConditions((STRING)_ReadyCheckID)
THEN
DB_NOOP(1);

QRY
QRY_FallbackCamp_BlockShouldTrigger((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
AND
DB_FallbackCamp_DebugIgnore(1)
THEN
DB_NOOP(1);

//If override requirements is false, check whether default requirements are met
QRY
QRY_FallbackCamp_CampNightMeetsRequirements((FLAG)_CampNightFlag)
AND
DB_CampNight_ForceOnLevelSwap((FLAG)_CampNightFlag,(STRING)_,_,0)
AND
DB_CampNight(_CampNightFlag,_) //will give a false positive if camp night is undefined
AND
QRY_CampNight_MeetsRequirements(_CampNightFlag)
THEN
DB_NOOP(1);

PROC
PROC_Camp_SetModeToNight()
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_,(STRING)_ReadyCheckID,(STRING)_)
THEN
DB_FallbackCamp_InCamp(_ReadyCheckID);
PROC_FallbackCamp_EnteredCamp((STRING)_ReadyCheckID);

PROC
PROC_FallbackCamp_EnteredCamp((STRING)_ReadyCheckID)
THEN
DB_NOOP(1);

//Make forced CRDs required talks
PROC
PROC_CampRelationshipDialog((CHARACTER)_Character,(DIALOGRESOURCE)_Dialog,(FLAG)_,(INTEGER)_,(INTEGER)_)
AND
DB_FallbackCamp_InCamp(_)
AND
DB_Camp_QueuedNight(_NightFlag)
AND
DB_CampNight_CRD(_NightFlag,_,_Dialog,_) //only fallback night CRDs become required talks
AND
QRY_ValidForCRD(_Character)
THEN
DB_Camp_RequiredTalks((GUIDSTRING)_Character,(DIALOGRESOURCE)_Dialog);

QRY
QRY_RelationshipDialog_IgnoreApproval((CHARACTER)_Companion,(DIALOGRESOURCE)_Dialog)
AND
DB_Camp_RequiredTalks((GUIDSTRING)_Companion,(DIALOGRESOURCE)_Dialog)
THEN
DB_NOOP(1);

// Edge-case of companions leaving during the night
PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, _)
AND
DB_Camp_RequiredTalks(_Companion, _Dialog)
THEN
PROC_Camp_RequiredTalks_Complete(_Companion);

//END_REGION Forced Camp - Enter fallback camp

//REGION Fallback Camp - Camp Night Queue

PROC
PROC_FallbackCamp_EnsureResurrections()
AND
DB_CampNight_ResurrectWhenForced(_NightFlag,_Character)
AND
DB_Camp_QueuedNight(_NightFlag)
AND
DB_Dead(_Character)
THEN
Resurrect(_Character);
PROC_FallbackCamp_EnsureResurrectedInCamp(_Character);

PROC
PROC_FallbackCamp_EnsureResurrectedInCamp((CHARACTER)_Character)
AND
NOT DB_InCamp(_Character)
AND
DB_PartOfTheTeam(_Character)
THEN
SetEntityEvent((CHARACTER)_Character,"Origin_RestoreDialog",1);
//Teleports them to camp as if dismissed, but skips disappear out of sight

//END_REGION Forced Camp - Camp Night Queue

//REGION Fallback Camp - Leave fallback camp

//Left fallback camp
PROC
PROC_CAMP_LeftCamp(_)
AND
DB_FallbackCamp_InCamp((STRING)_ReadyCheckID)
AND
DB_Players(_Player)
AND
GetPosition(_Player, _X, _Y, _Z)
AND
DB_ActiveCamp(_Camp)
AND
DB_Camp(_Camp, _, _Trigger, _)
AND
PositionIsInTrigger(_X, _Y, _Z, _Trigger, 0)
AND
NOT DB_Camp_NightMode(1)//Trying to force quit the camp night during night mode will break the camp night flow one way or the other.
THEN
PROC_FallbackCamp_PlayerLeft();

PROC
PROC_FallbackCamp_PlayerLeft()
AND
DB_FallbackCamp_InCamp((STRING)_ReadyCheckID)
THEN
NOT DB_FallbackCamp_InCamp(_ReadyCheckID);
PROC_FallbackCamp_LeftCamp(_ReadyCheckID);

//Continue region swap teleport
PROC
PROC_FallbackCamp_PlayerLeft()
AND
NOT DB_FallbackCamp_DebugIgnoreTransition(1)
AND
NOT DB_WaypointTravel_RegionswapDestination(_,_)
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
THEN
PROC_GLO_LevelSwap_CheckSwap(_Player,_ReadyCheckID,_CurrentLevel);

//Continue waypoint travel
PROC
PROC_FallbackCamp_PlayerLeft()
AND
NOT DB_FallbackCamp_DebugIgnoreTransition(1)
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
AND
DB_WaypointTravel_RegionswapDestination(_Trigger,_WaypointID)
THEN
NOT DB_WaypointTravel_RegionswapDestination(_Trigger,_WaypointID);
PROC_TeleportPartiesTo(_Trigger,"");

PROC
PROC_FallbackCamp_PlayerLeft()
AND
DB_FallbackCamp_DebugIgnoreTransition(1)
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
THEN
DebugText(_Player,"Debug skipped level transition");

PROC
PROC_FallbackCamp_PlayerLeft()
AND
DB_FallbackCamp_DebugIgnoreTransition(1)
AND
DB_WaypointTravel_RegionswapDestination(_Trigger,_WaypointID)
THEN
NOT DB_WaypointTravel_RegionswapDestination(_Trigger,_WaypointID);

PROC
PROC_FallbackCamp_PlayerLeft()
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
THEN
NOT DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel);

IF
LevelUnloading(_)
AND
DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel)
THEN
NOT DB_FallbackCamp_QueuedLevelswap((CHARACTER)_Player,(STRING)_ReadyCheckID,(STRING)_CurrentLevel);

PROC
PROC_GLO_LevelSwap_CheckSwap((CHARACTER)_Player, (STRING)_ReadyCheckID, (STRING)_CurrentLevel)
THEN
DB_NOOP(1);

PROC
PROC_FallbackCamp_LeftCamp((STRING)_ReadyCheckID)
THEN
DB_NOOP(1);

QRY
QRY_GLO_BlockTeleportToWaypoint(_Player,_)
AND
DB_InCamp(_Player)
AND
DB_FallbackCamp_InCamp(_)
THEN
ShowError(_Player,"CampFastTravel");

//END_REGION Forced Camp - Leave fallback camp

//END_REGION

//REGION Camp Partial Restore
PROC
PROC_Debug_StoryStateRestored_Hook()
AND
DB_Debug_PresetFlags((GUIDSTRING)_Object,(FLAG)_BaseFlag)
AND
DB_OriginCampFlags(_Camper,(FLAG)_BaseFlag,(FLAG)_AvatarFlag,(FLAG)_CompanionFlag,(FLAG)_PartyFlag,(FLAG)_CampFlag)
THEN
SetEntityEvent(_Camper,"DebugTeleportedToCamp");
//END_REGION

//REGION Camp Night Debug Calls
//THESE CALLS ARE FOR DEBUG PURPOSES ONLY AND WILL BREAK THE REGULAR FLOW OF THE NIGHTS. WARRANTY VOID IF USED.
IF
TextEvent("nonight")
AND
DB_CampNight(_Flag,_Priority)
THEN
NOT DB_CampNight(_Flag,_Priority);

IF
TextEvent("qnight")
AND
GetTextEventParamUUID(1,(FLAG)_NightFlag)
AND
NOT GetTextEventParamInteger(3,_)
THEN
PROC_CAMPDEBUG_QueueNight((FLAG)_NightFlag,0);

IF
TextEvent("qnight")
AND
GetTextEventParamUUID(1,(FLAG)_NightFlag)
AND
GetTextEventParamInteger(3,_IgnoreCampType)
AND
QRY_CheckInputInteger(0,_IgnoreCampType,1,"qnight-IgnoreCampType")
THEN
PROC_CAMPDEBUG_QueueNight((FLAG)_NightFlag,_IgnoreCampType);

PROC
PROC_CAMPDEBUG_QueueNight((FLAG)_NightFlag,(INTEGER)_IgnoreCampType)
AND
DB_CampNight_DEBUG_ForcedEntry(_OLDFlag,_OLDIgnore)
THEN
NOT DB_CampNight_DEBUG_ForcedEntry(_OLDFlag,_OLDIgnore);

PROC
PROC_CAMPDEBUG_QueueNight((FLAG)_NightFlag,(INTEGER)_IgnoreCampType)
AND
DB_CampNight(_NightFlag,_)
THEN
DB_CampNight_DEBUG_ForcedEntry(_NightFlag,_IgnoreCampType);
DB_GreeverQNightMarker(_NightFlag); // <--- WARANTY VOID MARKER!
PROC_Camp_DebugQNight_ForceRequirements(_NightFlag);


PROC
PROC_Camp_DebugQNight_ForceRequirements((FLAG)_NightFlag)
THEN
DB_NOOP(1);

PROC
PROC_CAMPDEBUG_QueueNight((FLAG)_NightFlag,(INTEGER)_IgnoreCampType)
AND
NOT DB_CampNight(_NightFlag,_)
THEN
DebugBreak("Attempting to Queue a Campnight that is not defined. Are you in the wrong region?");
//END_REGION

//REGION Sound

PROC
PROC_CampNight_StartSelected()
AND
DB_Camp_QueuedNight(_Flag)
AND
DB_CampNight_SoundStates((FLAG)_Flag,(TRIGGER)_Trigger,(STRING)_StateGroup,(STRING)_StateName)
THEN
TriggerSetSoundState(_Trigger,_StateGroup,_StateName,0);
DB_CampNight_SoundStates_ActiveState(_Trigger,_StateGroup);

PROC
PROC_CampNight_ClearCampNight(_Flag)
AND
DB_CampNight_SoundStates(_Flag,_Trigger,_StateGroup,_StateName)
AND
DB_CampNight_SoundStates_ActiveState(_Trigger,_StateGroup)
THEN
TriggerSetSoundState(_Trigger,_StateGroup,"None",0);

//Called after campfire dialog is finished or when first loading into camp if there is no CFM
PROC
PROC_CampNight_StartSelected_CRDs()
THEN
PROC_CampNight_CallAudioNotifications();

PROC
PROC_CampNight_CallAudioNotifications()
THEN
DB_NOOP(1);

//REGION 
EXITSECTION

ENDEXITSECTION
