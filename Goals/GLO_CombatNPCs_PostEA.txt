Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Combat_ExplodeOnDeath(BLIGHT_NeedleBlight_Dark_A_eccd3da9-5ca0-4403-806a-439d12978dcb, 750, 2.0, "Projectile_Burst_Blight_Needle");
DB_Combat_ExplodeOnDeath(Intellect_Detonator_ae4dc4a7-a72d-435b-b081-84a31dba6d7d, 1180, 1.0, "Projectile_DeathBurst_IntellectDevourer");
DB_Combat_ExplodeOnDeath(Intellect_Devourer_Explosive_3f834dd9-22d9-4599-ab5d-359b4d6f418f, 1180, 1.0, "Projectile_DeathBurst_IntellectDevourer");
DB_Combat_ExplodeOnDeath(Intellect_Detonator_BrainBattle_03e27be2-fbbf-4724-80a7-d41d91528258, 1180, 1.0, "Projectile_DeathBurst_IntellectDevourer");

DB_Combat_RemoveStatusOnLongRest("COL_MYRKULITE_BLESSING");
DB_Combat_RemoveStatusOnLongRest_TriggerException("COL_MYRKULITE_BLESSING",(TRIGGER)S_COL_Colony_SUB_c72269e5-0719-4379-a8ea-ca2ca199d0a3);

DB_Combat_Ability("Strength");
DB_Combat_Ability("Dexterity");
DB_Combat_Ability("Constitution");
DB_Combat_Ability("Intelligence");
DB_Combat_Ability("Wisdom");
DB_Combat_Ability("Charisma");

DB_Combat_NegativeAbilityScoreStatus("LOW_GITHYANKIPRODIGY_MENTALIMAGE");
DB_Combat_NegativeAbilityScoreStatus("STRENGTH_DRAIN");
DB_Combat_NegativeAbilityScoreStatus("INT_ABSOLUTEPAIN_03");
DB_Combat_NegativeAbilityScoreStatus("TAD_ABSORB_INTELLECT_1");
DB_Combat_NegativeAbilityScoreStatus("TAD_ABSORB_INTELLECT_2");
DB_Combat_NegativeAbilityScoreStatus("TAD_ABSORB_INTELLECT_3");
DB_Combat_NegativeAbilityScoreStatus("TAD_ABSORB_INTELLECT_4");
DB_Combat_NegativeAbilityScoreStatus("TAD_ABSORB_INTELLECT_5");
DB_Combat_NegativeAbilityScoreStatus("MF_ABSORB_INTELLECT_1");
DB_Combat_NegativeAbilityScoreStatus("MF_ABSORB_INTELLECT_2");
DB_Combat_NegativeAbilityScoreStatus("MF_ABSORB_INTELLECT_3");
DB_Combat_NegativeAbilityScoreStatus("MF_ABSORB_INTELLECT_4");
DB_Combat_NegativeAbilityScoreStatus("MF_ABSORB_INTELLECT_5");
DB_Combat_NegativeAbilityScoreStatus("DEVOURED_INT");
DB_Combat_NegativeAbilityScoreStatus("TREMBLINGFEET_ELEMENTAL_EARTH");
DB_Combat_NegativeAbilityScoreStatus("CURSEDTOME_THARCHIATE_CODEX");
DB_Combat_NegativeAbilityScoreStatus("INFECTIOUS_BITE_WOLF");
DB_Combat_NegativeAbilityScoreStatus("RAT_INFECTED");

NOT DB_Combat_Dragon_HitProxies((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,"");
NOT DB_Combat_Dragon_HitProxies((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,"",(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,0.0,0.0,0.0);
NOT DB_Combat_Dragon_ProxyOwner((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,"");

//REGION NPC Level Ups
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_Desire_8b9fa503-7205-4ddd-bdfa-bfaa781d9ea9, "BGO_Main_A", 11,"LOW_FLORRICK_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_Desire_8b9fa503-7205-4ddd-bdfa-bfaa781d9ea9, "CTY_Main_A", 11,"LOW_FLORRICK_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "SCL_Main_A", 9,"COL_ZEVLOR_LEVEL_8");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "END_Main", 9,"COL_ZEVLOR_LEVEL_8");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "END_Main", 11,"END_ZEVLOR_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_Wulbren_2d70edbf-1a70-4047-8099-48f3e75d93bf, "CTY_Main_A", 11,"LOW_WULBREN_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b, "END_Main", 12,"END_MINTHARA_LEVEL_12");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GOB_ZhentarimGuard_Ranger_01_4b9818fa-cca6-4bad-b382-4c01334ef22a, "SCL_Main_A", 5,"MOO_ZHENTGUARD_LEVEL_5");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GOB_ZhentarimGuard_Ranger_02_afc5350d-dc9f-4808-b6ce-d7b1bb7c8229, "SCL_Main_A", 5,"MOO_ZHENTGUARD_LEVEL_5");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GOB_Quartermaster_646936f3-8d8d-484e-9361-cd1ed484c615, "SCL_Main_A", 6,"MOO_ROAH_LEVEL_6");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_Nightsong_6c55edb0-901b-4ba4-b9e8-3475a8392d9b, "CTY_Main_A", 11,"LOW_NIGHTSONG_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_Nightsong_6c55edb0-901b-4ba4-b9e8-3475a8392d9b, "END_Main", 11,"LOW_NIGHTSONG_LEVEL_11");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_GLO_YoungLover_01_dd9178e7-1e3f-43bc-8a38-666dfcac7d0c, "SCL_Main_A", 3,"SCL_DANIS_LEVEL_3");
DB_CMB_LevelUpNpcInRegion((CHARACTER)S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "CTY_Main_A", 11,"");
//END_REGION 

//REGION Recruitable NPC Hardmode statuses

DB_RecruitableNpcHardCoreStatus(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b,"HARD","HEALTHBOOST_HARDCORE");
DB_RecruitableNpcHardCoreStatus(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b,"EASY","HEALTHREDUCTION_EASYMODE");

//END_REGION

//REGION Watcher Titan ProjectileStrike Workaround
DB_Combat_Titan_DebilitatingStatusGroups("SG_Stunned");
DB_Combat_Titan_DebilitatingStatusGroups("SG_Incapacitated");
DB_Combat_Titan_DebilitatingStatusGroups("SG_Paralyzed");
//END_REGION

//REGION Wraith Vile Oblivion Implementation
NOT DB_Combat_Wraith_LightStatus((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, "", (GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000);

//DB_Combat_Wraith_LightStatusesToRemove("FLAME_BLADE");
DB_Combat_Wraith_LightStatusesToRemove("PRODUCE_FLAME");
DB_Combat_Wraith_LightStatusesToRemove("BURNING");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_AZER");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_HOLY");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_TRAPWALL");
DB_Combat_Wraith_LightStatusesToRemove("MAG_INFERNAL_BURNING");
//END_REGION

//REGION Gortash Traps
DB_Combat_Gortash_HeatMetal("HEAT_METAL");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_1");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_2");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_3");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_4");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_5");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_6");

DB_Combat_Gortash_HeatMetalTargets((ITEMROOT)PUZ_Trap_Gortash_FocusedIncinerator_f743e5af-700e-44d6-a5bd-c4de7112f8ed);
DB_Combat_Gortash_HeatMetalTargets((ITEMROOT)PUZ_Trap_Gortash_GrenadeInstantiator_a0de8e02-cf75-41ed-a951-2a9da9483519);

//END_REGION

//REGION Orthon mines
DB_GLO_Spells_TimedExplosives((ROOT)GRN_Bomb_Orthon_29d32b36-390f-4fe8-b27b-931393d76c2a, "EXPLOSIVE_MINE_ORTHON_DETONATE", 0.0, 0);
DB_GLO_Spells_TimedExplosives_Delayed("EXPLOSIVE_MINE_ORTHON_DETONATE", 800);
//END_REGION

//REGION Items That change with difficulty
//DB with all the items that need to have a status applied when the difficulty changes
//You need to add the items to the DB on the Script that handles the situation.
//The database parameters look like this:
//DB_Combat_DifficultyItems((ITEM)_Item, _StatusToApply, _DifficultyName)
//DB_Combat_DifficultyItems((ITEM)S_SCL_OliverFight_Nightdome_d5ca84a9-98a4-47e4-ab5f-ee8b245c48d5,"OLIVER_DOME_HARDCORE", "HARD"); //Oliver's Nightdome Example
//END_REGION

//REGION Arcane Turret VFX
DB_Combat_TurretTempaltes(BLD_GEN_Arcane_Turret_A_Floating_A_a7ae5b16-c35e-4179-bc60-d8dd364dcd40);
DB_Combat_TurretTempaltes(BLD_GEN_Arcane_Turret_A_Floating_Activated_A_dc180f8b-9c3d-40e4-97f0-af6759781bcf);
DB_Combat_TurretTempaltes(LOW_RamazithTower_Arcane_Turret_A_Floating_Activated_A_f7b54c47-dc24-47b7-89a8-cfdf72b32354);
//END_REGION

//REGION
DB_Combat_IncapacitatingStatus("SG_Prone");
DB_Combat_IncapacitatingStatus("SG_Incapacitated");
DB_Combat_IncapacitatingStatus("SG_Unconscious");
DB_Combat_IncapacitatingStatus("SG_Stunned");
DB_Combat_IncapacitatingStatus("SG_Paralyzed");
DB_Combat_IncapacitatingStatus("SG_Petrified");
//END_REGION
KBSECTION
//REGION Exception for the Int Dev exploding variant to prevent double explosions
IF
StatusApplied(_IntDev,"DEATHBURST_INTELLECTDEVOURER",_,_)
THEN
DB_Combat_ExplodeOnDeath_ExcludeCharacter(_IntDev);

IF
Died(_IntDev)
AND
GetTemplate(_IntDev,_Template)
AND
DB_Combat_ExplodeOnDeath(_Template, _, _, "Projectile_DeathBurst_IntellectDevourer")
AND
GetDeathType(_IntDev,_DeathType)
AND
_DeathType != "Chasm"
THEN
ApplyStatus(_IntDev,"DEATHBURST_INTELLECTDEVOURER_DEATHTYPEOVERRIDE",-1.0,1);

//END_REGION

//REGION Custom status removed after long rest

IF
StatusApplied(_Character,_Status,_,_)
AND
DB_Combat_RemoveStatusOnLongRest(_Status)
AND
NOT DB_Combat_RemoveStatusOnLongRest_Characters((CHARACTER)_Character,_Status)
THEN
DB_Combat_RemoveStatusOnLongRest_Characters((CHARACTER)_Character,_Status);

IF
StatusRemoved(_Character,_Status,_,_)
AND
DB_Combat_RemoveStatusOnLongRest(_Status)
AND
DB_Combat_RemoveStatusOnLongRest_Characters((CHARACTER)_Character,_Status)
THEN
NOT DB_Combat_RemoveStatusOnLongRest_Characters((CHARACTER)_Character,_Status);

IF
StatusRemoved(_Character,_Status,_,_)
AND
DB_Combat_RemoveStatusOnLongRest_StatusesToRemove((CHARACTER)_Character,(STRING)_Status)
THEN
NOT DB_Combat_RemoveStatusOnLongRest_StatusesToRemove((CHARACTER)_Character,_Status);

QRY
QRY_Combat_RemoveStatusOnLongRest_CheckTrigger((CHARACTER)_Character,(STRING)_Status)
AND
DB_Combat_RemoveStatusOnLongRest_TriggerException(_Status,_Trigger)
AND
DB_InRegion(_Character,_Trigger)
THEN
DB_NOOP(1);

PROC
PROC_LongRest()
AND
DB_Combat_RemoveStatusOnLongRest_Characters((CHARACTER)_Character,(STRING)_Status)
AND
NOT QRY_Combat_RemoveStatusOnLongRest_CheckTrigger(_Character,_Status)
THEN
DB_Combat_RemoveStatusOnLongRest_StatusesToRemove(_Character,_Status);
DB_ExecuteWhenObjectInCurrentLevel("Combat_RemoveStatusOnLongRest_StatusesToRemove",_Character);

PROC
PROC_ExecuteWhenObjectInCurrentLevel("Combat_RemoveStatusOnLongRest_StatusesToRemove",_Character)
AND
DB_Combat_RemoveStatusOnLongRest_StatusesToRemove((CHARACTER)_Character,(STRING)_Status)
AND
HasActiveStatus(_Character,_Status,1)
THEN
RemoveStatus(_Character,_Status,NULL_00000000-0000-0000-0000-000000000000);

//END_REGION

//REGION Cosmetic Disarmed Removed on Combat Start
/*IF
CombatStarted(_ID)
AND
IsTagged(_Character,(TAG)COSMETIC_DISARM_c5cbb2e9-e681-4099-aa2f-3e96f357cc21,1)
THEN
RemoveStatus(_Character,"DISARMED_PEACE_COSMETIC");*/
//END_REGION

//REGION Cazador Unequipping Staff
IF
CastedSpell((CHARACTER)_Cazador,"Shout_LOW_Cazador_SwitchStance",_,_,_)
AND
GetEquippedItem(_Cazador,"Melee Main Weapon",_Staff)
THEN
Unequip(_Cazador,_Staff);
DebugText(_Cazador,"Switched stance!");

IF
StatusRemoved((CHARACTER)_Cazador,"LOW_CAZADORSPALACE_UNARMED_STANCE",_,_) //clears on combat end
THEN
Equip(_Cazador,MAG_LC_CazadorVampiric_Quarterstaff_cf42b0d0-89d8-4756-b6d7-1e258dceeab0,1);
//END_REGION

//REGION Gortash Grenade Launchers
IF
EntityEvent((ITEM)_GrenadeLauncher, "CMB_GortashGrenadeLauncher_ExplodeDelay")
THEN
RealtimeObjectTimerLaunch(_GrenadeLauncher,"CMB_GortashGrenadeLauncher_ExplodeDelay",800);

IF
ObjectTimerFinished((ITEM)_GrenadeLauncher,"CMB_GortashGrenadeLauncher_ExplodeDelay")
AND
IsDestroyed(_GrenadeLauncher, 0)
THEN
CreateExplosion(_GrenadeLauncher,"Projectile_WYR_Explosion_Trap_Gortash",0,_GrenadeLauncher);
Die(_GrenadeLauncher);
//END_REGION

//REGION Gortash Incinerators
IF
CastedSpell((ITEM)_Incinerator,"Zone_WYR_Incinerator_Gortash",_,_,_)
AND
HasActiveStatus(_Incinerator,"WYR_GORTASH_INCINERATOR_OVERHEATING",1)
THEN
RealtimeObjectTimerLaunch(_Incinerator,"CMB_GortashIncinerator_ExplodeDelay",800);

IF
CastedSpell((ITEM)_Incinerator,"Zone_WYR_Incinerator_Gortash",_,_,_)
AND
HasActiveStatus(_Incinerator, "WYR_GORTASH_INCINERATOR_OVERHEATING", 0)
THEN
ApplyStatus(_Incinerator, "WYR_GORTASH_INCINERATOR_OVERHEATING", 18.0);

IF
ObjectTimerFinished((ITEM)_Incinerator,"CMB_GortashIncinerator_ExplodeDelay")
AND
IsDestroyed(_Incinerator, 0)
THEN
CreateExplosion(_Incinerator,"Projectile_WYR_Explosion_Trap_Gortash",0,_Incinerator);
Die(_Incinerator);

IF
EntityEvent(_Incinerator, "CMB_GortashIncinerator_AddToTurnOrder")
AND
CanFight(_Incinerator, 0)
THEN
PROC_SetCanFight(_Incinerator, 1);

IF
EntityEvent(_Incinerator, "CMB_GortashIncinerator_RemoveFromTurnOrder")
AND
CanFight(_Incinerator, 1)
THEN
PROC_SetCanFight(_Incinerator, 0);
//END_REGION

//REGION Gortash Bane Buff removed on Combat End
IF
LeftCombat(S_GLO_Gortash_b878a854-f790-4999-95c4-3f20f00f65ac,_)
THEN
RemoveStatus(S_GLO_Gortash_b878a854-f790-4999-95c4-3f20f00f65ac,"WYR_GORTASH_BANE_BUFF");
//END_REGION

//REGION Gortash Traps receiving Heat Metal
IF
StatusApplied((ITEM)_Trap, _HeatMetalStatus, _, _)
AND
DB_Combat_Gortash_HeatMetal(_HeatMetalStatus)
AND
GetTemplate(_Trap, (ITEMROOT)_TrapTemplate)
AND
DB_Combat_Gortash_HeatMetalTargets(_TrapTemplate)
THEN
ApplyStatus(_Trap, "WYR_GORTASH_INCINERATOR_OVERHEATING", 18.0);
//END_REGION

//REGION Gortash Bombs
//Mine Detonation logic
IF
StatusRemoved(_Mine,"WYR_GORTASH_GRENADE_DETONATE",_,_)
THEN
RealtimeObjectTimerLaunch(_Mine,"CMB_GortashGrenade_ExplodeDelay",800);

IF
ObjectTimerFinished((ITEM)_Mine,"CMB_GortashGrenade_ExplodeDelay")
AND
IsDestroyed(_Mine, 0)
THEN
Die(_Mine);

IF
AddedTo(_Object, _, _)
AND
Exists(_Object,1)
AND
HasActiveStatus(_Object, "WYR_GORTASH_GRENADE_DETONATE", 1)
AND
GetInventoryOwner(_Object, _Owner)
THEN
DB_WYR_Gortash_Grenade(_Object, _Owner);

IF
AddedTo(_Object, _, _)
AND
Exists(_Object,1)
AND
HasActiveStatus(_Object, "WYR_GORTASH_GRENADE_DETONATE", 1)
AND
GetInventoryOwner(_Object, _Owner)
AND
ObjectTimerExists(_Owner, "WYR_Gortash_Grenade_DetonateInInventory", 0)
THEN
ObjectTimerLaunch(_Owner, "WYR_Gortash_Grenade_DetonateInInventory", 6000, 1);

IF
RemovedFrom(_Object, _Owner)
AND
Exists(_Object, 1)
AND
HasActiveStatus(_Object, "WYR_GORTASH_GRENADE_DETONATE", 1)
AND
DB_WYR_Gortash_Grenade(_Object, _Owner)
THEN
NOT DB_WYR_Gortash_Grenade(_Object, _Owner);

IF
RemovedFrom(_Object, _Owner)
AND
Exists(_Object, 1)
AND
HasActiveStatus(_Object, "WYR_GORTASH_GRENADE_DETONATE", 1)
AND
ObjectTimerExists(_Owner, "WYR_Gortash_Grenade_DetonateInInventory", 1)
AND
NOT DB_WYR_Gortash_Grenade(_, _Owner)
THEN
ObjectTimerCancel(_Owner, "WYR_Gortash_Grenade_DetonateInInventory");

IF
ObjectTimerFinished(_Owner, "WYR_Gortash_Grenade_DetonateInInventory")
AND
DB_WYR_Gortash_Grenade(_Object, _Owner)
THEN
TeleportTo(_Object, _Owner, "WYR_Gortash_Grenade_DetonateInInventoryReady");

IF
EntityEvent(_Object, "WYR_Gortash_Grenade_DetonateInInventoryReady")
THEN
RemoveStatus((ITEM)_Object, "WYR_GORTASH_GRENADE_DETONATE", NULL_00000000-0000-0000-0000-000000000000);

//Tactician addition: Unstable status to make them explode when interacted
IF
StatusApplied(_Mine,"WYR_GORTASH_GRENADE_DETONATE",_,_)
AND
CheckRulesetModifierString(cac2d8bd-c197-4a84-9df1-f86f54ad4521,"HARD",1)
THEN
ApplyStatus(_Mine,"WYR_GORTASH_GRENADE_HARDCORE",-1.0);

IF
StatusRemoved((ITEM)_Mine,"WYR_GORTASH_GRENADE_HARDCORE",_,_)
THEN
Die(_Mine);

IF
UseStarted(_Char,_Mine)
AND
HasActiveStatus(_Mine,"WYR_GORTASH_GRENADE_HARDCORE",1)
THEN
Die(_Mine);

PROC
PROC_BlockPickupOfItem(_Char, _Mine)
AND
HasActiveStatus(_Mine,"WYR_GORTASH_GRENADE_HARDCORE",1)
THEN
DB_CustomPickupItemResponse(_Char, _Mine, 0);
Die(_Mine);

PROC
PROC_BlockMoveOfItem(_Char, _Mine)
AND
HasActiveStatus(_Mine,"WYR_GORTASH_GRENADE_HARDCORE",1)
THEN
DB_CustomPickupItemResponse(_Char, _Mine, 0);
Die(_Mine);

//END_REGION

//REGION TC Bombs
//Mine Detonation logic
IF
StatusApplied(_CoinStack,"TWN_TOLLCOLLECTOR_COINBOMB_DETONATE",_,_)
THEN
SetCombatGroupID(_CoinStack, "d5e258fd-31ab-8045-a50b-9f3d22d7a0f2");
SetCanFight(_CoinStack,1);

IF
AddedTo((ITEM)_CoinStack, _Player, _)
AND
DB_Players((CHARACTER)_Player)
AND
HasActiveStatus(_CoinStack,"TWN_TOLLCOLLECTOR_COINBOMB_DETONATE",1)
THEN
RemoveStatus(_CoinStack,"TWN_TOLLCOLLECTOR_COINBOMB_DETONATE",NULL_00000000-0000-0000-0000-000000000000);

IF
StatusRemoved(_CoinStack,"TWN_TOLLCOLLECTOR_COINBOMB_DETONATE",_,_)
AND
IsInInventory((ITEM)_CoinStack,0)
THEN
RealtimeObjectTimerLaunch(_CoinStack,"CMB_TollCollector_CoinBomb_ExplodeDelay",800);

IF
ObjectTimerFinished((ITEM)_CoinStack,"CMB_TollCollector_CoinBomb_ExplodeDelay")
AND
IsDestroyed(_CoinStack, 0)
THEN
SetCanFight(_CoinStack,0);
SetCombatGroupID(_CoinStack, "");
LeaveCombat(_CoinStack);
CreateExplosion(_CoinStack,"Projectile_CoinBomb_TollCollector_Explosion",1,S_TWN_Tollhouse_TollhouseMaster_3b460226-8ca2-4bbc-9bd7-8bb947aa2c06);

IF
StatusRemoved(_CoinStack,"TWN_TOLLCOLLECTOR_COINBOMB_DETONATE",_,_)
AND
IsInInventory((ITEM)_CoinStack,1)
THEN
SetCanFight(_CoinStack,0);
SetCombatGroupID(_CoinStack, "");
RemoveStatus(_CoinStack,"AI_HELPER_AVOIDAREA_STRONG_RADIUS2");

//END_REGION

//REGION Gortash Unequipping Crossbow
IF
CastedSpell((CHARACTER)_Gortash,"Shout_WYR_CallForHelp_Bane_Gortash",_,_,_)
AND
GetEquippedItem(_Gortash,"Ranged Main Weapon",_Crossbow)
THEN
Unequip(_Gortash,_Crossbow);
DebugText(_Gortash,"Switched stance!");

IF
StatusRemoved((CHARACTER)_Gortash,"WYR_GORTASH_BANE_BUFF",_,_) //clears on combat end
THEN
Equip(_Gortash,MAG_WATCHER_Human_Crossbow_f746397f-c489-4121-8499-40017981e290,1);
//END_REGION

//REGION Gortash Crushing Fist
IF
StatusRemoved(_Helper,"WYR_GORTASH_CRUSHINGFIST_HANGING",_,_)
THEN
DebugText(_Helper,"Status Ticked Out!!");
RealtimeObjectTimerLaunch(_Helper,"CMB_GortashCrushingFist_ExplodeDelay",800);

IF
ObjectTimerFinished((ITEM)_Helper,"CMB_GortashCrushingFist_ExplodeDelay")
THEN
DebugText(_Helper,"Boom!");
CreateExplosion(_Helper,"Projectile_WYR_CrushingFist_Gortash_FallingFist",20);
Die(_Helper);
//END_REGION

//REGION Orthon Bombs
//Scatter the bombs when created from the throw spell
IF
UsingSpell(_Caster,"Projectile_MineCluster_Orthon",_,_,_StoryId)
THEN
DB_CMB_OrthonBombDoScatter(_StoryId,_Caster);

IF
UsingSpell(_Caster,"Projectile_MineCluster_Orthon_Hardcore",_,_,_StoryId)
THEN
DB_CMB_OrthonBombDoScatter(_StoryId,_Caster);

IF
StatusAttempt((ITEM)_Target,"EXPLOSIVE_MINE_ORTHON",_Causee,_StoryId)
AND
DB_CMB_OrthonBombDoScatter(_StoryId,_)
AND
GetPosition(_Target,_X,_Y,_Z)
THEN
ScatterAt(_Target,_X,_Y,_Z,6.0);

IF
TurnEnded(_Caster)
AND
DB_CMB_OrthonBombDoScatter(_StoryId,_Caster)
THEN
NOT DB_CMB_OrthonBombDoScatter(_StoryId,_Caster);

// When applyng EXPLOSIVE_MINE_ORTHON it won't tick while in a characters inventory since it's permanent. Instead apply the technical version for one turn (6 seconds)
IF
StatusApplied((ITEM)_Target,"EXPLOSIVE_MINE_ORTHON",_Causee,_)
THEN
EnterCombat(_Target,_Causee);
ApplyStatus(_Target, "EXPLOSIVE_MINE_ORTHON_TECHNICAL", -1.0, 1, _Causee);

//Remove LAugh status if combat ends
IF
LeftCombat(_Orthon,_)
AND
HasActiveStatus(_Orthon,"ORTHON_LAUGH",1)
THEN
RemoveStatus(_Orthon,"ORTHON_LAUGH");


IF
StatusAttempt((ITEM)_Mine, "EXPLOSIVE_MINE_ORTHON", _, _)
THEN
DB_CMB_OrthonMines(_Mine);

IF
DestroyedBy(_Mine, _, _, _)
AND
DB_CMB_OrthonMines(_Mine)
THEN
NOT DB_CMB_OrthonMines(_Mine);

IF
CombatEnded(_Combat)
AND
DB_CMB_OrthonMines(_Mine)
AND
DB_Was_InCombat(_Mine, _Combat)
AND
DB_Players(_Player)
AND
NOT DB_Is_InCombat(_Player, _)
AND
IsInForceTurnBasedMode(_Player, 0)
AND
GetDistanceTo(_Player, _Mine, _Dist)
AND
_Dist <= 10.0
THEN
ForceTurnBasedMode(_Player, 1);
//END_REGION

//REGION Death Bloom Logic 

IF
StatusApplied((ITEM)_Obj,"MOO_DEATHBLOOM_SPAWN",_,_)
AND
QRY_GetSummonOwner(_Obj)
AND 
DB_QRYRTN_GetSummonOwner((CHARACTER)_Summoner)
AND
GetFaction(_Summoner,_Faction)
AND
GetCombatGroupID(_Summoner,_CombatGroupID)
THEN
DB_Combat_DeathBloom(_Obj,_Summoner,_Faction,_CombatGroupID);

IF
StatusRemoved(_Obj,"MOO_DEATHBLOOM_SPAWN",_,_)
AND
IsDestroyed((ITEM)_Obj,1)
AND
DB_Combat_DeathBloom(_Obj,_Summoner,_Faction,_CombatGroupID)
THEN
NOT DB_Combat_DeathBloom(_Obj,_Summoner,_Faction,_CombatGroupID);

IF
StatusRemoved(_Obj,"MOO_DEATHBLOOM_SPAWN",_,_)
AND
IsDestroyed((ITEM)_Obj,0)
THEN
SetDetached(_Obj,1);
CreateExplosion(_Obj,"Projectile_MOO_DeathBloom_Explosion",1);
RealtimeObjectTimerLaunch(_Obj,"CMB_DeathBloom_SpawnDelay",200);
RealtimeObjectTimerLaunch(_Obj,"CMB_DeathBloom_DestroyDelay",900);

IF
ObjectTimerFinished((ITEM)_Obj,"CMB_DeathBloom_SpawnDelay")
THEN
PROC_CMB_CreateNecromite(_Obj);

PROC
PROC_CMB_CreateNecromite((ITEM)_Obj)
AND
CreateAtObject((CHARACTERROOT)Quest_COL_Necromite_Summon_fec67606-9665-4942-b5bb-c211e2e03499,_Obj,0,1,"",1,(CHARACTER)_Necromite)
THEN
DB_Combat_DeathBloom_SpawnedNecromite(_Necromite,_Obj);

IF
EnteredLevel(_Necromite,_,_)
AND
DB_Combat_DeathBloom_SpawnedNecromite((CHARACTER)_Necromite,_Obj)
AND
DB_Combat_DeathBloom(_Obj,_Summoner,_Faction,_CombatGroupID)
THEN
SetFaction(_Necromite,_Faction);
SetCombatGroupID(_Necromite,_CombatGroupID);
EnterCombat(_Necromite,_Summoner);
NOT DB_Combat_DeathBloom(_Obj,_Summoner,_Faction,_CombatGroupID);
NOT DB_Combat_DeathBloom_SpawnedNecromite(_Necromite,_Obj);

IF
ObjectTimerFinished((ITEM)_Obj,"CMB_DeathBloom_DestroyDelay")
THEN
Die(_Obj);

//END_REGION

//REGION Hit Proxy controller for Dragons

IF
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier)
THEN
CharacterDisableAllCrimes((CHARACTER)_Proxy);
SetImmortal(_Proxy,1);
PROC_SetOnStage(_Proxy,0);


//Find initial offsets of the Owner vs proxies
PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Identifier)
AND
DB_Combat_Dragon_ProxyOwner(_ProxyOwner, _Identifier)
AND
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier)
AND
GetFaction(_ProxyOwner,_Faction)
AND
GetPosition(_ProxyOwner,_X,_Y,_Z)
AND
GetPosition(_Proxy,_Xa,_Ya,_Za)
AND
RealSubtract(_Xa,_X,_Xoffset)
AND
RealSubtract(_Ya,_Y,_Yoffset)
AND
RealSubtract(_Za,_Z,_Zoffset)
THEN
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier, _ProxyOwner, _Xoffset, _Yoffset, _Zoffset);
SetFaction(_Proxy,_Faction);
PROC_Combat_Dragon_TryAttachProxy(_ProxyOwner, _Proxy);
PROC_SelfHealing_Disable(_Proxy);

PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Identifier)
AND
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier)
THEN
PROC_SetOnStage(_Proxy,1);

PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Identifier)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

PROC
PROC_Combat_Dragon_TryAttachProxy((CHARACTER)_ProxyOwner, (CHARACTER)_Proxy)
AND
IsHitProxy(_Proxy, 0) //In case it's set from the sidebar
THEN
AttachHitProxy(_ProxyOwner,_Proxy);

PROC
PROC_Combat_Dragon_ShowAllProxies((CHARACTER)_ProxyOwner, (STRING)_Identifier)
AND
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier)
AND
IsOnStage(_Proxy,0)
THEN
PROC_SetOnStage(_Proxy,1);

PROC
PROC_Combat_Dragon_HideAllProxies((CHARACTER)_ProxyOwner, (STRING)_Identifier)
AND
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier)
AND
IsOnStage(_Proxy,1)
THEN
PROC_SetOnStage(_Proxy,0);

IF
WentOnStage(_ProxyOwner,0)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_Dragon_HideAllProxies(_ProxyOwner, _Identifier);

IF
WentOnStage(_ProxyOwner,1)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_Dragon_ShowAllProxies(_ProxyOwner, _Identifier);
PROC_Combat_DragonHitProxy_UpdatePositions();


//Update positions of proxies after owner moves
PROC
PROC_Combat_DragonHitProxy_UpdatePositions()
AND
DB_Combat_Dragon_HitProxies(_Proxy, _Identifier, _ProxyOwner, _Xoffset, _Yoffset, _Zoffset)
AND
GetWorldTransformFromLocal(_ProxyOwner, _Xoffset,_Yoffset,_Zoffset, 0.0 , 0.0, 0.0, _DestX, _DestY, _DestZ, _, _, _)
THEN
TeleportToPosition(_Proxy,_DestX, _DestY, _DestZ,"",0);

//Update Proxy positions after casts and turn ends
IF
CastedSpell(_ProxyOwner,_,_,_,_ID)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

IF
TurnEnded(_ProxyOwner)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

//Hide Proxies if Banished
IF
StatusApplied(_ProxyOwner,"BANISHED",_,_)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_Dragon_HideAllProxies(_ProxyOwner, _Identifier);

IF
StatusRemoved(_ProxyOwner,"BANISHED",_,_)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
AND
HasActiveStatusWithGroup(_ProxyOwner,"SG_Polymorph",0)
THEN
PROC_Combat_Dragon_ShowAllProxies(_ProxyOwner, _Identifier);

//Hide Proxies if Polymorphed
IF
StatusApplied(_ProxyOwner,_PolymorphStatus,_,_)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
AND
IsStatusFromGroup(_PolymorphStatus,"SG_Polymorph",1)
THEN
PROC_Combat_Dragon_HideAllProxies(_ProxyOwner, _Identifier);

IF
StatusRemoved(_ProxyOwner,_PolymorphStatus,_,_)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
AND
IsStatusFromGroup(_PolymorphStatus,"SG_Polymorph",1)
AND
HasActiveStatusWithGroup(_ProxyOwner,"SG_Polymorph",0)
THEN
PROC_Combat_Dragon_ShowAllProxies(_ProxyOwner, _Identifier);
PROC_Combat_DragonHitProxy_UpdatePositions();

//Set Proxies offstage on death
IF
Died(_ProxyOwner)
AND
DB_Combat_Dragon_ProxyOwner((CHARACTER)_ProxyOwner, (STRING)_Identifier)
THEN
PROC_Combat_Dragon_HideAllProxies(_ProxyOwner, _Identifier);

//END_REGION

//REGION Netherbrain Obliteration Orbs

IF
TurnStarted((ITEM)_Orb)
AND
HasActiveStatus(_Orb,"OBLITERATIONORB_AURA",1)
THEN
RealtimeObjectTimerLaunch(_Orb,"CMB_NetherbrainObliterationOrb_ExplodeDelay",1200);
RealtimeObjectTimerLaunch(_Orb,"CMB_NetherbrainObliterationOrb_RemoveDelay",3200);

IF
ObjectTimerFinished((ITEM)_Orb,"CMB_NetherbrainObliterationOrb_ExplodeDelay")
THEN
RemoveStatus(_Orb,"OBLITERATIONORB_AURA");
CreateExplosion(_Orb,"Projectile_ObliterationOrb_Netherbrain_Explosion",-1,_Orb);

IF
ObjectTimerFinished((ITEM)_Orb,"CMB_NetherbrainObliterationOrb_RemoveDelay")
THEN
Die(_Orb);

//END_REGION

//REGION Drider Aura
IF
EnteredCombat(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab,_ID)
THEN
ApplyStatus(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab,"DRIDER_LEADERSHIP_AURA",-1.0,1);

IF
LeftCombat(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab,_ID)
THEN
RemoveStatus(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab,"DRIDER_LEADERSHIP_AURA", NULL_00000000-0000-0000-0000-000000000000);
//END_REGION

/*
//REGION Making Steel Watchers explode on death

IF
Died(_SteelWatcher)
AND
NOT DB_GlobalFlag((FLAG)GLO_Foundry_State_ControlCentreDestroyed_456906c5-40a6-429e-8e1c-7120a2ef631b)
AND
GetTemplate(_SteelWatcher, _OutTemplate)
AND
_OutTemplate == SteelWatcher_Biped_A_27385ea6-d768-47ce-91b8-8d957c0aabd9
THEN
ApplyStatus(_SteelWatcher,"STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN",6.0,1,NULL_00000000-0000-0000-0000-000000000000);
PROC_GLO_SteelWatch_CheckEnableFTB(_SteelWatcher);

PROC
PROC_GLO_SteelWatch_CheckEnableFTB((CHARACTER)_SteelWatcher)
AND
DB_Players(_Player)
AND
IsInForceTurnBasedMode(_Player, 0)
AND
GetDistanceTo(_SteelWatcher, _Player, _OutDistance)
AND
_OutDistance < 20.0
THEN
ForceTurnBasedMode((CHARACTER)_Player, 1);
//END_REGION
*/

//REGION Temp solution for Killing a character when one of their ability scores reaches 0
IF
StatusApplied((CHARACTER)_Char,_Status,_Source,_)
AND
DB_Combat_NegativeAbilityScoreStatus(_Status)
AND
DB_Combat_Ability(_Ability)
AND
GetAbility(_Char,_Ability,_AbilityScore)
AND
_AbilityScore <= 0
THEN
ApplyStatus(_Char,"ABILITYSCORE_DEATH",-1.0,0,_Source);
Die(_Char, DEATHTYPE.DoT, _Source, 1, 1, 0.0);
//END_REGION

//REGION Watcher Titan ProjectileStrike Workaround
//Non-Honor version
IF
UsingSpellOnTarget(_Titan, _Target, "Projectile_LOW_WatcherTitan_DummyHellfireMissiles", _, _, _StoryID)
AND
NOT DB_HonorMode_Enabled(1)
AND
CreateAtObject(Helper_Invisible_A_4cc75168-a81e-4a5c-85cd-1bab8d7bb641, _Target, 0, 0, "LOW_SteelWatchFoundery_TitanTarget_Created", 1, _TargetAOE)
THEN
SetCanJoinCombat(_TargetAOE, 0);
SetCanFight(_TargetAOE, 0);
ApplyStatus(_TargetAOE, "LOW_STEELWATCHFOUNDRY_TITAN_TARGETAREA", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
DB_TestMissileID(_Titan, _TargetAOE);

IF
TurnStarted(_Titan)
AND
NOT DB_HonorMode_Enabled(1)
AND
DB_TestMissileID(_Titan, _TargetAOE)
AND
NOT QRY_Combat_TitanIncapacitated((CHARACTER)_Titan)
THEN
SetEntityEventReal(_Titan,"GLO_CombatWait",1.0);
RealtimeObjectTimerLaunch(_Titan,"LOW_SteelWatchFoundry_TestMissiles",1000);

IF
ObjectTimerFinished(_Titan,"LOW_SteelWatchFoundry_TestMissiles")
AND
DB_TestMissileID(_Titan,_Target)
THEN
UseSpell(_Titan, "ProjectileStrike_SteelWatcher_Quadruped_HellfireMissiles", _Target);

//Handling incapacitated Titan
IF
TurnStarted(_Titan)
AND
DB_TestMissileID(_Titan, _Target)
AND
QRY_Combat_TitanIncapacitated((CHARACTER)_Titan)
THEN
PROC_Combat_Titan_TargetHide((ITEM)_Target);

QRY
QRY_Combat_TitanIncapacitated((CHARACTER)_Titan)
AND
DB_Combat_Titan_DebilitatingStatusGroups(_StatusGroup)
AND
HasActiveStatusWithGroup(_Titan, _StatusGroup, 1)
THEN
DB_NOOP(1);

//Removing Bulwark mode
IF
StatusRemoved(_Titan, "BULWARK_MODE", _, _)
AND
DB_TestMissileID(_Titan,_Target)
THEN
PROC_Combat_Titan_TargetHide((ITEM)_Target);

//The titan Dying
IF
DB_PermaDefeated(_Titan)
AND
DB_TestMissileID(_Titan,_)
THEN
PROC_Combat_Titan_CleanUpTargeting();

PROC
PROC_Combat_Titan_CleanUpTargeting()
AND
DB_TestMissileID(_Titan,_Target)
THEN
PROC_Combat_Titan_TargetHide((ITEM)_Target);

PROC
PROC_Combat_Titan_CleanUpTargeting()
AND
DB_Combat_Titan_TargetToDelete(_Titan, _Target)
THEN
NOT DB_Combat_Titan_TargetToDelete(_Titan, _Target);
RequestDelete((ITEM)_Target);

//Fleeing Combat
IF
CombatEnded(_ID)
AND
DB_TestMissileID(_Titan, _)
AND
QRY_GLO_IsOrWasInCombat(_Titan, _ID)
THEN
PROC_Combat_Titan_CleanUpTargeting();

//First just remove the target marker, and set it aside for safely deleting it
PROC
PROC_Combat_Titan_TargetHide((ITEM)_Target)
AND
DB_TestMissileID(_Titan,_Target)
THEN
RemoveStatus(_Target, "LOW_STEELWATCHFOUNDRY_TITAN_TARGETAREA", NULL_00000000-0000-0000-0000-000000000000);
DB_Combat_Titan_TargetToDelete(_Titan, _Target);
NOT DB_TestMissileID(_Titan,_Target);

IF
TurnStarted(_Titan)
AND
DB_Combat_Titan_TargetToDelete(_Titan, _Target)
THEN
NOT DB_Combat_Titan_TargetToDelete(_Titan, _Target);
RequestDelete((ITEM)_Target);

//Hiding targets as attacks are executed against them
PROC
PROC_CastedSpellOnTarget(_Titan, _Target, "ProjectileStrike_SteelWatcher_Quadruped_HellfireMissiles", _, _, _)
AND
DB_TestMissileID(_Titan,_Target)
THEN
PROC_Combat_Titan_TargetHide((ITEM)_Target);
//END_REGION

//REGION NPC Leveler
//DB_CMB_LevelUpNpcInRegion( _Char, _Region,_LevelUpTo, _HelperStatus )

IF
EnteredLevel((CHARACTER)_Char, _, _Level)
AND
DB_CMB_LevelUpNpcInRegion(_Char, _Level, _LevelUpTo, _HelperStatus)
AND
NOT DB_Players(_Char)
AND
_HelperStatus != ""
AND
HasActiveStatus(_Char, _Helperstatus, 0)
THEN
NOT DB_CMB_LevelUpNpcInRegion(_Char, _Level,_LevelUpTo, _HelperStatus);
SetLevel(_Char, _LevelUpTo);
ApplyStatus(_Char, _HelperStatus, -1.0, 1);

IF
EnteredLevel((CHARACTER)_Char, _, _Level)
AND
DB_CMB_LevelUpNpcInRegion(_Char, _Level, _LevelUpTo, _HelperStatus)
AND
NOT DB_Players(_Char)
AND
_HelperStatus == ""
THEN
NOT DB_CMB_LevelUpNpcInRegion(_Char, _Level,_LevelUpTo, _HelperStatus);
SetLevel(_Char, _LevelUpTo);

//END_REGION

//REGION Watcher Titan Removing Bulwark AI Workaround
IF
StatusRemoved(_Titan, "BULWARK_MODE", _, _)
THEN
SetEntityEventReal(_Titan, "GLO_CombatWait", 1.0);
//END_REGION

/*
//REGION Watcher Titan animation fix

IF
StatusRemoved(_Titan, "BULWARK_MODE", _, _)
THEN
PlayAnimation(_Titan, CMBT_Skill_Bulwark_Deactivate_01_Antic_f12b4d63-d3f7-410d-861c-e831dad265b5, "SteelWatcherTitan_BulwarkDeactivation_AnticAnimationFinished");

IF
EntityEvent(_Titan, "SteelWatcherTitan_BulwarkDeactivation_AnticAnimationFinished")
THEN
PlayAnimation(_Titan, CMBT_Skill_Bulwark_Deactivate_01_Recover_55a4032e-1fb4-4fbb-ad5a-0faabb4f646b, "SteelWatcherTitan_BulwarkDeactivation_RecoverAnimationFinished");

//When the Titan finishes the animation of exiting bulwark mode, remove the Bulwark technical status (Technical status used by animation)
//AnimationEvent(_Titan, "SpellCast_BulwarkModeDeactivated", _)
IF
EntityEvent(_Titan, "SteelWatcherTitan_BulwarkDeactivation_RecoverAnimationFinished")
THEN
RemoveStatus(_Titan, "BULWARK_MODE_TECHNICAL", NULL_00000000-0000-0000-0000-000000000000);
//END_REGION
*/

IF
TurnStarted(_Obj)
AND
HasActiveStatus(_Obj,"WYR_LIGHTNINGSTRIKE_TARGET",1)
THEN
RealtimeObjectTimerLaunch(_Obj,"CMB_LightningStrike_ExplodeDelay",800);
RealtimeObjectTimerLaunch(_Obj,"CMB_LightningStrike_RemoveDelay",1800);

IF
ObjectTimerFinished((ITEM)_Obj,"CMB_LightningStrike_ExplodeDelay")
THEN
RemoveStatus(_Obj,"WYR_LIGHTNINGSTRIKE_TARGET");
CreateExplosion(_Obj,"ProjectileStrike_WYR_LightningStrike",3,_Obj);

IF
ObjectTimerFinished((ITEM)_Orb,"CMB_LightningStrike_RemoveDelay")
THEN
Die(_Orb);

//REGION Difficulty Changes for Items
IF
DB_Combat_DifficultyItems((ITEM)_Item,(STRING)_Status, (STRING)_Difficulty)
AND
CheckRulesetModifierString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521,_Difficulty,1)
THEN
ApplyStatus(_Item, _Status, -1.0);

IF
RulesetModifierChangedString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521, _, _Difficulty)
AND
DB_Combat_DifficultyItems(_Item,_Status, _Difficulty)
AND
NOT DB_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item)
THEN
DB_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item);

IF
RulesetModifierChangedString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521, _, _NewDifficulty)
AND
DB_Combat_DifficultyItems(_Item,_Status, _Difficulty)
AND
_Difficulty != _NewDifficulty
AND
NOT DB_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item)
THEN
DB_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item);

PROC
PROC_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item)
AND
DB_Combat_DifficultyItems((ITEM)_Item,_Status, _Difficulty)
AND
CheckRulesetModifierString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521, _Difficulty, 0)
AND
HasActiveStatus(_Item, _Status, 1)
THEN
RemoveStatus(_Item, _Status);

PROC
PROC_ExecuteWhenObjectInCurrentLevel("Combat_DifficultyItems_DifficultyChanged",(GUIDSTRING)_Item)
AND
DB_Combat_DifficultyItems((ITEM)_Item,_Status, _Difficulty)
AND
CheckRulesetModifierString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521, _Difficulty, 1)
AND
HasActiveStatus(_Item, _Status, 0)
THEN
ApplyStatus(_Item, _Status, -1.0);

IF
DB_PermaDefeated(_Item)
AND
DB_Combat_DifficultyItems((ITEM)_Item,_Status, _Difficulty)
THEN
NOT DB_Combat_DifficultyItems((ITEM)_Item,_Status, _Difficulty);
//END_REGION

//REGION Triggers and areas
// Oblivion Aura (Blight Areas)
IF
StatusApplied(_Object, "AURA_OF_VILEOBLIVION_BUFF", _, _)
THEN
DB_Combat_Wraith_InOblivionAura((GUIDSTRING)_Object);

IF
StatusRemoved(_Object, "AURA_OF_VILEOBLIVION_BUFF", _, _)
THEN
NOT DB_Combat_Wraith_InOblivionAura((GUIDSTRING)_Object);
//END_REGION

//REGION Registering items that enter the VILE OBLIVION aura
IF
StatusApplied(_Entity, _Status, _Causee, _)
AND
Exists(_Entity,1)
AND
IsStatusFromGroup(_Status, "SG_Light", 1)
THEN
DB_Combat_Wraith_LightStatus(_Entity, _Status, _Causee);
PROC_CleanUpLocalOnUnreachable(_Entity);

IF
StatusApplied(_Entity, _Status, _Causee, _)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Status)
AND
Exists(_Entity,1)
THEN
DB_Combat_Wraith_LightStatus(_Entity, _Status, _Causee);
PROC_CleanUpLocalOnUnreachable(_Entity);

IF
DB_Combat_Wraith_InOblivionAura(_Object)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Object);

IF
StatusApplied(_Object, _Status, _, _)
AND
DB_Combat_Wraith_InOblivionAura(_Object)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Status)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Object);

IF
StatusApplied(_Object, _Status, _, _)
AND
DB_Combat_Wraith_InOblivionAura(_Object)
AND
IsStatusFromGroup(_Status, "SG_Light", 1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Object);

IF
TagSet(_Object, (TAG)SPELLLIGHTOBJECT_292e7f29-ff10-462d-8be9-94ddd18970ea)
AND
DB_Combat_Wraith_InOblivionAura(_Object)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Object);

IF
Equipped(_Item, _Character)
AND
DB_Combat_Wraith_InOblivionAura(_Character)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Character);

//END_REGION

//REGION Snuffing out lights
//Checking if the status is in the DB
PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Object)
AND
DB_Combat_Wraith_LightStatus(_Object, _, _)
THEN
PROC_Combat_Wraith_LightRemoved(_Object);

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Object)
THEN
RemoveStatusesWithGroup(_Object, "SG_Light");

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Object)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Status)
THEN
RemoveStatus(_Object, _Status);


//Kill Light statuses for Equipped Items
PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Object)
AND
IsCharacter(_Object, 1)
AND
DB_EquippedItemSlots(_Slot)
AND
GetEquippedItem((CHARACTER)_Object, _Slot, _Equipment)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Equipment);


//Kill Light Helpers for spells like Daylight or Dancing Lights
PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Object)
AND
IsTagged(_Object, (TAG)SPELLLIGHTOBJECT_292e7f29-ff10-462d-8be9-94ddd18970ea, 1)
THEN
ApplyStatus((GUIDSTRING)_Object, "AURA_OF_VILEOBLIVION_FEEDBACK", -1.0, 1);
Die(_Object, DEATHTYPE.Lifetime, 00000000-0000-0000-0000-000000000000, 0, 0);


// Checking the owner of the light status removed
PROC
PROC_Combat_Wraith_LightRemoved((GUIDSTRING)_Object)
AND
QRY_Combat_Wraith_GetOwnerOrSelf(_Object)
AND
DB_QRYRTN_Combat_Wraith_Owner(_Owner)
THEN
PROC_Combat_Wraith_LightRemoved_Internal((GUIDSTRING)_Object, (GUIDSTRING)_Owner); 
ApplyStatus((GUIDSTRING)_Owner, "AURA_OF_VILEOBLIVION_FEEDBACK", -1.0, 1);


// Stores the remaining lifetime of the status remaining for setting the same on returnal
PROC
PROC_Combat_Wraith_LightRemoved_Internal((GUIDSTRING)_Object, (GUIDSTRING)_Owner)
AND
DB_Combat_Wraith_LightStatus(_Object, _Status, _Causee)
AND
HasAppliedStatus(_Object, _Status, 1)
AND
GetStatusCurrentLifetime(_Object, _Status, _DurationLeft)
THEN
DB_Combat_Wraith_LightStatusToReapply(_Owner, _Object, _Status, _Causee, _DurationLeft);

PROC
PROC_Combat_Wraith_LightRemoved_Internal((GUIDSTRING)_Object, (GUIDSTRING)_Owner)
AND
DB_Combat_Wraith_LightStatus(_Object, _Status, _Causee)
THEN
NOT DB_Combat_Wraith_LightStatus(_Object, _Status, _Causee);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Object)
AND
DB_QRYRTN_Combat_Wraith_Owner(_PrevOwner)
THEN
NOT DB_QRYRTN_Combat_Wraith_Owner(_PrevOwner);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Object)
AND
IsItem(_Object, 1)
AND
IsInInventory((ITEM)_Object, 1)
AND
GetInventoryOwner((ITEM)_Object, _Owner)
THEN
DB_QRYRTN_Combat_Wraith_Owner((GUIDSTRING)_Owner);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Object)
AND
NOT DB_QRYRTN_Combat_Wraith_Owner(_)
THEN
DB_QRYRTN_Combat_Wraith_Owner(_Object);

IF
StatusRemoved(_Object, _Status, _, _)
AND
DB_Combat_Wraith_LightStatus(_Object, _Status, _Causee)
THEN
NOT DB_Combat_Wraith_LightStatus(_Object, _Status, _Causee);

IF
StatusRemoved(_Object, "AURA_OF_VILEOBLIVION_BUFF", _, _)
AND
DB_Combat_Wraith_LightStatusToReapply(_Player, _Object, _Status, _Causee, _DurationLeft) // Aca tiene que ir un IF STATUS REMOVED ???
AND
IsEquipped((ITEM)_Object, 1)
AND
GetInventoryOwner((ITEM)_Object, _Player)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Object);

IF
StatusRemoved(_Object, "AURA_OF_VILEOBLIVION_BUFF", _, _)
AND
DB_Combat_Wraith_LightStatusToReapply(_Player, _Object, _Status, _Causee, _DurationLeft) // Aca tiene que ir un IF STATUS REMOVED ???
AND
IsInInventoryOf((ITEM)_Object, _Player, 1)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Object);

IF
StatusRemoved(_Item, "AURA_OF_VILEOBLIVION_BUFF", _, _)
AND
NOT DB_Combat_Wraith_InOblivionAura((GUIDSTRING)_Item)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Item);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((GUIDSTRING)_Object)
AND
DB_Combat_Wraith_InOblivionAura(_Object)
THEN
NOT DB_Combat_Wraith_InOblivionAura(_Object);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((GUIDSTRING)_Object)
AND
DB_Combat_Wraith_InOblivionAura(_Object)
THEN
NOT DB_Combat_Wraith_InOblivionAura(_Object);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((ITEM)_Object)
AND
DB_Combat_Wraith_LightStatusToReapply(_Player, _Object, _Status, _Causee, _DurationLeft)
THEN
ApplyStatus(_Object, _Status, _DurationLeft, 1, _Causee);
NOT DB_Combat_Wraith_LightStatusToReapply(_Player, _Object, _Status, _Causee, _DurationLeft);

// Clean up on level becoming unreachable
PROC
PROC_LocalBecameUnreachable((GUIDSTRING)_Entity)
AND
DB_Combat_Wraith_LightStatus(_Entity, _Status, _Causee)
THEN
NOT DB_Combat_Wraith_LightStatus(_Entity, _Status, _Causee);

PROC
PROC_LocalBecameUnreachable((GUIDSTRING)_Entity)
AND
DB_Combat_Wraith_LightStatusToReapply(_Owner, _Entity, _Status, _Causee, _DurationLeft)
THEN
NOT DB_Combat_Wraith_LightStatusToReapply(_Owner, _Entity, _Status, _Causee, _DurationLeft);
//END_REGION


//REGION Disarm extra UX

IF
CharacterDisarmed((CHARACTER)_Player,_Weapon,_)
AND
DB_Players(_Player)
AND
GetPosition(_Player,_X,_Y,_Z)
THEN
ApplyStatus(_Weapon,"ITEM_SHIMMER_DISARMED",-1.0,1);
ScatterAt(_Weapon,_X,_Y,_Z,3.0);
DB_CMB_PlayerWeaponDisarmed((ITEM)_Weapon,_Player);

IF
ScatteredAt(_Weapon,_X,_Y,_Z)
AND
DB_CMB_PlayerWeaponDisarmed((ITEM)_Weapon,_Player)
THEN
RequestPing(_X,_Y,_Z,_Weapon,_Player);

IF
AddedTo(_Weapon,_,_)
AND
DB_CMB_PlayerWeaponDisarmed((ITEM)_Weapon,_Player)
THEN
RemoveStatus(_Weapon,"ITEM_SHIMMER_DISARMED");
NOT DB_CMB_PlayerWeaponDisarmed(_Weapon,_Player);

//END_REGION

//REGION Watcher Biped Explosion Edge-Cases

//The call of the explosion itself, if it is Banished in any way, don't explode.
IF
StatusRemoved((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
HasActiveStatus(_Character,"BANISHED",0)
AND
HasActiveStatus(_Character,"BANISHING_SMITE",0)
AND
HasActiveStatus(_Character,"BANISHING_SMITE_RANGED",0)
AND
HasActiveStatus(_Character,"RESILIENT_SPHERE",0)
THEN
PROC_SetInvulnerable(_Character, 0);
UseSpell(_Character, "Projectile_SteelWatcher_Biped_SelfDestructExplosion", _Character, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell(_Character, "Projectile_SteelWatcher_Biped_SelfDestructExplosion", _, _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
THEN
Die(_Character, DEATHTYPE.Explode, _Character, 1, 1, 1.0);


//Catches Resillient Sphere edge-case where Watcher still needs to die but without doing damage, so a different spell is called.
IF
StatusRemoved((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
HasActiveStatus(_Character,"RESILIENT_SPHERE",1)
THEN
PROC_SetInvulnerable(_Character, 0);
UseSpell(_Character, "Projectile_SteelWatcher_Biped_SelfDestructExplosion_NoDamage", _Character, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell(_Character, "Projectile_SteelWatcher_Biped_SelfDestructExplosion_NoDamage", _, _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
THEN
Die(_Character, DEATHTYPE.Explode, _Character, 1, 1, 1.0);


//The call of the explosion itself, but if it is Banished in any way, simply die, without the actual explosion.
IF
StatusRemoved((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
QRY_GLO_IsBanished(_Character)
THEN
PROC_SetInvulnerable(_Character, 0);
Die(_Character, DEATHTYPE.Explode, _Character, 1, 1, 1.0);

QRY
QRY_GLO_IsBanished((CHARACTER)_Character)
AND
HasActiveStatus(_Character,"BANISHED",1)
THEN
DB_NOOP(1);

QRY
QRY_GLO_IsBanished((CHARACTER)_Character)
AND
HasActiveStatus(_Character,"BANISHING_SMITE",1)
THEN
DB_NOOP(1);

QRY
QRY_GLO_IsBanished((CHARACTER)_Character)
AND
HasActiveStatus(_Character,"BANISHING_SMITE_RANGED",1)
THEN
DB_NOOP(1);


//The "What happens if there is a single massive damage hit that doesn't let the Watcher react before it dies?" edge-case 
IF
StatusRemoved((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN_DEATHWARD", _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
HasActiveStatus(_Character,"STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN",0)
THEN
PROC_SetInvulnerable(_Character, 1);
UseSpell(_Character, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _Character, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell(_Character, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _, _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
THEN
PROC_SetInvulnerable(_Character, 0);

IF
CastSpellFailed(_Character, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _, _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
THEN
PROC_SetInvulnerable(_Character, 0);
ApplyStatus(_Character,"STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN",6.0,1,_Character);

IF
TurnEnded(_Character)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
GetHitpointsPercentage(_Character, _Percentage)
AND
_Percentage < 30.0
AND
HasActiveStatus ((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN_DEATHWARD", 0)
AND
HasActiveStatus ((CHARACTER)_Character, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", 0)
AND
NOT DB_Dead(_Character)
THEN
PROC_SetInvulnerable(_Character, 0);
ApplyStatus(_Character,"STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN",6.0,1,_Character);

//The "we need the watcher to cast the spell even if it is incapacitated" edge-case
IF
AttackedBy((CHARACTER)_Character, _, _, _, _, _, _)
AND
IsTagged(_Character,(TAG)STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5,1)
AND
HasActiveStatusWithGroup(_Character, "SG_Incapacitated", 1)
AND
NOT QRY_GLO_IsBanished(_Character)
AND
GetHitpointsPercentage(_Character, _Percentage)
AND
_Percentage < 30.0
THEN
RemoveStatusesWithGroup(_Character, "SG_Incapacitated", NULL_00000000-0000-0000-0000-000000000000);
PROC_SetInvulnerable(_Character, 1);
UseSpell(_Character, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _Character, NULL_00000000-0000-0000-0000-000000000000);

//END_REGION

//REGION Sarevok AutoRage

IF
CastedSpell(_Character, "Target_MainHandAttack",_,_,_)
AND
HasActiveStatus(_Character,"LOW_SAREVOK_DEATHBRINGER_COUNTER_4",1)
AND
NOT DB_LOW_MurderTribunal_SarevokTurnActive(1)
THEN
UseSpell(_Character, "Shout_LOW_MurderTribunal_DeathbringerLegacy_OutsideOwnTurn", _Character, NULL_00000000-0000-0000-0000-000000000000);

IF
TurnStarted(S_LOW_MurderTribunal_Sarevok_ae9f784a-ea64-4297-95a7-8377e85231b6)
THEN
DB_LOW_MurderTribunal_SarevokTurnActive(1);

IF
TurnEnded(S_LOW_MurderTribunal_Sarevok_ae9f784a-ea64-4297-95a7-8377e85231b6)
THEN
NOT DB_LOW_MurderTribunal_SarevokTurnActive(1);

//END_REGION 

//REGION Recruitable NPC difficulty statuses

//Add status Proc
PROC
PROC_RecruitableNpcHardCoreStatus_Add((CHARACTER)_Char)
AND
NOT DB_PartOfTheTeam(_Char)
AND
DB_RecruitableNpcHardCoreStatus(_Char,_Difficulty,_Status)
AND
CheckRulesetModifierString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521,_Difficulty,1)
AND
HasActiveStatus(_Char,_Status,0)
THEN
ApplyStatus(_Char,_Status,-1.0,1);

//Remove status Proc
PROC
PROC_RecruitableNpcHardCoreStatus_Remove((CHARACTER)_Char)
AND
DB_RecruitableNpcHardCoreStatus(_Char,_,_Status)
AND
HasActiveStatus(_Char,_Status,1)
THEN
RemoveStatus(_Char,_Status);

//Difficulty changed
IF
RulesetModifierChangedString(SCRIPTED_COMBAT_MECHANICS_cac2d8bd-c197-4a84-9df1-f86f54ad4521,_OldDif,_NewDif)
AND
_OldDif != _NewDif
AND
DB_RecruitableNpcHardCoreStatus(_Char,_,_)
THEN
PROC_RecruitableNpcHardCoreStatus_Remove((CHARACTER)_Char);
PROC_RecruitableNpcHardCoreStatus_Add((CHARACTER)_Char);

//Initial setup when entering level
IF
EnteredLevel((CHARACTER)_Char, _, _)
AND
DB_Origins(_Char)
THEN
PROC_RecruitableNpcHardCoreStatus_Add(_Char);

//Initial Setup When Minthara is set up
PROC
PROC_GOB_DrowCommander_Init()
THEN
PROC_RecruitableNpcHardCoreStatus_Add(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b);

//The first time the character enters the party, remove the status and prevent if from being added again via difficulty changes
IF
DB_PartOfTheTeam(_Char)
THEN
PROC_RecruitableNpcHardCoreStatus_Remove(_Char);

//Left party/camp
PROC
PROC_Origins_CompanionLeavePermanently(_Char, _)
THEN
PROC_RecruitableNpcHardCoreStatus_Add(_Char);

//Died
IF
DB_PermaDefeated(_Char)
AND
DB_RecruitableNpcHardCoreStatus(_Char,_Difficulty,_Status)
THEN
NOT DB_RecruitableNpcHardCoreStatus(_Char,_Difficulty,_Status);

//END_REGION

//REGION Arcane Turret VFX
IF
Dying(_Turret)
AND
GetTemplate(_Turret, _TurretTemplate)
AND
DB_Combat_TurretTempaltes(_TurretTemplate)
THEN
SetEntityEvent(_Turret, "GLO_Combat_TurretVFX_Deactivate", 1);
DebugText(_Turret, "Deactivating");
//END_REGION

//REGION Check Incapacitating Statuses

QRY
QRY_Combat_CheckCharacterIsIncapacitated((CHARACTER)_Char)
AND
DB_Combat_IncapacitatingStatus(_Status)
AND
HasActiveStatusWithGroup(_Char, _Status, 1)
THEN
DB_NOOP(1);

//END_REGION
EXITSECTION

ENDEXITSECTION
