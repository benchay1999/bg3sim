Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap",1);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_1",1);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_2",1);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_3",2);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_4",2);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_5",3);
DB_GLO_NewDoublesByCounteredSpellLevel("Shout_HAG_Counterswap_6",3);

DB_GLO_MaximumHagDoublesAmount(9);

NOT DB_GLO_HagCounterswap_TeleportTargets(NULL_00000000-0000-0000-0000-000000000000,1.0,1.0,1.0);

DB_GLO_HagSwapPoints((TRIGGER)S_HAG_HagLair_HagSwapPoint_017_9083132e-f22b-4d14-8e89-24d705e2217a,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_018_6d8fc24f-fda9-4ccd-9820-cc617d723532,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_019_d84f1bba-b9ce-46d6-9fab-b0146a41c014,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_000_5a755497-d614-499f-96be-b752d532d1bf,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_001_b32cb74a-7195-46f4-bb72-e5f12398f5de,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_002_dd2b9679-adb3-4e3a-bb0f-41a5596f9d89,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_003_b875160d-1bc1-4fea-9493-7611932ef3a1,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_004_117000a1-9b69-4c7a-8fae-255ac3f6e063,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_005_ae285555-8547-4a18-aea0-a844717e77e0,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_006_a0541707-9504-4a77-ba6b-925ce7c46a88,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_007_ff9218da-0bbd-4add-9e3b-0241372e94aa,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_008_c13e70ac-8224-4a60-a0c7-f9dc09c1b8f5,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_009_9c7ab6b8-80c8-4a15-a11b-abe423dd2e74,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_010_438d367d-6d76-42f5-8595-ccef00adff09,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_011_c7a20f23-4381-41f8-b0ef-f8d79694e5e5,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_012_440ee094-c4c7-4c0b-aa50-f57742712edb,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_013_3c295654-a341-4619-8514-eeefd33c14a3,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_014_6fbf5792-e323-4f35-8700-294d98ac1599,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_015_b726101b-1100-432e-998b-00728f4c0bc5,"WLD_MAIN_A");
DB_GLO_HagSwapPoints(S_HAG_HagLair_HagSwapPoint_016_e8ac9b1c-bbb2-4f36-882d-ba6b094a1810,"WLD_MAIN_A");

DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_002_3997a005-2c1f-4ceb-a643-bdc6ec9a6c3e,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_001_66df8ced-2838-43b8-858c-e07265c226f9,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_000_a80a4b4d-1e45-495e-a2cd-9d71744a491f,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_003_a29df644-7f88-4433-93ff-abe239f96a10,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_004_238ca24a-6989-4778-aba1-98002951193e,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_005_20016e8c-3916-4bc4-b55b-0238c515e82a,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_006_50916aa3-ed08-41a6-93a8-d6880220afaf,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_007_412ccf9a-7b6e-44da-bba6-4b75c0acf4ac,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_008_6be2fdd6-7cd3-4c87-b56d-51d648a5850a,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_009_06c926ae-cae9-4f60-9b29-e48bba6b6b90,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_010_a328a4da-52dc-4c12-9c15-9b722e7ca0f5,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_011_286b98f4-066e-4428-bc9f-08042219273d,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_012_eb64e80d-9094-48e9-bfcf-a5da2141e58d,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_013_e678591a-caca-4f24-9eb3-881f0538eb72,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_014_d2e9bd9a-d68a-4c38-869b-f8e64bdd3feb,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_015_6ecf7707-3084-4bdd-afad-9c3bb3e77aa2,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_016_168f759a-7c57-4de2-9a89-b88924db3694,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_017_17bd2619-ed4c-416a-a0c8-3343ee1529ed,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_018_b8e2708d-7de4-4e70-a6e2-774d06c4cdf9,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_019_f0b2fab2-506f-4b27-9be0-83623633f6fc,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_020_79edb251-e056-482f-a385-de65c8c10179,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_021_4f9446e7-bfd3-4b2c-8a70-6667ad50b616,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_022_700dbb35-7d42-4304-a1ff-eaeb19f6ca95,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_023_ba60d2a7-9a3c-4b6c-b282-d9062f747226,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_024_139e2d4a-2aa3-4a02-8499-f18b7c637004,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_025_4cffe06a-d325-4184-938b-0148f785bb46,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_026_624ff359-d4f1-475b-ba7d-6f6ef3c770c1,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_027_f662e069-65c2-4858-8071-545bc46eda4e,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_028_1d489eee-746c-413f-9085-6f582fb9877b,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_029_f24a20ec-5787-49f6-b343-4535481099f2,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_030_15f6a22c-d3c1-4b1e-a376-ec4cbce2f981,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_031_d3fec297-9805-4123-9862-bdf4e09731d7,"CTY_MAIN_A");
DB_GLO_HagSwapPoints(S_LOW_BlushingMermaid_HagSwapPoint_032_91fa7a53-063a-472a-babd-1fd48f1d00d6,"CTY_MAIN_A");
KBSECTION
IF
CastedSpell(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,_Spell,_,_,_)
AND
DB_GLO_NewDoublesByCounteredSpellLevel(_Spell,_NewDoublesAmount)
THEN
DB_GLO_HagCounterswapInProgress(1);
PROC_GLO_HagCounterswap_CheckNewDoublesToSpawn(_NewDoublesAmount);
PROC_GLO_HagCounterswap_SpawnNewDoubles();
PROC_GLO_HagCounterswap();

//REGION Once Counterswap happens, first new doubles are summoned with respect to the maximum number of hag doubles allowed
PROC
PROC_GLO_HagCounterswap_CheckNewDoublesToSpawn((INTEGER)_NewDoublesAmount)
AND
SysCount("DB_HAG_HagLair_Doubles",1,_ExistingDoublesAmount)
AND
DB_GLO_MaximumHagDoublesAmount(_MaximumHagDoublesAmount)
AND
IntegerSubtract(_MaximumHagDoublesAmount,_ExistingDoublesAmount,_FreeSlots)
AND
IntegerMin(_FreeSlots,_NewDoublesAmount,_AvailableHags)
AND
_AvailableHags > 0
THEN
DB_GLO_HagCounterswap_NewDoublesToSpawn(_AvailableHags);

PROC
PROC_GLO_HagCounterswap_SpawnNewDoubles()
AND
DB_HAG_HagLair_Doubles(_HagDouble)
THEN
DB_GLO_HagDoubles_PreCounterswap(_HagDouble);

PROC
PROC_GLO_HagCounterswap_SpawnNewDoubles()
AND
DB_GLO_HagCounterswap_NewDoublesToSpawn(_NewDoublesToSpawn)
THEN
PROC_HAG_SpawnDoubles_GetAvailableSpawnPoints(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d);
PROC_HAG_SpawnDoubles(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,_NewDoublesToSpawn);
SetEntityEventReal(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,"GLO_CombatWait",2.6);

PROC
PROC_GLO_HagCounterswap_SpawnNewDoubles()
AND
DB_GLO_HagCounterswap_NewDoublesToSpawn(_NewDoublesToSpawn)
THEN
NOT DB_GLO_HagCounterswap_NewDoublesToSpawn(_NewDoublesToSpawn);
//END_REGION

//REGION After summoning new hag doubles if any, the doubles and the hag randomly swap positions
PROC
PROC_GLO_HagCounterswap()
THEN
PROC_GLO_HagCounterswap((CHARACTER)S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d);

PROC
PROC_GLO_HagCounterswap()
AND
DB_HAG_HagLair_Doubles(_HagDouble)
THEN
PROC_GLO_HagCounterswap((CHARACTER)_HagDouble);

// Poof vfx shouldn't play on newly created doubles as they get swapped immediately
PROC
PROC_GLO_HagCounterswap((CHARACTER)_Character)
AND
QRY_GLO_HagDoublePreCounterswapOrCaster(_Character)
THEN
PROC_Poof(_Character,(EFFECTRESOURCE)VFX_Script_Hag_Poof_01_a5ac4b11-0c02-a7a6-5c41-a95cf56c847f);

QRY
QRY_GLO_HagDoublePreCounterswapOrCaster((CHARACTER)_Character)
AND
DB_GLO_HagDoubles_PreCounterswap(_Character)
THEN
DB_NOOP(1);

QRY
QRY_GLO_HagDoublePreCounterswapOrCaster((CHARACTER)S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d)
THEN
DB_NOOP(1);

PROC
PROC_GLO_HagCounterswap((CHARACTER)_Character)
AND
DB_GLO_HagDoubles_PreCounterswap(_Character)
THEN
NOT DB_GLO_HagDoubles_PreCounterswap(_Character);

PROC
PROC_GLO_HagCounterswap((CHARACTER)_Character)
THEN
PROC_GLO_HagCounterswap_Teleport(_Character);
PROC_Foop(_Character,(EFFECTRESOURCE)VFX_Script_Hag_SpawnDoubles_Reappear_01_5259b176-0aaf-e1a0-663e-85fdebbaa681);

PROC
PROC_GLO_HagCounterswap()
THEN
SysClear("DB_GLO_HagCounterswap_TeleportTargets", 4);
SysClear("DB_GLO_HagCounterswap_SwapPointsUsed", 1);
NOT DB_GLO_HagCounterswapInProgress(1);
//END_REGION

//REGION Hag counterswap teleport logic
// In case all of the possible swap points were too close for this hag, another teleport attempt starts with fallback and shorter distance check to other swapped hags
PROC
PROC_GLO_HagCounterswap_Teleport((CHARACTER)_Character)
THEN
PROC_GLO_HagCounterswap_GetAvailableSwapPoints(_Character);
PROC_GLO_HagCounterswap_Teleport(_Character,8.0,"NoFallback");

PROC
PROC_GLO_HagCounterswap_Teleport((CHARACTER)_Character)
AND
NOT DB_GLO_HagCounterswap_TeleportTargets(_Character,_,_,_)
THEN
PROC_GLO_HagCounterswap_GetAvailableSwapPoints(_Character);
PROC_GLO_HagCounterswap_Teleport(_Character,4.0,"WithFallback");

// The teleport happens only in case the target position is not too close to any of the previously swapped hags, unless fallback is provided
PROC
PROC_GLO_HagCounterswap_Teleport((CHARACTER)_Character,(REAL)_MinimumDistanceToPreviousSwaps,(STRING)_Fallback)
AND
DB_GLO_HagCounterswap_SwapPointsAvailable(_Trigger)
AND
NOT DB_GLO_HagCounterswap_SwapPointsUsed(_Trigger)
AND
NOT DB_GLO_HagCounterswap_TeleportTargets(_Character,_,_,_)
AND
QRY_GetRandom("DB_GLO_HagCounterswap_SwapPointsAvailable",1,"DB_GLO_HagCounterswap_SwapPointsAvailable_Random")
AND
DB_GLO_HagCounterswap_SwapPointsAvailable_Random((TRIGGER)_RandomTrigger)
THEN
PROC_GLO_HagCounterswap_Teleport_TryAvailableRandomTrigger(_RandomTrigger,_Character,_MinimumDistanceToPreviousSwaps,_Fallback);

PROC
PROC_GLO_HagCounterswap_Teleport_TryAvailableRandomTrigger((TRIGGER)_RandomTrigger,(CHARACTER)_Character,(REAL)_MinimumDistanceToPreviousSwaps,(STRING)_Fallback)
AND
NOT QRY_GLO_HagCounterswap_TooCloseToPeviousSwaps(_RandomTrigger,_Character,_MinimumDistanceToPreviousSwaps)
THEN
PROC_GLO_HagCounterswap_Teleport_Success(_Character,_RandomTrigger);

PROC
PROC_GLO_HagCounterswap_Teleport_TryAvailableRandomTrigger((TRIGGER)_RandomTrigger,(CHARACTER)_Character,(REAL)_MinimumDistanceToPreviousSwaps,(STRING)_Fallback)
AND
DB_GLO_HagCounterswap_SwapPointsAvailable(_RandomTrigger)
AND
DB_GLO_HagCounterswap_SwapPointsAvailable_Random(_RandomTrigger)
THEN
NOT DB_GLO_HagCounterswap_SwapPointsAvailable(_RandomTrigger);

PROC
PROC_GLO_HagCounterswap_Teleport_TryAvailableRandomTrigger((TRIGGER)_RandomTrigger,(CHARACTER)_Character,(REAL)_MinimumDistanceToPreviousSwaps,(STRING)_Fallback)
AND
DB_GLO_HagCounterswap_SwapPointsAvailable_Random(_RandomTrigger)
THEN
NOT DB_GLO_HagCounterswap_SwapPointsAvailable_Random(_RandomTrigger);

PROC
PROC_GLO_HagCounterswap_Teleport_TryAvailableRandomTrigger((TRIGGER)_RandomTrigger,(CHARACTER)_Character,(REAL)_MinimumDistanceToPreviousSwaps,"WithFallback")
AND
SysCount("DB_GLO_HagCounterswap_SwapPointsAvailable",1,0)
AND
NOT DB_GLO_HagCounterswap_TeleportTargets(_Character,_,_,_)
THEN
PROC_GLO_HagCounterswap_Teleport_Success(_Character,_RandomTrigger);

QRY
QRY_GLO_HagCounterswap_TooCloseToPeviousSwaps((TRIGGER)_Trigger,(CHARACTER)_Hag,(REAL)_MinimumDistance)
AND
DB_GLO_HagCounterswap_TeleportTargets(_OtherHag,_X,_Y,_Z)
AND
GetDistanceToPosition(_Trigger,_X,_Y,_Z,_Distance)
AND
_Distance < _MinimumDistance
THEN
DB_NOOP(1);

PROC
PROC_GLO_HagCounterswap_Teleport_Success((CHARACTER)_Character,(TRIGGER)_Trigger)
AND
QRY_GLO_HagCounterswap_FindValidPosition(_Character,_Trigger)
AND
DB_GLO_HagCounterswap_FindValidPosition(_Character,_X,_Y,_Z)
THEN
NOT DB_GLO_HagCounterswap_FindValidPosition(_Character,_X,_Y,_Z);
DB_GLO_HagCounterswap_SwapPointsUsed(_Trigger);
DB_GLO_HagCounterswap_TeleportTargets(_Character,_X,_Y,_Z);
TeleportToPosition(_Character,_X,_Y,_Z,"PROC_GLO_HagCounterswap_Teleport",0,0,0,0,1);

IF
EntityEvent(_Hag,"PROC_GLO_HagCounterswap_Teleport")
AND
GetClosestAlivePlayer(_Hag,_Player,_Distance)
AND
_Distance < 40.0
THEN
SteerTo((CHARACTER)_Hag,_Player,1);

// Finding valid position nearby the chosen swap target with dangerous surfaces in mind
QRY
QRY_GLO_HagCounterswap_FindValidPosition((CHARACTER)_Char,(TRIGGER)_Trigger)
AND
GetPosition(_Trigger,_X,_Y,_Z)
AND
FindValidPosition(_X,_Y,_Z,10.0,_Char,1,_NewX,_NewY,_NewZ)
THEN
DB_GLO_HagCounterswap_FindValidPosition(_Char,_NewX,_NewY,_NewZ);

// Fallback in case a valid position couldn't be found
QRY
QRY_GLO_HagCounterswap_FindValidPosition((CHARACTER)_Char,(TRIGGER)_Trigger)
AND
NOT DB_GLO_HagCounterswap_FindValidPosition(_Char,_,_,_)
AND
GetPosition(_Trigger,_X,_Y,_Z)
THEN
DB_GLO_HagCounterswap_FindValidPosition(_Char,_X,_Y,_Z);

PROC
PROC_GLO_HagCounterswap_GetAvailableSwapPoints((CHARACTER)_Char)
AND
DB_GLO_HagCounterswap_SwapPointsAvailable(_Trigger)
THEN
NOT DB_GLO_HagCounterswap_SwapPointsAvailable(_Trigger);

PROC
PROC_GLO_HagCounterswap_GetAvailableSwapPoints((CHARACTER)_Char)
AND
DB_CurrentLevel(_CurrentLevel)
AND
DB_GLO_HagSwapPoints(_Trigger,_CurrentLevel)
AND
GetDistanceTo(_Char,_Trigger,_Dist)
AND
_Dist > 4.0
AND
NOT QRY_IsInDangerousSurfaceFor(_Trigger,_Char,2.0)
AND
QRY_HAG_HagLair_SpawnDoubles_NoNearbyPlayers(_Trigger)
AND
DB_HAG_HagLair_SpawnDoubles_NoPlayersNearby(1)
THEN
SysClear("DB_HAG_HagLair_SpawnDoubles_NoPlayersNearby",1);
DB_GLO_HagCounterswap_SwapPointsAvailable(_Trigger);

// Hag double spawn points are used as possible swap points as well
IF
DB_HAG_HagLair_DoublesSpawnPoints(_Trigger)
AND
DB_CurrentLevel(_CurrentLevel)
THEN
DB_GLO_HagSwapPoints(_Trigger,_CurrentLevel);
//END_REGION

//REGION Once the hag has finished summoning doubles and the amount of them has overflown the maximum allowed, excessive doubles are cleared
PROC
PROC_GLO_ClearHagDoublesOverflow()
AND
SysCount("DB_HAG_HagLair_Doubles",1,_DoublesAmount)
AND
DB_GLO_MaximumHagDoublesAmount(_MaximumHagDoublesAmount)
AND
IntegerSubtract(_DoublesAmount,_MaximumHagDoublesAmount,_DoublesOverflow)
AND
_DoublesOverflow > 0
AND
DB_HAG_HagLair_Doubles(_Double)
AND
SysCount("DB_GLO_ClearHagDoublesOverflow_DoublesToClear",1,_ClearedDoubles)
AND
_ClearedDoubles < _DoublesOverflow
THEN
SetEntityEvent(_Double,"HAG_RemoveDouble");
DB_GLO_ClearHagDoublesOverflow_DoublesToClear(_Double);

PROC
PROC_GLO_ClearHagDoublesOverflow()
AND
DB_GLO_ClearHagDoublesOverflow_DoublesToClear(_Double)
THEN
NOT DB_GLO_ClearHagDoublesOverflow_DoublesToClear(_Double);
//END_REGION

//REGION Remove Counterswap Legendary Action status from the doubles to not show which one is the real one

IF
StatusRemoved(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,"LEGENDARYACTION_HAG_COUNTERSWAP",_,_)
AND
DB_HAG_HagLair_Doubles(_Double)
AND
HasActiveStatus(_Double,"LEGENDARYACTION_HAG_COUNTERSWAP_DOUBLE",1)
THEN
RemoveStatus(_Double,"LEGENDARYACTION_HAG_COUNTERSWAP_DOUBLE");

//END_REGION

//REGION Enabling hag counterswap only for her boss fights
IF
FlagSet((FLAG)HAG_Hag_State_HagInLair_b1559527-2aa5-41e1-bab2-89ace2bf450c,_,_)
THEN
ApplyStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,"HAG_COUNTERSWAP_TECHNICAL",-1.0);

IF
FlagSet((FLAG)HAG_Hag_State_HagDefeated_7a1acad0-589f-ae02-f712-f0d24080d720,_,_)
THEN
RemoveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,"HAG_COUNTERSWAP_TECHNICAL");

IF
FlagSet((FLAG)LOW_BlushingMermaid_State_HagBossFightStarted_20001901-b4cb-48a3-900d-50838d67de61,_,_)
THEN
ApplyStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,"HAG_COUNTERSWAP_TECHNICAL",-1.0);
//END_REGION

//REGION Suppressing her reaction during dialogues

IF
DialogActorJoined(_Dialog, _, S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, _)
AND
DialogIsAutomated(_Dialog, 0)
AND
HasActiveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "HAG_COUNTERSWAP_TECHNICAL", 1)
THEN
ApplyStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", -1.0, 0, NULL_00000000-0000-0000-0000-000000000000);

IF
StatusApplied(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d,  "HAG_COUNTERSWAP_TECHNICAL", _, _ID)
AND
DB_InteractiveDialogSpeaker(_, (CHARACTER)S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d)
THEN
ApplyStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", -1.0, 0, NULL_00000000-0000-0000-0000-000000000000);

IF
DialogActorLeft(_, _, S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, _)
AND
HasActiveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", 1)
THEN
RemoveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", NULL_00000000-0000-0000-0000-000000000000);

IF
StatusRemoved(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "HAG_COUNTERSWAP_TECHNICAL", _, _)
AND
HasActiveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", 1)
THEN
RemoveStatus(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "TECHNICAL_HAG_PAUSECOUNTERSWAP", NULL_00000000-0000-0000-0000-000000000000);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "GLO_Hag"
