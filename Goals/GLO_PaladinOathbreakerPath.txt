Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Dialogs((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f);
DB_FlagReactionAfterDialog((FLAG)GLO_PaladinOathbreaker_Event_BecomesOathbreakerAfterDialog_ec820ae7-58e4-4242-b417-e36c4048f619, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f);
DB_FlagReactionAfterDialog((FLAG)GLO_PaladinOathbreaker_Event_ObtainedRedemption_4640a2da-599a-4911-87c3-4b1cabd13ee1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f);
DB_GLO_PaladinOathbreaker_RedemptionPrice(1, 1000);
DB_GLO_PaladinOathbreaker_RedemptionPrice(2, 2000);

// Dialogues paladin oathbreaker has to wait to end before appearing.
// DB cleared after changing levels and after long rests
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog((DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

DB_OriginCampFlags((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, (FLAG)OATHBREAKERKNIGHT_8e8de7bb-ac82-40c9-813e-b5112611aecf, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);

DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDMAIN", (TRIGGER)S_CAMP_WLDMAIN_Oathbreaker_f401f1b7-cb09-4e95-b21d-e425865dd263);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDCAVGRN", (TRIGGER)S_CAMP_WLDCAVGRN_Oathbreaker_fce87636-d5e1-4a6d-9454-ed8590729412);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDCAVSND", (TRIGGER)S_CAMP_WLDCAVSND_Oathbreaker_0a3c55db-39ae-412d-8f7b-54298ac36f8b);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDDUNABB", (TRIGGER)S_CAMP_WLDDUNABB_Oathbreaker_6f01e06d-d48b-4f5a-a997-8d7b2962c612);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDBAS", (TRIGGER)S_CAMP_WLDBAS_Oathbreaker_40fe55e5-d4bd-4e8c-bed8-24acc115a231);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDDUNSHA", (TRIGGER)S_CAMP_WLDDUNSHA_Oathbreaker_7cffb828-8cce-4485-8e1e-f2fb252e9562);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "WLDUND", (TRIGGER)S_CAMP_WLDUND_Oathbreaker_0dcd2fc5-e442-4ef5-8076-cf47d737d9ef);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "CREMAIN", (TRIGGER)S_CAMP_CRE_Oathbreaker_6090af73-a83a-42ca-a8be-427610c19178);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "CREINSIDE", (TRIGGER)S_CAMP_CREIN_Oathbreaker_75119780-fad3-497c-bb3a-25f30e40f7fa);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "SCLMAIN", (TRIGGER)S_CAMP_SCLMAIN_Oathbreaker_2086906f-43bf-4124-96ff-bb39d23192d5);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "SHARTEMPLE", (TRIGGER)S_CAMP_SHARTEMPLE_Oathbreaker_b6b499b3-8a1e-4f74-80da-22850082db9b);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "HAVEN", (TRIGGER)S_CAMP_HAVEN_Oathbreaker_908825f1-995e-4bdd-88f9-3b54bd27fe13);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "MOONRISE", (TRIGGER)S_CAMP_MOONRISE_Oathbreaker_2bfa8e97-5e34-4ee7-96ef-ab1a92bcc251);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "INTMAIN", (TRIGGER)S_CAMP_INT_Oathbreaker_5bff936b-b445-4214-a0ce-6c76a14f0d0c);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "ELFSONG", (TRIGGER)S_CAMP_ELFSONG_Oathbreaker_11f4722e-d002-45bd-9f04-d7a0a18cdde7);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "FARM", (TRIGGER)S_CAMP_FARM_Oathbreaker_a13c4691-9f9e-406b-88b6-2957273c907c);
DB_ORI_OriginCampData((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "SLUMS", (TRIGGER)S_CAMP_SLUMS_Oathbreaker_13826dad-fd78-42e3-98b4-f049056688e8);

DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)GOB_DrowCommander_b31382b6-355d-9ab4-3d20-4680e2c26477);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)CRE_YouthTraining_Teacher_2c57553c-9473-fd1e-8614-6a49b71dcf1c);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)HAV_MolsDeal_Mol_d47c649a-06cd-e554-8705-2d38a3214110);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)MOO_Docks_GuardJumper_67ffd8be-bf8d-04bd-1191-b055c719e9fd);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)MOO_MintharaFate_Torture_3cfe059b-af60-8e99-52cf-0c81ee75f33b);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)LOW_Minsc_SaveFromAbsolute_eeb5d970-975f-5f16-80ba-4aa54cb65702);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)LOW_SorcerousSundries_Aradin_f25cbd18-f09a-4dc2-414c-6762d60a3a86);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)WYR_KillDirectorGortash_Ceremony_5149a422-854a-9e05-433a-0520d87eb112);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)WYR_MerchantsHouse_Merchant_90252ba6-d583-c79d-f60d-211a72e496bb);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)WYR_South_GoldQuestGiver_cbf9928e-d7b7-ac9b-2a9b-aa4e295c19d0);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)WYR_Windmill_Mindflayer_91a4e644-7eee-bbd4-3647-ec6d0934f515);
DB_GLO_PaladinOathbreaker_LinkedDialogues((DIALOGRESOURCE)LOW_SharGrotto_ViconiaDefeated_OM_Shadowheart_COM_03382bb9-9c85-28fd-4c24-9069e44a0807);
KBSECTION
//REGION Oathbreaker first appearance
IF
FlagSet((FLAG)GLO_PaladinOathbreaker_State_AboutToBecomeOathbreaker_3ad5db08-0191-4308-b127-ad1cdc6f8718, (CHARACTER)_Player, _)
AND
DB_OnlyOnce("GLO_PaladinOathbreakerPath_KnightIntro") // Not the first oathbreaker.
THEN
DB_NOOP(1); //TODO: Unlock Paladin Quest for player.

// First paladin to break the oath will be chosen for the oathbreaker knight intro
IF
FlagSet((FLAG)GLO_PaladinOathbreaker_State_AboutToBecomeOathbreaker_3ad5db08-0191-4308-b127-ad1cdc6f8718, (CHARACTER)_Player, _)
AND
QRY_OnlyOnce("GLO_PaladinOathbreakerPath_KnightIntro")
THEN
PROC_ORI_SetupCamp((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231);

// In case it failed to start the oathbreaker dialog and another paladin breaks their oath.
IF
FlagSet((FLAG)GLO_PaladinOathbreaker_State_AboutToBecomeOathbreaker_3ad5db08-0191-4308-b127-ad1cdc6f8718, (CHARACTER)_Player, _)
AND
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_PreviousPlayer)
THEN
NOT DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_PreviousPlayer);

// Wait for crimes to resolve if any
IF
FlagSet((FLAG)GLO_PaladinOathbreaker_State_AboutToBecomeOathbreaker_3ad5db08-0191-4308-b127-ad1cdc6f8718, (CHARACTER)_Player, _)
AND
DB_GLO_PaladinOathbreaker_CrimeID(_Player, _CrimeID)
THEN
DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Player, _CrimeID);

// If resolved, allow the oathbreaker knight to appear
IF
DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Player, _CrimeID)
AND
NOT DB_GLO_PaladinOathbreaker_CrimeID(_Player, _CrimeID)
THEN
NOT DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Player, _CrimeID);

// Oathbreaker knight is waiting for crime and paladin commits another crime: add it to the list even if it's against their oath.
PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char, (STRING)_Crime, (INTEGER)_StoryActionID, (GUIDSTRING)_Evidence, (CHARACTER)_Victim, (INTEGER)_CrimeID)
AND
DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Char, _)
AND
NOT DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Char, _CrimeID)
THEN
DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Char, _CrimeID);

IF
FlagSet((FLAG)GLO_PaladinOathbreaker_State_AboutToBecomeOathbreaker_3ad5db08-0191-4308-b127-ad1cdc6f8718, (CHARACTER)_Player, _)
AND
NOT DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player)
THEN
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player);

IF
LevelLoaded(_)
AND
DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog)
THEN
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog);

PROC
PROC_Camp_EveryoneWakeupEndHook()
AND
DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog)
THEN
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog);

IF
DialogEnded(_Dialog, _)
AND
DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog)
THEN
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog(_Dialog);

IF
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player)
AND
NOT DB_CantTalk(_Player)
AND
NOT DB_DialogPlayers(_, _Player, _)
AND
NOT DB_DialogNPCs(_, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _)
AND
NOT DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player)
AND
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog(_)
AND
NOT DB_GLO_PaladinOathbreakerPath_WaitForCrime(_Player, _)
THEN
PROC_GLO_OathbreakerKnight_StartFirstAppearance(_Player, 0);

PROC
PROC_GLO_PaladinOathbreaker_DialogEnded(_, _DialogID, _Player)
AND
NOT DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player)
THEN
PROC_GLO_OathbreakerKnight_StartFirstAppearance((CHARACTER)_Player, 1);


PROC
PROC_GLO_OathbreakerKnight_StartFirstAppearance((CHARACTER)_Player, (INTEGER)_Immediate)
AND
DB_GLO_OathbreakerKnight_StartFirstAppearanceWith((CHARACTER)_OtherPlayer)
THEN
ObjectTimerCancel(_OtherPlayer, "GLO_OathbreakerKnight_Appears");
NOT DB_GLO_OathbreakerKnight_StartFirstAppearanceWith((CHARACTER)_OtherPlayer);

PROC
PROC_GLO_OathbreakerKnight_StartFirstAppearance((CHARACTER)_Player, (INTEGER)_Immediate)
THEN
DB_GLO_OathbreakerKnight_StartFirstAppearanceWith(_Player);

PROC
PROC_GLO_OathbreakerKnight_StartFirstAppearance((CHARACTER)_Player, 0)
THEN
ObjectTimerLaunch(_Player, "GLO_OathbreakerKnight_Appears", 1000);

PROC
PROC_GLO_OathbreakerKnight_StartFirstAppearance((CHARACTER)_Player, 1)
AND
NOT QRY_StartDialog_Fixed((DIALOGRESOURCE)GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player)
THEN
PROC_GLO_PaladinOathbreakerPath_FailedToStartDialog(_Player);

IF
ObjectTimerFinished((CHARACTER)_Player, "GLO_OathbreakerKnight_Appears")
AND
NOT DB_DialogPlayers(_, _Player, _)
AND
NOT DB_DialogNPCs(_, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _)
AND
NOT DB_GLO_PaladinOathbreakerPath_WaitForDialog(_)
AND
QRY_SpeakerIsAvailable(_Player)
AND
NOT QRY_StartDialog_Fixed((DIALOGRESOURCE)GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player)
THEN
PROC_GLO_PaladinOathbreakerPath_FailedToStartDialog(_Player);

PROC
PROC_GLO_PaladinOathbreakerPath_FailedToStartDialog((CHARACTER)_Player)
AND
DB_GLO_PaladinOathbreaker_Oathbreakers(_OtherPlayer)
AND
QRY_SpeakerIsInDialogRange(_OtherPlayer, _Player) // Also succeeds if _OtherPlayer == _Player
THEN
DB_NOOP(1); // (Journal) TODO: Start personal quest to find someone or something to recover the paladin's powers.

IF
DialogStarted(GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, _DialogID)
AND
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player)
THEN
NOT DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player); // (Journal) TODO: Start personal quest to speak with misterious figure at the camp.

IF
DialogActorJoined(GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, _DialogID, (CHARACTER)_Player, _)
AND
DB_GLO_PaladinOathbreaker_Oathbreakers(_Player)
THEN
DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player); // (Journal) TODO: Case for nearby paladins who also broke their oath. Start personal quest to speak with misterious figure at the camp.

IF
DialogRequestFailed(GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, _)
AND
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player)
THEN
DB_NOOP(1); // (Journal) TODO: Start personal quest to find someone or something to recover the paladin's powers.

IF
DialogRequestFailed((DIALOGRESOURCE)GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, _)
AND
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player)
THEN
NOT DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player);

// Add other oathbreakers to the dialog as speakers if available.
PROC
PROC_StartDialog_AddExtraSpeakers(GLO_OathbreakerKnight_FirstAppearance_5f60f830-1f01-0547-4337-337752c32970, _DialogID)
AND
DB_GLO_PaladinOathbreakerPath_SelectedOathbreaker(_Player)
AND
DB_Players(_OtherPlayer)
AND
DB_GLO_PaladinOathbreaker_Oathbreakers(_OtherPlayer)
AND
_OtherPlayer != _Player
AND
QRY_SpeakerIsAvailable(_OtherPlayer)
THEN
PROC_DialogAddListeningActor(_DialogID, _OtherPlayer);
//END_REGION

//REGION Oathbreaker Knight at camp
// Oathbreaker player learns about the knight, but for some reason they didn't get the first appearance: block future appearances for them.
IF
DialogActorJoined(CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _, _Player, _)
AND
DB_GLO_PaladinOathbreaker_Oathbreakers((CHARACTER)_Player)
AND
NOT DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player)
THEN
DB_GLO_PaladinOathbreakerPath_KnightTalkedTo(_Player);

IF
DB_GLO_PaladinOathbreaker_Oathbreakers(_)
THEN
PROC_GlobalSetFlagAndCache(GLO_PaladinOathbreaker_State_OathbreakerPresent_2925b66d-d306-4034-bf11-6c0cdca36edc);

PROC
PROC_GLO_PaladinOathbreaker_RedemptionObtainedHook((CHARACTER)_Char)
AND
NOT DB_GLO_PaladinOathbreaker_Oathbreakers(_)
THEN
PROC_GlobalClearFlagAndCache(GLO_PaladinOathbreaker_State_OathbreakerPresent_2925b66d-d306-4034-bf11-6c0cdca36edc);

// If no paladin is an oathbreaker or about to be, set the oathbreaker knight off stage.
PROC
PROC_LongRest()
AND
NOT DB_PermaDefeated(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231)
AND
NOT DB_OffStage(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231)
AND
NOT DB_GlobalFlag(GLO_PaladinOathbreaker_State_OathbreakerPresent_2925b66d-d306-4034-bf11-6c0cdca36edc)
THEN
PROC_SetOnStage(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, 0);

// If there is a paladin who's an oathbreaker or about to be and the oathbreaker knight is not present, set him on stage.
IF
DB_GlobalFlag(GLO_PaladinOathbreaker_State_OathbreakerPresent_2925b66d-d306-4034-bf11-6c0cdca36edc)
AND
DB_OffStage(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231)
AND
NOT DB_PermaDefeated(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231)
THEN
PROC_Foop(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231);
PROC_ORI_SetupCamp((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, 1);

// Players who are not paladins get a different dialog.
QRY
QRY_SelectCustomDialog_AfterGenerics(S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player)
AND
DB_Dialogs((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f)
AND
IsTagged(_Player, (TAG)PALADIN_6d85ab2d-5c23-498c-a61e-98f05a00177a, 0)
THEN
DB_SelectedDialog((DIALOGRESOURCE)CAMP_OathbreakerKnight_PlayerIsNotPaladin_68803697-d23c-56f5-4eab-2d265ff17f8d, (CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player);

PROC
PROC_DialogFlagSetup(CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player)
AND
QRY_GLO_PaladinOathbreaker_IsOrWillBecomeOathbreaker((CHARACTER)_Player)
THEN
SetFlag((FLAG)GLO_PaladinOathbreakerPath_State_CanRedemptThemself_5918cf72-d4f6-3b5e-0a23-2bba9264a623, _Player);

PROC
PROC_DialogFlagSetup(CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, _Player)
AND
NOT QRY_GLO_PaladinOathbreaker_IsOrWillBecomeOathbreaker((CHARACTER)_Player)
THEN
ClearFlag((FLAG)GLO_PaladinOathbreakerPath_State_CanRedemptThemself_5918cf72-d4f6-3b5e-0a23-2bba9264a623, _Player);

// Variable prices for oathbreakers
PROC
PROC_DialogFlagSetup((DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _, _)
AND
DB_DialogMoneyTransfer(1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _PrevPrice)
THEN
NOT DB_DialogMoneyTransfer(1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _PrevPrice);

PROC
PROC_DialogFlagSetup((DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _, _Player)
AND
DB_ObjectCountHelper(_Player, "GLO_PaladinOathbreaker_BrokeOathCount", _Count)
AND
DB_GLO_PaladinOathbreaker_RedemptionPrice(_Count, _Price)
THEN
DB_DialogMoneyTransfer(1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _Price);

PROC
PROC_DialogFlagSetup((DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _, _)
AND
NOT DB_DialogMoneyTransfer(1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, _)
THEN
DB_DialogMoneyTransfer(1, (DIALOGRESOURCE)CAMP_OathbreakerKnight_a9b7db6e-aa44-f954-d479-da9036fe208f, 10000); // Always default to max redemption price

//END_REGION

//REGION Journal outcomes
PROC
PROC_GLO_PaladinOathbreaker_BecomesOathbreakerHook((CHARACTER)_Char)
THEN
DB_NOOP(1); // (Journal) TODO: end personal quest with paladin decided to become an oathbreaker.

PROC
PROC_GLO_PaladinOathbreaker_RedemptionObtainedHook((CHARACTER)_Char)
THEN
DB_NOOP(1); // (Journal) TODO: end personal quest with paladin decided to become pay to take his oath back. Say to be more careful in the future or they will have to pay again.
//END_REGION

//REGION Blocking becoming an oathbreaker
QRY
QRY_GLO_PaladinOathBreaker_BlockBreakingOath(_, (CHARACTER)_Char)
AND
DB_CurrentLevel("TUT_Avernus_C")
THEN
DB_NOOP(1);
//END_REGION

//REGION Debug
IF
TextEvent("CAMP_ForceOathbreakerKnight")
AND
QRY_OnlyOnce("GLO_PaladinOathbreakerPath_OathbreakerKnightAppears")
THEN
PROC_ORI_SetupCamp((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231);

IF
EntityEvent((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, "DebugTeleportedToCamp")
THEN
PROC_ORI_SetupCamp((CHARACTER)S_GLO_OathbreakerKnight_3939625d-86cc-4395-9d50-4f8b846c4231, 1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "ModWrapper_Gustav"
