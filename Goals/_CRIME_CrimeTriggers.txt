Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Setting up crime type Flags for the Crime Dialogs
DB_CrimeDialogFlags("Murder",(FLAG)GEB_Crime_Murder_cdea5897-ce77-48d4-8377-003e453fe8ba);
DB_CrimeDialogFlags("Assault",(FLAG)GEB_Crime_Assault_bd371f4a-4123-5b42-3dd0-9cf23fb8c955);
DB_CrimeDialogFlags("Steal",(FLAG)GEB_Crime_Theft_8dd72b27-dcc4-67c3-17d0-ef0170f21d85);
DB_CrimeDialogFlags("PickPocketFailed",(FLAG)GEB_Crime_Theft_8dd72b27-dcc4-67c3-17d0-ef0170f21d85);
DB_CrimeDialogFlags("Vandalise",(FLAG)GEB_Crime_Vandalise_0cf27cb8-2ad2-cbe0-cee6-85f8338e668b);
DB_CrimeDialogFlags("Trespassing",(FLAG)GEB_Crime_Trespassing_8cb905dc-3480-ee1e-fbdb-03b317c6a46f);
DB_CrimeDialogFlags("UseForbiddenItem",(FLAG)GEB_Crime_UseForbiddenItem_0203c578-3de4-5976-5494-5d5ad94bca80);
DB_CrimeDialogFlags("KnockSpell",(FLAG)GEB_Crime_KnockSpell_1182b0be-111c-4480-8417-76f3129cc761);
DB_CrimeDialogFlags("Polymorphed",(FLAG)GEB_Crime_Polymorphed_1243c7b6-3d96-464f-b501-9d4162ef885d);
DB_CrimeDialogFlags("Charmed",(FLAG)GEB_Crime_Charmed_39293705-87ad-46c2-ae32-5ad8b492313e);
DB_CrimeDialogFlags("LockPicking",(FLAG)GEB_Crime_Lockpicking_db0cd98f-a4a5-4f98-a7a5-2b6fd55c2f7a);
DB_CrimeDialogFlags("DisarmingTrap",(FLAG)GEB_Crime_DisarmingTrap_de7ae595-fa8b-4074-b342-a5f28c7ab86a);
DB_CrimeDialogFlags("SpellTrapDiscovered",(FLAG)GEB_CRIME_PlacedTrap_53d2cf81-eaaa-46f1-8dbb-1114eba27346);
DB_CrimeDialogFlags("DroppedOwnedCorpse",(FLAG)GEB_CRIME_DroppedPickedUpOwnedCorpse_39fd4ed5-cb85-4427-978d-cd6dc303361b);
DB_CrimeDialogFlags("PickUpOwnedCorpse",(FLAG)GEB_CRIME_PickUpOwnedCorpse_d843d517-02a3-4675-8bc7-cd48d2cc2ad5);

// Murder

// Killing -> Murder type mapping : Sneak or not, Killed animal or not, killed Monster or not, allied or not
DB_CRIME_MurderType(0,0,0,"Murder");
DB_CRIME_MurderType(0,0,1,"Murder_Monster");
DB_CRIME_MurderType(0,1,0,"Murder_Beast_LowPrio");
DB_CRIME_MurderType(0,1,0,"Murder_Beast_HighPrio");
DB_CRIME_MurderType(0,1,1,"Murder_Beast_LowPrio");
DB_CRIME_MurderType(0,1,1,"Murder_Beast_HighPrio");
DB_CRIME_MurderType(1,0,0,"SneakMurder");
DB_CRIME_MurderType(1,1,0,"SneakMurder_Beast_LowPrio");
DB_CRIME_MurderType(1,1,0,"SneakMurder_Beast_HighPrio");
DB_CRIME_MurderType(1,1,1,"SneakMurder_Beast_LowPrio");
DB_CRIME_MurderType(1,1,1,"SneakMurder_Beast_HighPrio");

DB_CRIME_ForbiddenItemType("Item",0,"UseForbiddenItem");
DB_CRIME_ForbiddenItemType("Item",1,"UseForbiddenItem");
DB_CRIME_ForbiddenItemType("Lock",0,"Lockpicking");
DB_CRIME_ForbiddenItemType("Lock",1,"SneakLockpicking");
DB_CRIME_ForbiddenItemType("Trap",0,"DisarmingTrap");
DB_CRIME_ForbiddenItemType("Trap",1,"SneakDisarmingTrap");

DB_CRIME_StoryActionHandled_NeverCombine("Murder_Beast_LowPrio", "Murder_Beast_HighPrio");
DB_CRIME_StoryActionHandled_NeverCombine("SneakMurder_Beast_LowPrio", "SneakMurder_Beast_HighPrio");
// Assault
//DB_CRIME_AssaultType(_VictimIsAnimal, _VictimIsMonster, _AssaultType);
DB_CRIME_AssaultType(0, 0, "Assault");
DB_CRIME_AssaultType(0, 1, "Assault_Monster");
DB_CRIME_AssaultType(1, 0, "Assault_Beast_LowPrio");
DB_CRIME_AssaultType(1, 0, "Assault_Beast_HighPrio");
DB_CRIME_AssaultType(1, 1, "Assault_Beast_LowPrio");
DB_CRIME_AssaultType(1, 1, "Assault_Beast_HighPrio");

DB_LinkedCrimes("AssaultRelated","Assault_Silenced");
DB_LinkedCrimes("AssaultRelated","Assault_Monster_Silenced");
DB_LinkedCrimes("AssaultRelated","Assault_FindSourceInvestigators");
DB_LinkedCrimes("AssaultRelated","Assault_FindSourceInvestigators_Beast");
DB_LinkedCrimes("AssaultRelated","Assault_FindSourceInvestigators_Monster");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_Discovered");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_Discovered_Beast");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_Discovered_Monster");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered_WithCrimeScene");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered_Beast_WithCrimeScene");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered_Beast");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered_Monster_WithCrimeScene");
DB_LinkedCrimes("AssaultRelated","Assault_SourceInvestigation_NotDiscovered_Monster");

// Don't fall back to IncapacitatedAssault etc in case the reaction fails
DB_CRIME_Assault_NoFallback("Assault_Zero_Damage");

DB_CRIME_StoryActionHandled_NeverCombine("Assault_Beast_LowPrio", "Assault_Beast_HighPrio");

// Customization for Assault crime
// DB_IgnoreAssault(_NPC) ignores registering Assault crime for _NPC
// DB_IgnoreAssaultFor(_Attacker, _NPC) ignores registering Assault crime for _NPC with _Attacker as an assalient

// Loot corpse (sneak)
DB_CRIME_LootOwnedCorpse("Looting", 	0, "LootOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Looting", 	1, "SneakLootOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Moving",  	0, "MoveOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Moving",  	1, "SneakMoveOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Reanimating",	0, "ReanimateOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Reanimating",	1, "ReanimateOwnedCorpse");
DB_CRIME_LootOwnedCorpse("PickUp",		0, "PickUpOwnedCorpse");
DB_CRIME_LootOwnedCorpse("PickUp",		1, "SneakPickUpOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Drop",		0, "DroppedOwnedCorpse");
DB_CRIME_LootOwnedCorpse("Drop",		1, "SneakDroppedOwnedCorpse");

DB_CRIME_AnimateDeadSpells("Target_AnimateDead");
DB_CRIME_AnimateDeadSpells("Target_AnimateDead_Skeleton");
DB_CRIME_AnimateDeadSpells("Target_AnimateDead_Zombie");

//For Status Reactions
DB_StatusReaction("SMELLY","Smelly");

//Ingnore Vandalise Tags
DB_IgnoreVandaliseTag((TAG)IGNOREVANDALISE_7e9915ff-d7a4-4e52-9ac3-806075102ccc);

//Bribe
DB_CrimeTriggers_GeneralBribeDialog(1,(DIALOGRESOURCE)GEB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Arrest_EscapedPrison_2dc6b458-e9e1-cef9-1e59-a6569c9f6434);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Assault_144fa1cf-fa7d-f974-f52c-3bcd2917706a);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Charmed_fca3d21b-a901-014d-06b9-1051d6015bb6);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_DisarmingTrap_9cb6c541-a4b5-be88-208a-966f84278b99);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Murder_1767b498-2c52-49f4-32e9-c81ddf00d5be);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_PickPocketNoticed_13dbc1e3-6c85-a1a5-bb82-f63ea16c81d4);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Polymorphed_b49cfff0-408e-db7a-aaa0-f564eaada8bf);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Steal_d2280b94-7dce-8760-2eb0-fb26c1f8c9a2);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_Vandalise_6f4f6ced-fafc-90ba-e143-48cd20b08aa9);
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Interrogation_4be383d1-12f3-db9f-b251-883aa758763a);
// This one does not have regular bribing, but we need the DB to be able to use DB_CrimeTriggers_TrespassAccessBribeDialog
DB_CrimeTriggers_GeneralBribeDialog(1,NGB_Warning_Trespassing_fac4011f-ae0d-7dce-ae06-d7f7ecf57415);

DB_CrimeTriggers_TrespassAccessBribeDialog(2,(DIALOGRESOURCE)NGB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc);
DB_CrimeTriggers_TrespassAccessBribeDialog(2,(DIALOGRESOURCE)NGB_Warning_Trespassing_fac4011f-ae0d-7dce-ae06-d7f7ecf57415);

//Pickpocket
DB_CannotPickpocketTags((TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16);
DB_CannotPickpocketTags((TAG)ELEMENTAL_196351e2-ff25-4e2b-8560-222ac6b94a54);
DB_CannotPickpocketTags((TAG)GHOST_3def9d73-7c73-487b-8111-d1df1dce076e);
DB_CannotPickpocketTags((TAG)CONSTRUCT_22e5209c-eaeb-40dc-b6ef-a371794110c2);
DB_CannotPickpocketTags((TAG)SUMMON_26c78224-a4c1-43e4-b943-75e7fa1bfa41);
DB_CannotPickpocketTags((TAG)INTELLECT_DEVOURER_69901347-23cb-4f60-abf3-527f23cdf0db);
DB_CannotPickpocketTags((TAG)DRAGON_95748ad1-cda2-4c0c-a9b2-875899327693);
DB_CannotPickpocketTags((TAG)MYCONID_480f5568-7c49-45e4-9543-7c06e43bdf52);

//Attitude Change
DB_CrimeAttitudeChange("Murder",-30);
DB_CrimeAttitudeChange("Assault",-20);
DB_CrimeAttitudeChange("Steal",-5);
DB_CrimeAttitudeChange("Steal_NoCrimescene",-5);
DB_CrimeAttitudeChange("PickPocketFailed",-5);
DB_CrimeAttitudeChange("PickPocket",-10);
DB_CrimeAttitudeChange("ItemDestroy",-15);
DB_CrimeAttitudeChange("Vandalise",-10);
DB_CrimeAttitudeChange("VandaliseNoOwner",-5);
DB_CrimeAttitudeChange("Trespassing",-5);
DB_CrimeAttitudeChange("UseForbiddenItem",-5);
DB_CrimeAttitudeChange("MoveForbiddenItem",-5);
DB_CrimeAttitudeChange("Assault_Beast_HighPrio",-20);
DB_CrimeAttitudeChange("Assault_Beast_LowPrio",-5);
DB_CrimeAttitudeChange("TeleportPlayerDialog",-5);
DB_CrimeAttitudeChange("Polymorphed",-10);
DB_CrimeAttitudeChange("Charmed",-10);
DB_CrimeAttitudeChange("Polymorphed_SelfReactOnEnd",-10);
DB_CrimeAttitudeChange("Charmed_SelfReactOnEnd",-10);
DB_CrimeAttitudeChange("Lockpicking",-10);
DB_CrimeAttitudeChange("DisarmingTrap",-10);

DB_NeutralTagIgnore((TAG)GHOST_3def9d73-7c73-487b-8111-d1df1dce076e);

DB_Negate(0,1);
DB_Negate(1,0);

DB_IgnoreDamageSources("SurfaceMove");
DB_IgnoreDamageSources("StatusTick");
DB_IgnoreDamageSources("SurfaceStatus");

//crime types that should be kept in sync when the parent crime is enabled/disabled
DB_LinkedCrimes("Assault","Assault_WithInvestigation");
DB_LinkedCrimes("Assault","Assault_Beast_LowPrio");
DB_LinkedCrimes("Assault","Assault_Beast_HighPrio");
DB_LinkedCrimes("Assault","Assault_Monster");
DB_LinkedCrimes("Assault","IncapacitatedAssault");
DB_LinkedCrimes("Assault","IncapacitatedAssault_WithInvestigation");

DB_LinkedCrimes("Murder","Murder_WithInvestigation");
DB_LinkedCrimes("Murder","SneakMurder");
DB_LinkedCrimes("Murder","SneakMurder_WithInvestigation");
DB_LinkedCrimes("Murder","Murder_Beast_LowPrio");
DB_LinkedCrimes("Murder","Murder_Beast_HighPrio");
DB_LinkedCrimes("Murder","SneakMurder_Beast_LowPrio");
DB_LinkedCrimes("Murder","SneakMurder_Beast_HighPrio");
DB_LinkedCrimes("Murder","Murder_Monster");
DB_LinkedCrimes("Murder","SneakMurder_Monster");
DB_LinkedCrimes("Murder","Murder_Beast_HighPrio_WithInvestigation");
DB_LinkedCrimes("Murder","SneakMurder_Beast_HighPrio_WithInvestigation");
DB_LinkedCrimes("Murder","KnockOut");

DB_LinkedCrimes("UseForbiddenItem", "SneakUseForbiddenItem");

DB_LinkedCrimes("Vandalise", "VandaliseNoOwner");
DB_LinkedCrimes("Vandalise", "ItemDestroy");

DB_LinkedCrimes("PickUpEvidence", "PickupEvidence_Unnoticed");

DB_LinkedCrimes("LootOwnedCorpse", "SneakLootOwnedCorpse");

DB_LinkedCrimes("MoveOwnedCorpse", "SneakMoveOwnedCorpse");

DB_LinkedCrimes("DroppedOwnedCorpse","SneakDroppedOwnedCorpse");
DB_LinkedCrimes("DroppedOwnedCorpse","DroppedOwnedCorpse_WithInvestigation");
DB_LinkedCrimes("DroppedOwnedCorpse","SneakDroppedOwnedCorpse_WithInvestigation");

DB_LinkedCrimes("PickUpOwnedCorpse","SneakPickUpOwnedCorpse");

DB_LinkedCrimes("Polymorphed", "Polymorphed_SelfReactOnEnd");

DB_LinkedCrimes("Charmed", "Charmed_SelfReactOnEnd");

DB_LinkedCrimes("Lockpicking", "SneakLockpicking");

DB_LinkedCrimes("DisarmingTrap", "SneakDisarmingTrap");

DB_LinkedCrimes("Steal", "LootOwnedCorpse");
DB_LinkedCrimes("Steal", "SneakLootOwnedCorpse");
DB_LinkedCrimes("Steal", "EmptyPocketNoticed");
DB_LinkedCrimes("Steal", "EmptyPocketNoticedInvestigation");
DB_LinkedCrimes("Steal", "Steal_NoCrimescene");

//crime warning to hostile dialogs
DB_CrimeWarningHostileADs((DIALOGRESOURCE)GEB_Warning_Theft_48c25844-2790-a97a-3d61-2acfb856856a,(DIALOGRESOURCE)GEB_AD_Help_Thief_55853ab9-98fe-64e6-045f-a1a62114e412);

// Apply item effect to user
DB_ItemStatusAffectCharacterOnUse("BURNING");

// Flee crime reactions //Were "CRIME_DialogAD_TinyFlee" and "CRIME_FleeFromUndead" willingly left out? 
DB_CRIME_FleeReaction("CRIME_Flee");
DB_CRIME_FleeReaction("CRIME_FleeWithAD");

//NPC Restoration
NOT DB_CRIME_BlockNPCRestore((CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

DB_Crime_CrimeWarningFlags(1, (FLAG)GEB_CrimeWarning_1_9d8c50f1-f67d-4290-bb41-9616cb482b88);
DB_Crime_CrimeWarningFlags(2, (FLAG)GEB_CrimeWarning_2_4e017c74-10c1-b90f-6d61-969b1bdb8d38);
DB_Crime_CrimeWarningFlags(3, (FLAG)GEB_CrimeWarning_3_b4003dc1-1591-93c9-45b4-3b5d1581423f);

// Disturbances that should trigger combat if the investigator cannot reach the scene
NOT DB_CRIME_SceneUnreachableCombat("");
NOT DB_CRIME_InvestigationNoWalkingTalking(0);
NOT DB_CRIME_InvestigationAD(0,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CRIME_InvestigationCriminalLocation(0,0.0,0.0,0.0);

// Define a custom warning dialogue for a particular NPC/disturbance type combo
NOT DB_CrimeType_CustomWarning((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,"",(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

// Define a custom warning dialogue for this particular crime instance being handled by an NPC
NOT DB_CrimeWarning_CustomDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,0,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

// Indicate that a corpse is owned and should trigger a looting crime
NOT DB_OwnedCorpse((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CustomLootCorpseResponse((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,0);

DB_CRIME_TrespassOsirisAction("CRIME_OsirisTrespassReaction");
DB_CRIME_TrespassOsirisAction("CRIME_OsirisTrespassArrest");

// By default, you can persuade/bribe your way into permanent access into a trespass trigger. Set this DB to disable it.
NOT DB_CRIME_TrespassNoPermanentAccess((TRIGGER)NULL_00000000-0000-0000-0000-000000000000);

// summon/wildshape crimes which require npc to address owner or nearby player instead of the summon/wildshape
DB_CRIME_AddressOwnerWithCombatFallback("Assault");
DB_CRIME_AddressOwnerWithCombatFallback("Murder");
DB_CRIME_AddressOwnerWithCombatFallback("Steal");
DB_CRIME_AddressOwnerWithCombatFallback("Vandalise");
DB_CRIME_AddressOwnerWithCombatFallback("Guard_ArrestPatrol");

DB_CRIME_AddressOwnerWithCombatFallback_Action("CRIME_OsirisReaction");

// Generic reactions related to self-preservation rather than to confronting players
DB_CRIME_SelfPreservation("SelfHealing");

NOT DB_HandledRequest((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, 0);
KBSECTION
//REGION Disable crime system
IF
TextEvent("nonewcrimes")
THEN
ShutdownCrimeSystem();
//END_REGION

//REGION Evidence value helpers
QRY
QRY_CRIME_GetEvidenceCompensationValue((INTEGER)_CrimeID)
AND
DB_QRYRTN_CRIME_GetEvidenceCompensationValue(_Value)
THEN
NOT DB_QRYRTN_CRIME_GetEvidenceCompensationValue(_Value);

QRY
QRY_CRIME_GetEvidenceCompensationValue((INTEGER)_CrimeID)
AND
CrimeGetEvidenceValue(_CrimeID,_GoldValue)
AND
IntegerProduct(_GoldValue,2,_Compensation)
AND
_Compensation >= 10
THEN
DB_QRYRTN_CRIME_GetEvidenceCompensationValue(_Compensation);

QRY
QRY_CRIME_GetEvidenceCompensationValue((INTEGER)_CrimeID)
AND
NOT DB_QRYRTN_CRIME_GetEvidenceCompensationValue(_)
THEN
DB_QRYRTN_CRIME_GetEvidenceCompensationValue(10);
//END_REGION

//REGION Temporary hostility
// If the NPC is in a dialog while they need to react, stop their dialog (can happen if the normal dialog
// reaction can't happen because the attacker is in combat)
PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, -1, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND	
DB_InteractiveDialogSpeaker(_Instance, _Char)
AND
NOT DB_DialogEnding(_,_Instance)
AND
QRY_TryStopDialogFor(_Char)
THEN
// Temporary hostile relations set while in an interactive dialog are silently discarded
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal);

// Same for criminal (e.g. in case of an Anubis hostility reaction to a player in an interactive dialog)
PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, -1, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND	
DB_InteractiveDialogSpeaker(_Instance, _Criminal)
AND
NOT DB_DialogEnding(_,_Instance)
AND
QRY_TryStopDialogFor(_Criminal)
THEN
// Temporary hostile relations set while in an interactive dialog are silently discarded
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal);

// If we know they're in a dialog, just wait for that dialog to end
PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, (INTEGER)_DialogInstanceID, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
_DialogInstanceID != -1
THEN
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_DialogInstanceID, _CrimeID, _Char, _Criminal);

IF
DialogEnded(_, _Instance)
AND
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal)
THEN
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char,_Criminal);
// Try again
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID, -1, _Char, _Criminal);

PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, (INTEGER)_DialogInstanceID, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_, _, _Char, _Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_SetRelationTemporaryHostile(_Char, _Criminal);

PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, -1, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_, _ , _Char,_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, "Story");

PROC
PROC_CRIME_SetRelationTemporaryHostile((INTEGER)_CrimeID, (INTEGER)_DialogInstanceID, (CHARACTER)_Char, (CHARACTER)_Criminal)
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_, _, _Char, _Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
_DialogInstanceID != -1
AND
DialogIsCrimeDialog(_DialogInstanceID, 1)
THEN
DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, "Story");

IF
DualEntityEvent((CHARACTER)_Char, (CHARACTER)_Criminal, "CRIME_AnubisTemporaryHostile")
AND
DB_InteractiveDialogSpeaker(_Instance, _Char)
AND
GetHandlingCrimeID(_Char, _CrimeID)
THEN
// No need to stop the dialog for the criminal here, we always force-stop dialogs when an Anubis
// reaction triggers (See region "Stopping Dialogs for Anubis reactions" in this goal)
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal);

IF
DualEntityEvent((CHARACTER)_Char, (CHARACTER)_Criminal, "CRIME_AnubisTemporaryHostile")
AND
DB_InteractiveDialogSpeaker(_Instance, _Criminal)
AND
GetHandlingCrimeID(_Char, _CrimeID)
AND
QRY_TryStopDialogFor(_Criminal)
THEN
DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal);

IF
DualEntityEvent((CHARACTER)_Char, (CHARACTER)_Criminal, "CRIME_AnubisTemporaryHostile")
AND
DB_InteractiveDialogSpeaker(_Instance, _Criminal)
AND
GetHandlingCrimeID(_Char, _CrimeID)
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_Instance, _CrimeID, _Char, _Criminal)
THEN
// Failed to stop the dialog -> abort confrontation since we won't be able to start combat
CrimeConfrontationDone(_CrimeID, _Char);

IF
DualEntityEvent((CHARACTER)_Char, (CHARACTER)_Criminal, "CRIME_AnubisTemporaryHostile")
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_, _, _Char, _Criminal)
AND
GetHandlingCrimeID(_Char, _CrimeID)
THEN
DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, "Anubis");

IF
DualEntityEvent((CHARACTER)_Char, (CHARACTER)_Criminal, "CRIME_AnubisTemporaryHostile")
AND
NOT DB_CRIME_TemporaryHostileWaitingForDialogEnd(_, _, _Char, _Criminal)
THEN
PROC_RegisterTemporaryHostileRequest(_Char, _Criminal);

// If we stop handling the current crime while waiting for a temporary hostile relation to kick in,
// make sure we don't call confrontation done for a different crime that we might start handling
// afterwards
IF
OnCrimeInvestigatorSwitchedState(_, _Char, _, "Idle")
AND
DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, _Origin)
THEN
NOT DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, _Origin);

IF
EnteredCombat(_Obj,_)
AND
DB_CRIME_TemporaryRelationPending((CHARACTER)_Obj, _Criminal, _CrimeID, "Story")
THEN
DB_Crime_PlayerAttacked(_CrimeID,_Criminal,_Obj);
PROC_CRIME_HandlePendingCombatHandle(_Obj);

IF
EnteredCombat(_Obj,_)
AND
DB_CRIME_TemporaryRelationPending((CHARACTER)_Obj, _Criminal, _CrimeID, "Anubis")
THEN
DB_Crime_PlayerAttacked(_CrimeID,_Criminal,_Obj);
NOT DB_CRIME_TemporaryRelationPending((CHARACTER)_Obj, _Criminal, _CrimeID, "Anubis");

IF
EnterCombatFailed(_Obj,_)
AND
DB_CRIME_TemporaryRelationPending((CHARACTER)_Obj, _, _, _)
THEN
PROC_CRIME_HandlePendingCombatHandle(_Obj);

PROC
PROC_CRIME_HandlePendingCombatHandle((CHARACTER)_Char)
AND
DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, _Origin)
THEN
NOT DB_CRIME_TemporaryRelationPending(_Char, _Criminal, _CrimeID, _Origin);
CrimeConfrontationDone(_CrimeID, _Char);

PROC
PROC_CRIME_MakeTemporaryHostileToCriminalsOf((CHARACTER)_Char, (INTEGER)_CrimeID)
AND
CrimeGetCriminalsCount(_CrimeID, _CriminalsCount)
AND
QRY_DoNTimes(_CriminalsCount)
AND
DB_QRY_RTN_DoNTimes(_Index)
AND
CrimeGetCriminal(_CrimeID, _Index, _Criminal)
THEN
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID, -1, _Char, _Criminal);
//END_REGION

//REGION Crime families
QRY
QRY_CRIME_IsCrimeFamilyMember((STRING)_Crime,(STRING)_CrimeOrFamily)
AND
_Crime == _CrimeOrFamily
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsCrimeFamilyMember((STRING)_Crime,(STRING)_CrimeOrFamily)
AND
DB_LinkedCrimes(_CrimeOrFamily,_Crime)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_GetCrimeFamily((STRING)_Crime)
AND
DB_QRYRTN_CRIME_GetCrimeFamily(_Family)
THEN
NOT DB_QRYRTN_CRIME_GetCrimeFamily(_Family);

QRY
QRY_CRIME_GetCrimeFamily((STRING)_Crime)
AND
DB_LinkedCrimes(_Family,_Crime)
THEN
DB_QRYRTN_CRIME_GetCrimeFamily(_Family);

QRY
QRY_CRIME_GetCrimeFamily((STRING)_Crime)
AND
NOT DB_QRYRTN_CRIME_GetCrimeFamily(_)
THEN
DB_QRYRTN_CRIME_GetCrimeFamily(_Crime);
//END_REGION

//REGION Investigation variants of assault/murder crimes
QRY
QRY_CRIME_TreatAsAssaultMurder((STRING)_Crime)
AND
QRY_CRIME_IsCrimeFamilyMember(_Crime, "Assault")
THEN
DB_NOOP(1);

QRY
QRY_CRIME_TreatAsAssaultMurder((STRING)_Crime)
AND
QRY_CRIME_IsCrimeFamilyMember(_Crime, "Murder")
THEN
DB_NOOP(1);

QRY
QRY_CRIME_TreatAsAssaultMurder((STRING)_Crime)
AND
QRY_CRIME_IsCrimeFamilyMember(_Crime, "DroppedOwnedCorpse")
THEN
DB_NOOP(1);

QRY
QRY_CRIME_TreatAsAssaultMurderWithInvestigation((STRING)_Crime)
AND
QRY_CRIME_TreatAsAssaultMurder(_Crime)
AND
IsSubstring(_Crime,"_WithInvestigation",1)
THEN
DB_NOOP(1);


QRY
QRY_CRIME_GetAssaultMurderWithInvestigationVariant_Reset()
AND
DB_QRYRTN_CRIME_GetAssaultMurderWithInvestigationVariant(_Variant)
THEN
NOT DB_QRYRTN_CRIME_GetAssaultMurderWithInvestigationVariant(_Variant);

QRY
QRY_CRIME_GetAssaultMurderWithInvestigationVariant_Reset()
THEN
DB_NOOP(1);

QRY
QRY_CRIME_GetAssaultMurderWithInvestigationVariant((STRING)_Crime)
AND
QRY_CRIME_GetAssaultMurderWithInvestigationVariant_Reset()
AND
Concatenate(_Crime,"_WithInvestigation",_CrimeWithInvestigation)
AND
QRY_CRIME_TreatAsAssaultMurder(_CrimeWithInvestigation)
THEN
DB_QRYRTN_CRIME_GetAssaultMurderWithInvestigationVariant(_CrimeWithInvestigation);
//END_REGION

//REGION Register crime wrapper to  handle ignoring crimes
// Built-in:
// * DB_AssaultIgnoreFor(_Witness, _Victim): _Witness ignores all Assault crimes against victim
// * DB_AssaultFamilyIgnoreFor((CHARACTERGUID)_AnyWitness,(CHARACTERGUID)_Victim): _Witness ignores all Assault-like crimes against victim
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,"Assault",(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
AND
DB_AssaultIgnoreFor((CHARACTER)_AnyWitness,(CHARACTER)_Victim)
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);

PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
AND
DB_AssaultFamilyIgnoreFor((CHARACTER)_AnyWitness,(CHARACTER)_Victim)
AND
QRY_CRIME_IsCrimeFamilyMember(_CrimeType,"Assault")
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);

// Register the crime
QRY
QRY_CRIME_GetValidCrimeID((INTEGER)_CrimeID)
AND
DB_QRYRTN_CRIME_GetValidCrimeID(_PreviousCrimeID)
THEN
NOT DB_QRYRTN_CRIME_GetValidCrimeID(_PreviousCrimeID);

QRY
QRY_CRIME_GetValidCrimeID((INTEGER)_CrimeID)
AND
_CrimeID != 0
THEN
DB_QRYRTN_CRIME_GetValidCrimeID(_CrimeID);

QRY
QRY_CRIME_GetValidCrimeID(0)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_QRYRTN_CRIME_GetValidCrimeID(_CrimeID);

PROC
PROC_CharacterRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
THEN
PROC_CharacterRegisterCrime(_Char,_CrimeType,-1,_Evidence,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
QRY_CRIME_GetValidCrimeID(_CrimeID)
AND
DB_QRYRTN_CRIME_GetValidCrimeID(_ValidCrimeID)
THEN
PROC_CharacterRegisterCrimeInternal(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_ValidCrimeID);

PROC
PROC_CharacterRegisterCrimeInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID)
AND
NOT QRY_CRIME_StoryActionHandled(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID)
AND
CharacterRegisterCrime(_Char,_CrimeType,_Evidence,_Victim,_CrimeID,1)
THEN
DB_CrimeRegistered(_CrimeID);

QRY
QRY_CRIME_BlockRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
QRY_CRIME_BlockRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_BlockRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
1 == 0
THEN
DB_NOOP(1);

QRY
QRY_CRIME_BlockRegisterCrime((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
CrimeTypeHasProperty(_CrimeType,(DISTURBANCEPROPERTY)BlockIfPlayerInCombat_54bd8dce-9b1b-42f0-bca2-57ba21ad81a4,1)
AND
DB_PartyMembers(_Char)
AND
DB_Is_InCombat(_Char,_)
THEN
DB_NOOP(1);

PROC
PROC_CharacterRegisterCrimeWithPosition((CHARACTER)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID)
THEN
PROC_CharacterRegisterCrimeWithPosition(_Char,_CrimeType,-1,_Evidence,_X,_Y,_Z,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrimeWithPosition((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
QRY_CRIME_GetValidCrimeID(_CrimeID)
AND
DB_QRYRTN_CRIME_GetValidCrimeID(_ValidCrimeID)
THEN
PROC_CharacterRegisterCrimeWithPositionInternal(_Char,_CrimeType,_StoryActionID,_Evidence,_X,_Y,_Z,_Victim,_ValidCrimeID);

PROC
PROC_CharacterRegisterCrimeWithPositionInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char, _CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID)
AND
NOT QRY_CRIME_StoryActionHandled(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID)
AND
CharacterRegisterCrimeWithPosition(_Char,_CrimeType,_Evidence,_Victim,_X,_Y,_Z,_CrimeID,1)
THEN
DB_CrimeRegistered(_CrimeID);

// if the crime is blocked
PROC
PROC_CharacterRegisterCrimeWithPositionInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
NOT DB_CrimeRegistered(_CrimeID)
THEN
PROC_CharacterRegisterCrime_Blocked(_Char, _CrimeType, _StoryActionID, _Evidence, _Victim, _CrimeID);

PROC
PROC_CharacterRegisterCrimeInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
NOT DB_CrimeRegistered(_CrimeID)
THEN
PROC_CharacterRegisterCrime_Blocked(_Char, _CrimeType, _StoryActionID, _Evidence, _Victim, _CrimeID);

PROC
PROC_CharacterRegisterCrime_Blocked((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
THEN
DB_NOOP(1);


PROC
PROC_CharacterRegisterCrimeInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CrimeRegistered(_CrimeID)
THEN
NOT DB_CrimeRegistered(_CrimeID);
PROC_CharacterRegisterCrimeHandleIgnoresAfter(_CrimeID,_Char,_CrimeType,_Evidence,_Victim);
PROC_CharacterRegisterCrime_Success(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrimeWithPositionInternal((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CrimeRegistered(_CrimeID)
THEN
NOT DB_CrimeRegistered(_CrimeID);
PROC_CharacterRegisterCrimeHandleIgnoresAfter(_CrimeID,_Char,_CrimeType,_Evidence,_Victim);
PROC_CharacterRegisterCrime_Success(_Char,_CrimeType,_StoryActionID,_Evidence,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
THEN
DB_NOOP(1);


// Ignore the crime for the silent witnesses (they will also ignore it in case they were not a witness
// and discover the crime scene later on) and then re-enable the crime for them
PROC
PROC_CharacterRegisterCrimeHandleIgnoresAfter((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
THEN
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime(_CrimeID,_Perpetrator,_CrimeType,_Evidence,_Victim);

PROC
PROC_CharacterRegisterCrimeHandleIgnoresAfter((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
AND
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness)
THEN
CrimeIgnoreCrime(_CrimeID,_AnyWitness);
NOT DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);
//END_REGION

//REGION Stopping Dialogs for Anubis reactions
IF
CharacterOnCrimeSensibleActionNotification(_NPC,_Region,_CrimeID,_CrimeName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_)
AND
Substring(_CrimeName,1,12,_CrimeNamePrefix)
AND
_CrimeNamePrefix != "CRIME_Osiris"
AND
Substring(_CrimeName,1,15,_CrimeNamePrefix2)
AND
_CrimeNamePrefix2 != "CRIME_DoNothing"
AND
Substring(_CrimeName,1,17,_CrimeNamePrefix3)
AND
_CrimeNamePrefix3 != "CRIME_SelfHealing"
THEN
PROC_TryStopDialogFor(_NPC);
//END_REGION

//REGION Anubis disturbance disabling
IF
CrimeDisabled(_Char,_Crime)
AND
_Crime != ""
THEN
PROC_CharacterDisableCrime(_Char,_Crime);

IF
CrimeEnabled(_Char,_Crime)
AND
_Crime != ""
THEN
PROC_CharacterEnableCrime(_Char,_Crime);
//END_REGION

//REGION Crime Enabling/Disabling
PROC
PROC_CharacterDisableAllCrimes((CHARACTER)_Char)
THEN
PROC_CharacterDisableAllCrimes((CHARACTER)_Char, 0);

PROC
PROC_CharacterDisableAllCrimes((CHARACTER)_Char, (INTEGER)_IncludingSelfPreservation)
THEN
DB_CharacterAllCrimesDisabled(_Char);
CharacterDisableAllCrimes(_Char);

PROC
PROC_CharacterDisableAllCrimes((CHARACTER)_Char, (INTEGER)_IncludingSelfPreservation)
AND
DB_CharacterCrimeEnabled(_Char,_Crime)
THEN
// CharacterDisableAllCrimes(_Char) disables all reactions in code, so mirror here
NOT DB_CharacterCrimeEnabled(_Char,_Crime);

PROC
PROC_CharacterDisableAllCrimes((CHARACTER)_Char, 0)
AND
DB_CRIME_SelfPreservation(_Behaviour)
AND
NOT DB_CharacterCrimeDisabled(_Char, _Behaviour)
THEN
PROC_CharacterEnableCrime(_Char, _Behaviour);

PROC
PROC_CharacterEnableAllCrimes((CHARACTER)_Char)
THEN
NOT DB_CharacterAllCrimesDisabled(_Char);
CharacterEnableAllCrimes(_Char);

PROC
PROC_CharacterEnableAllCrimes((CHARACTER)_Char)
AND
DB_CharacterCrimeDisabled(_Char,_Crime)
THEN
// CharacterEnableAllCrimes(_Char) disables all reactions in code, so mirror here
NOT DB_CharacterCrimeDisabled(_Char,_Crime);

PROC
PROC_CharacterEnableCrime((CHARACTER)_Char,(STRING)_Crime)
THEN
DB_CharacterCrimeEnabled(_Char,_Crime);
CharacterEnableCrime(_Char,_Crime);

PROC
PROC_CharacterDisableCrime((CHARACTER)_Char,(STRING)_Crime)
THEN
DB_CharacterCrimeDisabled(_Char,_Crime);
CharacterDisableCrime(_Char,_Crime);

IF
DB_CharacterCrimeEnabled(_Char,_Crime)
THEN
NOT DB_CharacterCrimeDisabled(_Char,_Crime);

IF
DB_CharacterCrimeDisabled(_Char,_Crime)
THEN
NOT DB_CharacterCrimeEnabled(_Char,_Crime);

QRY
QRY_CRIME_IsEnabled((CHARACTER)_Char, (STRING)_Crime)
AND
DB_CharacterCrimeEnabled(_Char,_Crime)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsEnabled((CHARACTER)_Char, (STRING)_Crime)
AND
NOT DB_CharacterAllCrimesDisabled(_Char)
AND
NOT DB_CharacterCrimeDisabled(_Char,_Crime)
THEN
DB_NOOP(1);

//END_REGION

//REGION Warning
// Allow changing/blocking the warning dialog
//  - DB_CrimeType_CustomWarning: always use this dialogue for this NPC/crime type (until that DB is manually cleared)
//  - DB_CrimeWarning_CustomDialog: use this dialogue for the current NPC and current crime (next time it will use the default dialogue again)
//  - DB_CrimeWarning_Block: block the warning dialog for the current NPC and current crime (next time it won't be blocked by default)
QRY
QRY_CrimeGetCustomWarning((CHARACTER)_Warner,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog, (INTEGER)_CrimeID)
THEN
SysClear("DB_CrimeWarning_Block", 4);

// Crime Warning Request events

// Normal flow, don't need to search for summon owner
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
QRY_CRIME_GetCrimeFamily(_CrimeName)
AND
DB_QRYRTN_CRIME_GetCrimeFamily(_CrimeFamily)
AND
NOT DB_CRIME_AddressOwnerWithCombatFallback(_CrimeFamily)
THEN
PROC_CRIME_OsirisReaction(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

// Summon/wildshape flow, try to find summon owner or other criminal to address
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,_Action,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
DB_CRIME_AddressOwnerWithCombatFallback_Action(_Action)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
QRY_CRIME_GetCrimeFamily(_CrimeName)
AND
DB_QRYRTN_CRIME_GetCrimeFamily(_CrimeFamily)
AND
DB_CRIME_AddressOwnerWithCombatFallback(_CrimeFamily)
AND
NOT QRY_CRIME_OsirisReaction_TryAddressOwner(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
PROC_CRIME_OsirisReaction_TryAddressOwnerFailed(_Warner,_CrimeID,_CrimeName,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CRIME_OsirisReaction_TryAddressOwnerFailed((CHARACTER)_Warner,(INTEGER)_CrimeID,(STRING)_CrimeName,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT QRY_CRIME_Guards_IsCivilianOrKid(_Warner)
AND
NOT QRY_CRIME_StealingFromVictimInCombat(_Warner,_CrimeID,_CrimeName)
THEN
DB_CRIME_OsirisReaction_CombatFallbackTriggered(_Warner,_CrimeID,_CrimeName);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,-1,_Warner,_Criminal1);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,-1,_Warner,_Criminal2);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,-1,_Warner,_Criminal3);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,-1,_Warner,_Criminal4);

PROC
PROC_CRIME_OsirisReaction_TryAddressOwnerFailed((CHARACTER)_Warner,(INTEGER)_CrimeID,(STRING)_CrimeName,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CRIME_OsirisReaction_CombatFallbackTriggered(_,_,_)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
PROC_CRIME_OsirisReaction_TryAddressOwnerFailed((CHARACTER)_Warner,(INTEGER)_CrimeID,(STRING)_CrimeName,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_CRIME_OsirisReaction_CombatFallbackTriggered(_Warner,_CrimeID,_CrimeName)
THEN
NOT DB_CRIME_OsirisReaction_CombatFallbackTriggered(_Warner,_CrimeID,_CrimeName);

QRY
QRY_CRIME_StealingFromVictimInCombat((CHARACTER)_Warner,(INTEGER)_CrimeID,(STRING)_CrimeName)
AND
DB_QRYRTN_CRIME_StealingFromVictimInCombat(_Warner,_CrimeID,_Criminal,_Victim)
THEN
NOT DB_QRYRTN_CRIME_StealingFromVictimInCombat(_Warner,_CrimeID,_Criminal,_Victim);

QRY
QRY_CRIME_StealingFromVictimInCombat((CHARACTER)_Warner,(INTEGER)_CrimeID,(STRING)_CrimeName)
AND
QRY_CRIME_IsCrimeFamilyMember(_CrimeName,"Steal")
AND
CrimeGetCriminalsCount(_CrimeID, _CriminalsCount)
AND
QRY_DoNTimes(_CriminalsCount)
AND
DB_QRY_RTN_DoNTimes(_Index)
AND
NOT DB_QRYRTN_CRIME_StealingFromVictimInCombat(_,_,_,_)
AND
CrimeGetCriminal(_CrimeID, _Index, _Criminal)
AND
DB_Is_InCombat(_Criminal,_CombatID)
AND
CrimeGetVictim(_CrimeID,_Victim)
AND
QRY_CRIME_StealingFromVictimInCombat_Internal(_CrimeID,_Criminal,_Victim)
THEN
DB_QRYRTN_CRIME_StealingFromVictimInCombat(_Warner,_CrimeID,_Criminal,_Victim);

QRY
QRY_CRIME_StealingFromVictimInCombat_Internal((INTEGER)_CrimeID,(CHARACTER)_Criminal,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Victim,_CombatID)
AND
QRY_GLO_IsOrWasInCombat(_Criminal,_CombatID)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_StealingFromVictimInCombat_Internal((INTEGER)_CrimeID,(CHARACTER)_Criminal,(CHARACTER)_Victim)
AND
DB_Was_InCombat(_Victim,_CombatID)
AND
QRY_GLO_IsOrWasInCombat(_Criminal,_CombatID)
THEN
DB_NOOP(1);

PROC
PROC_CRIME_SelectOsirisAction((CHARACTER)_Warner,"CRIME_OsirisReaction",(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
PROC_CRIME_OsirisReaction(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal1)
THEN
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);
PROC_CRIME_SelectOsirisAction(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal2)
THEN
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);
PROC_CRIME_SelectOsirisAction(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal2,_Criminal1,_Criminal3,_Criminal4);

QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal3)
THEN
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);
PROC_CRIME_SelectOsirisAction(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal3,_Criminal2,_Criminal1,_Criminal4);

QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal4)
THEN
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);
PROC_CRIME_SelectOsirisAction(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal4,_Criminal2,_Criminal3,_Criminal1);

// Summon owner
QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
IsSummon(_Criminal1,1)
AND
CharacterGetOwner(_Criminal1,_Criminal1Owner)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal1Owner)
AND
QRY_SpeakerIsAvailableAndInDialogRange(_Criminal1Owner,_Warner)
AND
CanSee(_Warner,_Criminal1Owner,1)
THEN
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);
PROC_CRIME_SelectOsirisAction(_Warner,_Action,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1Owner,_Criminal1,_Criminal2,_Criminal3);

// if DB has a record, then one of previous QRYs succeeded and we don't change QRY return value here
QRY
QRY_CRIME_OsirisReaction_TryAddressOwner((CHARACTER)_Warner,(STRING)_Action,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1)
THEN
NOT DB_CRIME_TryAdressOwner_NonSummonCriminalFound(1);

PROC
PROC_CRIME_OsirisReaction((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
QRY_CrimeGetCustomWarning((CHARACTER)_Warner,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog, _CrimeID)
THEN
PROC_CrimeSelectWarning(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

//--- Generic Warning:
PROC
PROC_CrimeSelectWarning((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, (INTEGER)_)
AND
NOT DB_CrimeType_CustomWarning(_Warner,_CrimeName,(DIALOGRESOURCE)_)
AND
NOT DB_CrimeWarning_CustomDialog(_Warner, _CrimeID, _)
THEN
PROC_CrimeCheckCrimeTypeForFlags(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeName,_WarningDialog);
PROC_CrimeSetupWarning(_CrimeRegion,_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
DB_CRIME_StartingWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
PROC_CrimeWarningTryStopDialogs(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);

//--- Custom Warning:
PROC
PROC_CrimeSelectWarning((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, _)
AND
NOT DB_CrimeWarning_CustomDialog(_Warner, _CrimeID, _)
AND
DB_CrimeType_CustomWarning(_Warner,_CrimeName,_CustomDialog)
THEN
PROC_CrimeCheckCrimeTypeForFlags(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeName,_CustomDialog);
PROC_CrimeSetupWarning(_CrimeRegion,_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
DB_CRIME_StartingWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
PROC_CrimeWarningTryStopDialogs(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);

PROC
PROC_CrimeSelectWarning((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, _)
AND
DB_CrimeWarning_CustomDialog(_Warner, _CrimeID, _CustomDialog)
THEN
PROC_CrimeCheckCrimeTypeForFlags(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeName,_CustomDialog);
PROC_CrimeSetupWarning(_CrimeRegion,_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
DB_CRIME_StartingWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
PROC_CrimeWarningTryStopDialogs(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);

PROC
PROC_CrimeSelectWarning((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_CrimeWarning_CustomDialog(_Warner, _CrimeID, _CustomDialog)
THEN
NOT DB_CrimeWarning_CustomDialog(_Warner, _CrimeID, _CustomDialog);

PROC
PROC_CRIME_DialogsStoppedCallback("Warning",(INTEGER)_CrimeID)
AND
DB_CRIME_StartingWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog)
THEN
NOT DB_CRIME_StartingWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
PROC_CrimeCheckStartedWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);

PROC
PROC_CRIME_OsirisReaction((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, 1)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
PROC_CRIME_OsirisReaction((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, _Resolve)
THEN
NOT DB_CrimeWarning_Block(_Warner, _CrimeName, _WarningDialog, _Resolve);

//--- 1) Prepare a DB and set flag
PROC
PROC_CrimeCheckCrimeTypeForFlags((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(STRING)_CrimeType,(DIALOGRESOURCE)_WarningDialog)
AND
QRY_CRIME_GetCrimeFamily(_CrimeType)
AND
DB_QRYRTN_CRIME_GetCrimeFamily(_Family)
THEN
PROC_CrimeSetupCountFlag(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Family,_WarningDialog);

PROC
PROC_CrimeSetupCountFlag((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(STRING)_CrimeType,(DIALOGRESOURCE)_WarningDialog)
AND
CrimeHasProperty(_CrimeID,BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c,0)
THEN
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeSetupCountFlag((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(STRING)_CrimeType,(DIALOGRESOURCE)_WarningDialog)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_,_,_,_)
THEN
PROC_CrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal1);
PROC_CrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal2);
PROC_CrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal3);
PROC_CrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal4);

PROC
PROC_CrimeSetupCountFlag_ForEachCriminal((STRING)_CrimeType,(CHARACTER)_Warner,(CHARACTER)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
NOT DB_Crime_WarningCount(_,_CrimeType,_Criminal,_Warner) // DB doesn't exist yet, meaning the player has never been warned by that NPC with that dialog (i.e. for that crime)
THEN
DB_Crime_WarningCount(1,_CrimeType,_Criminal,_Warner);

PROC
PROC_CrimeSetupCountFlag_ForEachCriminal((STRING)_CrimeType,(CHARACTER)_Warner,(CHARACTER)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
DB_Crime_WarningCount(_Pos,_CrimeType,_Criminal,_Warner)
AND
DB_Crime_CrimeWarningFlags(_Pos, _Flag)
THEN
SetFlag((FLAG)_Flag, _Criminal); // flagType: Object

IF
DialogEnded(_Dialog,_ID)
AND
DB_TemporaryHostilityAfterDialog(_,_ID)
AND
DB_CrimeWarningHostileADs(_Dialog,_AD)
AND
DB_DialogNPCs(_ID,_NPC,1)
THEN
PROC_TryStartAD(_AD,_NPC);

//--- 2) Set variables in the Warner's script
PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
THEN
ClearFlag((FLAG)GEB_CrimeHasEvidenceInInventory_fd3befa0-8717-2e5a-76fd-0e1f4a1e6176, _Criminal1); // flagType: Object
ClearFlag((FLAG)GEB_Crime_IsVictim_5e9f6262-7bab-4e25-894e-32ee674208b2,_Warner);
ClearFlag((FLAG)GEB_Crime_IsVictim_5e9f6262-7bab-4e25-894e-32ee674208b2,_Criminal1);

PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
CrimeGetType(_CrimeID,_CrimeType)
AND
QRY_CRIME_IsCrimeFamilyMember(_CrimeType,"Steal")
AND
CrimeFindEvidence(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_NumEvidence,_,_)
AND
_NumEvidence > 0
THEN
SetFlag((FLAG)GEB_CrimeHasEvidenceInInventory_fd3befa0-8717-2e5a-76fd-0e1f4a1e6176, _Criminal1); // flagType: Object

PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
CrimeGetVictim(_CrimeID,_Victim)
AND
_Warner == _Victim
THEN
SetFlag((FLAG)GEB_Crime_IsVictim_5e9f6262-7bab-4e25-894e-32ee674208b2,_Warner);

PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
CrimeGetVictim(_CrimeID,_Victim)
AND
_Criminal1 == _Victim
THEN
SetFlag((FLAG)GEB_Crime_IsVictim_5e9f6262-7bab-4e25-894e-32ee674208b2,_Criminal1);

PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
DB_DialogMoneyTransfer(2,_WarningDialog,_Compensation)
THEN
NOT DB_DialogMoneyTransfer(2,_WarningDialog,_Compensation);

// Compensation for vandalising
PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
CrimeGetType(_CrimeID,_CrimeType)
AND
QRY_CRIME_GetCrimeFamily(_CrimeType)
AND
DB_QRYRTN_CRIME_GetCrimeFamily("Vandalise")
AND
QRY_CRIME_GetEvidenceCompensationValue(_CrimeID)
AND
DB_QRYRTN_CRIME_GetEvidenceCompensationValue(_Compensation)
THEN
// Index 1 is used for bribing (if any)
DB_DialogMoneyTransfer(2,_WarningDialog,_Compensation);
DB_DialogMoneyTransfer_ForInstance(2,_WarningDialog,_Warner);

PROC
PROC_CrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
THEN
PROC_CrimeSetupWarning_Custom((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog);

PROC
PROC_CrimeSetupWarning_Custom((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
THEN
DB_NOOP(1);

//--- 3) Try to stop the warner's dialog
PROC
PROC_CrimeWarningTryStopDialogs((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
_WarningDialog != NULL_00000000-0000-0000-0000-000000000000
AND
DialogIsAutomated(_WarningDialog, _Automated)
AND
DB_Negate(_Automated, _Interactive)
THEN
PROC_CrimeInterruptStoryDialogs("Warning",_CrimeID,_WarningDialog,_Interactive,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeWarningTryStopDialogs((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
_WarningDialog == NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_CRIME_DialogsStoppedCallback("Warning",_CrimeID);

PROC
PROC_CrimeWarningTryStopDialogs((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
_WarningDialog != NULL_00000000-0000-0000-0000-000000000000
AND
// In case the resource does not exist, this query could fail in any case
NOT DialogIsAutomated(_WarningDialog, _)
THEN
PROC_CRIME_DialogsStoppedCallback("Warning",_CrimeID);

//--- 4) Verify if the crime dialog succeeded to start and clean up
PROC
PROC_CrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_WarningCount(_Pos,_Dialog,_Player,_Warner)
AND
DB_Crime_CrimeWarningFlags(_Pos, _Flag)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ClearFlag((FLAG)_Flag, _Player, 0); // flagType: Object

PROC
PROC_CrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
PROC_CrimeFailedToInterruptStoryDialog(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
PROC_CrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeIsContinuous(_CrimeID,1)
THEN
PROC_CrimeFailedToInterruptStoryDialog(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC // Useful for custom scripting
PROC_CrimeFailedToInterruptStoryDialog((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
THEN
DB_NOOP(1);

PROC
PROC_CrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_AnyCrimeID,_AnyWarningDialog,_AnyWarner,_AnyCriminal1,_AnyCriminal2,_AnyCriminal3,_AnyCriminal4) // Clean up anything that could have failed previously
THEN
NOT DB_Crime_FailedToInterruptStoryDialogs(_AnyCrimeID,_AnyWarningDialog,_AnyWarner,_AnyCriminal1,_AnyCriminal2,_AnyCriminal3,_AnyCriminal4);


//--- Count the warnings done:
IF
DialogEnded(_Dialog,_Inst)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTER)_Player,_Warner)
AND
DB_Crime_CrimeWarningFlags(_Pos, _Flag)
AND
GetFlag((FLAG)_Flag, _Player, 1) // flagType: Object
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ClearFlag((FLAG)_Flag, _Player, 0); // flagType: Object
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);

IF
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner)
AND
_NewPos > 3
THEN
NOT DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(3,_CrimeType,_Player,_Warner);

PROC
PROC_ConfrontationDoneAfterDialog((INTEGER)_CrimeID,(CHARACTER)_Warner,(INTEGER)_DialogID)
AND
NOT DB_Crime_NoConfrontationDoneAfterDialog(_Warner,_DialogID)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
PROC_ConfrontationDoneAfterDialog((INTEGER)_CrimeID,(CHARACTER)_Warner,(INTEGER)_DialogID)
THEN
NOT DB_Crime_NoConfrontationDoneAfterDialog(_Warner,_DialogID);

// players were in the dialog
IF
DialogEnded(_,_Instance)
AND
DB_TemporaryHostilityAfterDialog(_NPC,_Instance)
AND
DialogIsCrimeDialog(_Instance,1)
AND
DB_DialogPlayers(_Instance,_Player,1)
AND
GetHandlingCrimeID((CHARACTER)_NPC, _CrimeID)
THEN
NOT DB_TemporaryHostilityAfterDialog(_NPC,_Instance);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID, -1, _NPC, (CHARACTER)_Player);
DB_Crime_NoConfrontationDoneAfterDialog(_Npc,_Instance);

// follower were in the dialog instead of players.
IF
DialogEnded(_,_Instance)
AND
DB_TemporaryHostilityAfterDialog(_NPC,_Instance)
AND
DialogIsCrimeDialog(_Instance,1)
AND
DB_DialogNPCs(_Instance,_Follower,2)
AND
CharacterGetOwner((CHARACTER)_Follower, _Player)
AND
DB_PartyMembers(_Player)
AND
GetHandlingCrimeID((CHARACTER)_NPC, _CrimeID)
THEN
NOT DB_TemporaryHostilityAfterDialog(_NPC,_Instance);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID, -1, _NPC, (CHARACTER)_Player);
DB_Crime_NoConfrontationDoneAfterDialog(_Npc,_Instance);

IF
DialogEnded(_Dialog,_Inst)
AND
DB_CrimeWarner(_CrimeID,_Warner,_Dialog, _Inst)
AND
DB_DialogNPCs(_Inst,_Warner,_)
THEN
PROC_ConfrontationDoneAfterDialog(_CrimeID,_Warner,_Inst);
NOT DB_CrimeWarner(_CrimeID,_Warner,_Dialog, _Inst);

IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_CrimeWarner(_CrimeID,_Warner,_Dialog, _Inst)
AND
DB_DialogNPCs(_Inst,_Warner,_)
THEN
PROC_ConfrontationDoneAfterDialog(_CrimeID,_Warner,_Inst);
NOT DB_CrimeWarner(_CrimeID,_Warner,_Dialog,_Inst);


IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,_Warner,_Player)
AND
IsPartyMember(_Player,1,1)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTER)_Player,_Warner)
AND
DB_Crime_CrimeWarningFlags(_Pos,_Flag)
AND
GetFlag((FLAG)_Flag,_Player,1) // flagType: Object
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ClearFlag((FLAG)_Flag, _Player, 0); // flagType: Object
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);

QRY
QRY_CRIME_PlayerConfrontationDialogActive((CHARACTER)_Player)
AND
SpeakerGetDialog(_Player,0,_CurrentDialog,_Inst)
AND
DB_CrimeWarner(_,_,_CurrentDialog,_Inst)
THEN
DB_NOOP(1);


IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,(CHARACTER)_Warner,_Criminal1)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);

IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,(CHARACTER)_Warner,(CHARACTER)_TargetPlayer)
THEN
NOT DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,_Warner,_TargetPlayer);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog,0,(INTEGER)_MarkForInteractive)
THEN
DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog,0,(INTEGER)_MarkForInteractive)
AND
QRY_StartDialogFailed(_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NOOP(1);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog,1,(INTEGER)_MarkForInteractive)
THEN
SysClear("DB_StartedDialog", 7);
DB_StartedDialog(_Dialog, _Warner, _Criminal1, _Criminal2, _Criminal3, _Criminal4, NULL_00000000-0000-0000-0000-000000000000);


IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTER)_Player,_Warner)
AND
DB_Crime_CrimeWarningFlags(_Pos, _Flag)
AND
GetFlag((FLAG)_Flag, _Player, 1) // flagType: Object
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ClearFlag((FLAG)_Flag, _Player, 0); // flagType: Object
NOT DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,_Warner,_Player);
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);


//REGION Prepare the characters for the dialog
PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog,1,_)
AND
NOT DB_CantMove(_Warner)
THEN
EndRepose(_Warner);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog,1,_)
THEN
PROC_DialogFlagSetup(_WarningDialog, _Warner, _Criminal1, _Criminal2, _Criminal3, _Criminal4);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_WarningDialog,1,_)
AND
DialogIsAutomated(_WarningDialog, 1)
THEN
PROC_WaitForEndOfCrimeAD(_Criminal1, _WarningDialog);
PROC_WaitForEndOfCrimeAD(_Criminal2, _WarningDialog);
PROC_WaitForEndOfCrimeAD(_Criminal3, _WarningDialog);
PROC_WaitForEndOfCrimeAD(_Criminal4, _WarningDialog);

PROC
PROC_WaitForEndOfCrimeAD((CHARACTER)_Criminal, (DIALOGRESOURCE)_Dialog)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
IsPartyMember(_Criminal, 1, 0)
THEN
SetEntityEventDialog(_Criminal, "WaitOnDialogEnd", _Dialog, 1);

IF
CharacterLeftParty(_Summon)
AND
QRY_IsExistingSummon(_Summon,1)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,_Summon,_Warner)
THEN
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Summon,_Warner);

//END_REGION

//REGION Check Prison Cell in Warning

PROC
PROC_CRIME_OsirisReaction((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
ClearFlag((FLAG)GEB_Arrest_HavePrison_602741c9-b5be-6479-f456-4781383551ff, _Warner, 0); // flagType: Object

PROC
PROC_CRIME_OsirisReaction((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_CrimeName,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_RegionPrison(_CrimeRegion,(TRIGGER)_, (TRIGGER)_)
AND
NOT QRY_CRIME_PrisonBlocked(_CrimeRegion)
THEN
SetFlag((FLAG)GEB_Arrest_HavePrison_602741c9-b5be-6479-f456-4781383551ff, _Warner); // flagType: Object

QRY
QRY_CRIME_PrisonBlocked((STRING)_CrimeRegion)
AND
1 == 0
THEN
DB_NOOP(1);

//END_REGION
//END_REGION

//REGION Investigation
QRY
QRY_CRIME_BlockGenericInvestigation((CHARACTER)_Investigator)
AND
1 == 0
THEN
DB_NOOP(1);

// TODO: allow customisation of investigation via action libraries
IF
EntityEvent((CHARACTER)_Investigator,"CRIME_SetCrimeInvestigationPos")
AND
GetHandlingCrimeID(_Investigator,_CrimeID)
THEN
PROC_CRIME_SetInvestigationVars(_CrimeID,_Investigator);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
DB_CRIME_InvestigationNoWalkingTalking(_CrimeID)
THEN
SetVarInteger(_Investigator,"CRIME_InvestigationNoWalkingTalking",1);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
NOT DB_CRIME_InvestigationNoWalkingTalking(_CrimeID)
THEN
SetVarInteger(_Investigator,"CRIME_InvestigationNoWalkingTalking",0);

// TODO: allow customisation of investigation via data
PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
DB_CRIME_InvestigationAD(_CrimeID,_AD)
THEN
SetVarObject(_Investigator,"CRIME_InvestigationAD",_AD);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
NOT DB_CRIME_InvestigationAD(_CrimeID,_)
THEN
SetVarObject(_Investigator,"CRIME_InvestigationAD",NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
DB_CRIME_InvestigationCriminalLocation(_CrimeID,_X,_Y,_Z)
THEN
SetVarFloat3(_Investigator,"CRIME_InvestigationCriminalLocation",_X,_Y,_Z);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
NOT DB_CRIME_InvestigationCriminalLocation(_CrimeID,_,_,_)
AND
CrimeGetCriminal(_CrimeID,1,_Criminal1)
AND
GetPosition(_Criminal1,_X,_Y,_Z)
THEN
SetVarFloat3(_Investigator,"CRIME_InvestigationCriminalLocation",_X,_Y,_Z);


// Override crime scene location (needs to be exact to ensure that e.g. in case of assault,
// we don't have a crime scene too far for the victim to see or hear) with a separate investigation
// location if appropriate
PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
DB_CRIME_CrimeInvestigationPos(_CrimeID,_X,_Y,_Z)
THEN
// In case it's an alternate position, run rather than walk, because it means
// that we probably cannot find anything in the default location
SetVarInteger(_Investigator,"bool_RunToInvestigationScene",1);
SetVarFloat3(_Investigator,"CrimePos",_X,_Y,_Z);

PROC
PROC_CRIME_SetInvestigationVars((INTEGER)_CrimeID,(CHARACTER)_Investigator)
AND
NOT DB_CRIME_CrimeInvestigationPos(_CrimeID,_,_,_)
THEN
SetVarInteger(_Investigator,"bool_RunToInvestigationScene",0);


IF
EntityEvent((CHARACTER)_Investigator,"CRIME_SetCrimeInvestigationPos")
AND
NOT QRY_CRIME_BlockGenericInvestigation(_Investigator)
THEN
SetEntityEvent(_Investigator,"CRIME_InvestigationPosSet",1);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_CrimeInvestigationPos(_CrimeID,_XInv,_YInv,_ZInv)
THEN
NOT DB_CRIME_CrimeInvestigationPos(_CrimeID,_XInv,_YInv,_ZInv);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_InvestigationNoWalkingTalking(_CrimeID)
THEN
NOT DB_CRIME_InvestigationNoWalkingTalking(_CrimeID);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_InvestigationAD(_CrimeID,_AD)
THEN
NOT DB_CRIME_InvestigationAD(_CrimeID,_AD);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_InvestigationCriminalLocation(_CrimeID,_X,_Y,_Z)
THEN
NOT DB_CRIME_InvestigationCriminalLocation(_CrimeID,_X,_Y,_Z);

//END_REGION

//REGION Interrogation

PROC
PROC_CrimeInterrogationRequest((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
THEN
ClearFlag((FLAG)GEB_Arrest_HavePrison_602741c9-b5be-6479-f456-4781383551ff, _Interrogator, 0); // flagType: Object
// also set the victim flags etc so we can use them in NPC-NPC interrogations
PROC_CrimeSetupWarning(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_CrimeInterrogationRequest((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
DB_RegionPrison((STRING)_RegionID,(TRIGGER)_,(TRIGGER)_)
AND
NOT QRY_CRIME_PrisonBlocked(_RegionID)
THEN
SetFlag((FLAG)GEB_Arrest_HavePrison_602741c9-b5be-6479-f456-4781383551ff, _Interrogator); // flagType: Object

PROC
PROC_CrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
IsTagged(_Interrogator,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,0)
AND
IsTagged(_Interrogator,(TAG)KID_ee978587-6c68-4186-9bfc-3b3cc719a835,0)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
PROC_StartInterrogationDialog(_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_CrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
CrimeInterrogationDone(_ID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,(TAG)AGGRESSIVEBEAST_1ed04fb5-e654-4dbf-893c-a795952e77e1,1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
PROC_TryStartAD(GEB_AD_Noticed_AnimalAttackedAnimal_11687f74-c7c2-eb34-4155-7a18109460a0,_Interrogator);
PROC_MakeNPCHostile(_Interrogator,_Criminal1);
PROC_MakeNPCHostile(_Interrogator,_Criminal2);
PROC_MakeNPCHostile(_Interrogator,_Criminal3);
PROC_MakeNPCHostile(_Interrogator,_Criminal4);

PROC
PROC_CrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,(TAG)KID_ee978587-6c68-4186-9bfc-3b3cc719a835,1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
CrimeInterrogationDone(_ID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
THEN
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator);


//--- Custom interrogation dialog:
QRY
QRY_CrimeGetInterrogationDialog((STRING)_RegionID,(INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
DB_CrimeInterrogationDialog((DIALOGRESOURCE)_OldDialog)
THEN
NOT DB_CrimeInterrogationDialog(_OldDialog);

QRY
QRY_CrimeGetInterrogationDialog((STRING)_RegionID,(INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
QRY_CrimeGetCustomInterrogationDialog(_RegionID,_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
DB_NOOP(1);

//catch QRY_CrimeGetCustomInterrogationDialog and set DB_CrimeInterrogationDialog(_CustomDialog) to override the dialog inherited from stats. 
//make sure you dialog is properly set, for example put it in DB_CrimeTriggers_GeneralBribeDialog if needed.
QRY
QRY_CrimeGetCustomInterrogationDialog((STRING)_RegionID,(INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
THEN
DB_NOOP(1); //DB_CrimeInterrogationDialog(_CustomDialog);

QRY
QRY_CrimeGetInterrogationDialog((STRING)_RegionID,(INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
NOT DB_CrimeInterrogationDialog(_)
THEN
DB_CrimeInterrogationDialog(_Dialog);

//--- Interrogation requested:
PROC
PROC_CrimeInterrogationRequest((STRING)_RegionID,(INTEGER)_ID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
QRY_CrimeGetInterrogationDialog(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
DB_CrimeInterrogationDialog(_InterrogationDialog)
AND
CanMove(_Interrogator,_InterrogatorCanMove)
THEN
DB_InterrogationRequested(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_InterrogationDialog);
BlockNewCrimeReactions(_Interrogator,1);
SetHasDialog(_Interrogator,0);	//TODO: this is not great, we assume these guys have dialogs
SetVarUUID(_Interrogator,"ArrestDialog",_InterrogationDialog);
PROC_CRIME_MoveToAndStartInterrogationDialog(_Interrogator,_Criminal1,NULL_00000000-0000-0000-0000-000000000000,"GEB_InterrogationMove","Run",6.0,_InterrogatorCanMove);

PROC
PROC_CRIME_MoveToAndStartInterrogationDialog((CHARACTER)_Arrester,(CHARACTER)_Criminal,(DIALOGRESOURCE)_Dialog,(STRING)_MoveID,(STRING)_MoveSpeed,(REAL)_TimeOut,1)
THEN
CharacterMoveToAndTalk(_Arrester,_Criminal,NULL_00000000-0000-0000-0000-000000000000,"GEB_InterrogationMove","Run",6.0);

PROC
PROC_CRIME_MoveToAndStartInterrogationDialog((CHARACTER)_Arrester,(CHARACTER)_Criminal,(DIALOGRESOURCE)_Dialog,(STRING)_MoveID,(STRING)_MoveSpeed,(REAL)_TimeOut,0)
AND
QRY_SpeakerIsInDialogRange(_Criminal,_Arrester)
THEN
PROC_CRIME_StartInterrogationDialog((CHARACTER)_Arrester,(CHARACTER)_Criminal);

PROC
PROC_CRIME_MoveToAndStartInterrogationDialog((CHARACTER)_Arrester,(CHARACTER)_Criminal,(DIALOGRESOURCE)_Dialog,(STRING)_MoveID,(STRING)_MoveSpeed,(REAL)_TimeOut,0)
AND
NOT QRY_SpeakerIsInDialogRange(_Criminal,_Arrester)
AND
// Case where is DB_InterrogationRequested is no longer defined cannot happen here, since this is still
// in the same frame where that database got defined
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_HandleFailedInterrogation(_Arrester,_ID);

IF
CharacterMoveToAndTalkRequestDialog(_Arrester,(CHARACTER)_Criminal,_,"GEB_InterrogationMove")
THEN
PROC_CRIME_StartInterrogationDialog(_Arrester,_Criminal);

PROC
PROC_CRIME_StartInterrogationDialog((CHARACTER)_Arrester,(CHARACTER)_Criminal)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_CrimeCheckInterrogationDialog(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog);

IF
CharacterMoveToAndTalkFailed(_Arrester,_,"GEB_InterrogationMove", _)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_HandleFailedInterrogation(_Arrester,_ID);

PROC
PROC_HandleFailedInterrogation((CHARACTER)_Arrester,(INTEGER)_ID)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_CancelInterrogation(_Arrester,_ID,0,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CancelInterrogation((CHARACTER)_Arrester,(INTEGER)_ID,(INTEGER)_FoundEvidence,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
CrimeInterrogationDone(_ID,_Arrester,_FoundEvidence,_Criminal,_Criminal2,_Criminal3,_Criminal4);
PROC_CleanUpInterrogation(_Arrester);

PROC //allow others to interrogate them if no evidence was found
PROC_CancelInterrogation((CHARACTER)_Arrester,(INTEGER)_ID,0,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
CrimeResetInterrogationForCriminals(_ID,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CleanUpInterrogation((CHARACTER)_Arrester)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
BlockNewCrimeReactions(_Arrester,0);
SetHasDialog(_Arrester,1);
NOT DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog);

IF
CharacterMoveToAndTalkRequestDialog(_Arrester,(CHARACTER)_Criminal,_,"GEB_InterrogationMove")
AND
NOT DB_InterrogationRequested(_,_,_Arrester,_Criminal,_,_,_,_)
THEN
CharacterMoveToAndTalkFail(_Arrester,_Criminal,"GEB_InterrogationMove","InterrogationAlreadyCleanedUp");

IF
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_ArrestDialog,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_ArrestDialog)
THEN
CharacterMoveToAndTalkFail(_Arrester,_Criminal,"GEB_InterrogationMove","FailedToInterruptStoryDialogs");

IF
DB_Crime_InterrogationStarted(_CrimeID,_Arrester)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_ArrestDialog)
THEN
PROC_CleanUpInterrogation(_Arrester);

IF
OnCrimeResolved(_CrimeID,_,_,_,_,_)
AND
DB_InterrogationRequested(_,_CrimeID,_Arrester,_,_,_,_,_)
THEN
PROC_CleanUpInterrogation(_Arrester);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_PartyMember)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_PartyMember,_Criminal3,_Criminal4,_ArrestDialog)
THEN
NOT DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_PartyMember,_Criminal3,_Criminal4,_ArrestDialog);
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,NULL_00000000-0000-0000-0000-000000000000,_Criminal3,_Criminal4,_ArrestDialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_PartyMember)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_PartyMember,_Criminal4,_ArrestDialog)
THEN
NOT DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_PartyMember,_Criminal4,_ArrestDialog);
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,NULL_00000000-0000-0000-0000-000000000000,_Criminal4,_ArrestDialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_PartyMember)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_PartyMember,_ArrestDialog)
THEN
NOT DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_PartyMember,_ArrestDialog);
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,NULL_00000000-0000-0000-0000-000000000000,_ArrestDialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_PartyMember)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_PartyMember,_Criminal2,_Criminal3,_Criminal4,_ArrestDialog)
THEN
CharacterMoveToAndTalkFail(_Arrester,_PartyMember,"GEB_InterrogationMove","PartyMemberDismissed");

//--- Start dialog:
PROC
PROC_StartInterrogationDialog((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
_Dialog == NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_DoStartInterrogationDialog(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,GEB_Interrogation_4be383d1-12f3-db9f-b251-883aa758763a);

PROC
PROC_StartInterrogationDialog((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
_Dialog != NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_DoStartInterrogationDialog(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_DoStartInterrogationDialog((INTEGER)_,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
NOT DB_Interrogation(_Interrogator,_CrimeID); // This Database is set on CRIME_Allow_Search

PROC
PROC_DoStartInterrogationDialog((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
THEN
DB_CRIME_StartingInterrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
PROC_CrimeInterruptStoryDialogs("Interrogation",_CrimeID,_Dialog,1,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CRIME_DialogsStoppedCallback("Interrogation",(INTEGER)_CrimeID)
AND
DB_CRIME_StartingInterrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
NOT DB_CRIME_StartingInterrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
PROC_CrimeCheckInterrogationDialogSucceeded(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_CrimeCheckInterrogationDialogSucceeded((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_Dialog,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
DB_Interrogation(_Interrogator,_CrimeID);

PROC
PROC_CrimeCheckInterrogationDialogSucceeded((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_Dialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_Dialog,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

IF
FlagSet(CRIME_Allow_Search_f29f6365-3c39-2075-77c4-2a14e4407200, (CHARACTER)_Interrogator, _ID) // flagType: Object
THEN
ClearFlag((FLAG)CRIME_Allow_Search_f29f6365-3c39-2075-77c4-2a14e4407200, _Interrogator, _ID); // flagType: Object
ClearFlag((FLAG)CRIME_EvidenceFound_e1c55f36-44f0-95e3-b54b-d8c61a767baa, _Interrogator, _ID); // flagType: Object
ClearFlag((FLAG)CRIME_GuiltFound_c742b680-a456-82ca-f157-3cd31c099a80, _Interrogator, _ID); // flagType: Object
ClearFlag((FLAG)CRIME_FoundEvidenceCurrentCrime_65040012-add4-05f8-0924-9d2e27c3e7ed, _Interrogator, _ID); // flagType: Object
ClearFlag((FLAG)CRIME_FoundGuiltyPlayer_1b28f6ce-09ad-9664-9865-6ed4eb69a0b7, _Interrogator, _ID); // flagType: Object

IF
FlagSet(CRIME_Allow_Search_f29f6365-3c39-2075-77c4-2a14e4407200, (CHARACTER)_Interrogator, _ID) // flagType: Object
AND
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
CrimeFindEvidence(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_FoundEvidenceCurrentCrime,_FoundEvidence,_FoundGuilty)
AND
QRY_GetCriminalGuilty(_CrimeID,_Interrogator,_FoundEvidenceCurrentCrime,_FoundEvidence,_FoundGuilty)
THEN
DB_Interrogation(_Interrogator,_CrimeID);

IF
FlagSet(CRIME_Resist_Search_542c71fa-0019-9464-ba46-00ff8d1856f3,(CHARACTER)_NPC,_ID)
AND
DB_DialogPlayers(_ID,_Player,_)
AND
GetHandlingCrimeID((CHARACTER)_NPC,_CrimeID)
THEN
ClearFlag((FLAG)CRIME_Resist_Search_542c71fa-0019-9464-ba46-00ff8d1856f3,_NPC,_ID);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,_ID,_NPC,(CHARACTER)_Player);

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundEvidence == 1
THEN
SetFlag((FLAG)CRIME_EvidenceFound_e1c55f36-44f0-95e3-b54b-d8c61a767baa, _Interrogator, 0); // flagType: Object

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundGuilty == 1
THEN
SetFlag((FLAG)CRIME_GuiltFound_c742b680-a456-82ca-f157-3cd31c099a80, _Interrogator, 0); // flagType: Object

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundEvidenceCurrentCrime == 1
THEN
SetFlag((FLAG)CRIME_FoundEvidenceCurrentCrime_65040012-add4-05f8-0924-9d2e27c3e7ed, _Interrogator, 0); // flagType: Object

//Resolve Crime
IF
FlagSet(CRIME_FoundGuiltyPlayer_1b28f6ce-09ad-9664-9865-6ed4eb69a0b7, (CHARACTER)_Interrogator, _ID) // flagType: Object
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
DB_EvidenceFound(_CrimeID,_Interrogator);
//DebugText(_Interrogator,"Evidence Found");

//Give Evidence Back to investigator
IF
FlagSet((FLAG)CRIME_ReturnGoodsToOwner_464633ad-7dda-f4b0-d168-844b19d6ff96, (CHARACTER)_Interrogator, _ID) // flagType: Object
AND
GetHandlingCrimeID(_Interrogator,_CrimeID)
AND
DB_DialogPlayers(_ID,_Criminal,1)
AND
CrimeHasProperty(_CrimeID,(DISTURBANCEPROPERTY)TransferEvidenceOnGround_b94687a0-8ccd-49ab-a5ae-858daec0b674,_TransferEvidenceOnGround)
THEN
ClearFlag((FLAG)CRIME_ReturnGoodsToOwner_464633ad-7dda-f4b0-d168-844b19d6ff96, _Interrogator, _ID); // flagType: Object
CrimeTransferEvidenceTo(_CrimeID,(CHARACTER)_Criminal,_TransferEvidenceOnGround,_Interrogator);

IF
FlagSet((FLAG)GEB_CrimeDropEvidence_4139762a-96a5-06e7-7786-b1982855804f, (CHARACTER)_Interrogator, _ID) // flagType: Object
AND
GetHandlingCrimeID(_Interrogator,_CrimeID)
AND
DB_DialogPlayers(_ID,_Criminal,_)
THEN
DB_CRIME_DropEvidenceFromCriminals(_Criminal);

IF
FlagSet((FLAG)GEB_CrimeDropEvidence_4139762a-96a5-06e7-7786-b1982855804f, (CHARACTER)_Interrogator, _ID) // flagType: Object
THEN
ClearFlag((FLAG)GEB_CrimeDropEvidence_4139762a-96a5-06e7-7786-b1982855804f, _Interrogator, _ID); // flagType: Object
PROC_UnpackDB("DB_CRIME_DropEvidenceFromCriminals", "CRIME_DropEvidence", _Interrogator, 4, NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_UnpackDB_Callback("CRIME_DropEvidence", _Interrogator, _Criminal1, _Criminal2, _Criminal3, _Criminal4)
AND
GetHandlingCrimeID((CHARACTER)_Interrogator,_CrimeID)
THEN
CrimeDropEvidenceFromCriminals(_CrimeID,_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4);

IF
FlagSet((FLAG)GEB_CrimeDropEvidence_4139762a-96a5-06e7-7786-b1982855804f, (CHARACTER)_Interrogator, _ID) // flagType: Object
AND
DB_CRIME_DropEvidenceFromCriminals(_Criminal)
THEN
NOT DB_CRIME_DropEvidenceFromCriminals(_Criminal);


IF
FlagSet(CRIME_CallGuardsFromDialog_dc95e1a3-0e27-01f4-0c89-2825f60d102b, (CHARACTER)_Interrogator, _ID) // flagType: Object // When A Civilian finds a Thief in Interrogation
AND
DB_DialogPlayers(_ID,_Criminal,1)
THEN
ClearFlag((FLAG)CRIME_CallGuardsFromDialog_dc95e1a3-0e27-01f4-0c89-2825f60d102b, _Interrogator); // flagType: Object
DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID);
// We still want to be able to request the crime handling ID for this character from Anubis for the call help behaviour
// that gets triggered after the confrontation dialog ends (and after that, Anubis will end the confrontation)
DB_Crime_NoConfrontationDoneAfterDialog(_Interrogator,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTER)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
DB_Crime_CallingGuards(_Interrogator,_,_ID)
THEN
// Normally gets cleaned up by ProcCheckInterrogationDone, but that one does not get triggered
// in case we're calling guards
NOT DB_EvidenceFound(_CrimeID,_Interrogator);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTER)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
NOT DB_Crime_CallingGuards(_Interrogator,_,_ID)
THEN
PROC_CheckInterrogationDone(_Interrogator,_Dialog);

IF
AutomatedDialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTER)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
NOT DB_Crime_CallingGuards(_Interrogator,_,_ID)
THEN
PROC_CheckInterrogationDone(_Interrogator,_Dialog);


PROC
PROC_CheckInterrogationDone((CHARACTER)_Interrogator,(DIALOGRESOURCE)_Dialog)
AND
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
NOT DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
PROC_StopInterrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4);


IF
DialogEnded(_Dialog,_ID)
AND
DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID)
AND
GetHandlingCrimeID(_Interrogator,_CrimeID)
THEN
SetVarUUID(_Interrogator,"ArrestDialog",NGB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc);
SetVarInteger(_Interrogator,"CRIME_ArrestCrime",_CrimeID);
SetEntityEvent(_Interrogator,"CRIME_CallGuardsFromDialog",1);
NOT DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID);

IF
AutomatedDialogEnded(_Dialog,_ID)
AND
DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID)
AND
GetHandlingCrimeID(_Interrogator,_CrimeID)
THEN
SetVarUUID(_Interrogator,"ArrestDialog",NGB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc);
SetVarInteger(_Interrogator,"CRIME_ArrestCrime",_CrimeID);
SetEntityEvent(_Interrogator,"CRIME_CallGuardsFromDialog",1);
NOT DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID);

IF
FlagSet(CRIME_FleeHelpFromDialog_686bc362-67ee-8d88-384a-25c737aaf740, (CHARACTER)_Interrogator, _ID) // flagType: Object // When A Kid finds a Criminal in Interrogation
AND
DB_DialogPlayers(_ID,_Criminal,1)
THEN
ClearFlag(CRIME_FleeHelpFromDialog_686bc362-67ee-8d88-384a-25c737aaf740, _Interrogator);
DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID);
// We still want to be able to request the crime handling ID for this character from Anubis for the call help behaviour
// that gets triggered after the confrontation dialog ends (and after that, Anubis will end the confrontation)
DB_Crime_NoConfrontationDoneAfterDialog(_Interrogator,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID)
AND
GetHandlingCrimeID(_Interrogator,_CrimeID)
THEN
SetVarUUID(_Interrogator,"ArrestDialog",GEB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc);
SetEntityEvent(_Interrogator,"CRIME_FleeHelpFromDialog",1);
//CrimeInterrogationDone(_CrimeID,_Interrogator,1);
NOT DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogPlayers(_ID,_Player,1)
AND
GetFlag((FLAG)CRIME_PersuasionFailed_827d3b2c-f154-03a7-227a-16192c201ee2, _Player, 1) // flagType: Object
THEN
ClearFlag((FLAG)CRIME_PersuasionFailed_827d3b2c-f154-03a7-227a-16192c201ee2, _Player, 0); // flagType: Object

// Stop Investigation when join combat


//REGION Dialog Ended
IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTER)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
NOT DB_Crime_Interrogation(_CrimeID,(CHARACTER)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
PROC_StopInterrogation((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_EvidenceFound(_CrimeID,_Interrogator)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_StopInterrogation((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_EvidenceFound(_CrimeID,_Interrogator)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,0,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_StopInterrogation((INTEGER)_CrimeID,(CHARACTER)_Interrogator,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
NOT DB_EvidenceFound(_CrimeID,_Interrogator);
//END_REGION

//END_REGION

//REGION Trespassing

//--- Registering DB
IF
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger)
THEN
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,"Trespassing",(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

IF
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(STRING)_CrimeName)
THEN
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(STRING)_CrimeName,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

IF
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_,_,_)
THEN
PROC_TriggerRegisterForParty(_Trigger);

IF
DB_TrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(STRING)_CrimeName,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000)
AND
_CrimeName != "Trespassing"
THEN
// Allows GetCrimeFamily to function -> automatically selects correct branch in GEB_Arrest
DB_LinkedCrimes("Trespassing",_CrimeName);


//--- Removing:
PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_,_Victim)
THEN
PROC_RemoveDBTrespassTrigger(_Trigger,_OutTrigger,_Victim);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_,_Victim)
THEN
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim)
AND
DB_PartyMembers(_Player)
THEN
CharacterStopCrime(_Player, _CrimeName, _Trigger);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim)
AND
DB_PartyMembers(_Player)
THEN
CharacterStopCrime(_Player, _CrimeName, _Trigger);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim);

PROC
PROC_RemoveDBTrespassTrigger((TRIGGER)_Trigger,(TRIGGER)_OutTrigger,(CHARACTER)_Victim)
AND
DB_CRIME_TrespassNoPermanentAccess(_Trigger)
THEN
NOT DB_CRIME_TrespassNoPermanentAccess(_Trigger);

//--- Register/stop crime
IF
DB_InRegion(_Player,_Trigger)
AND
DB_PartyMembers(_Player)
AND
NOT DB_Is_InconspicuousPartyMember(_Player)
AND
DB_TrespassTrigger(_Trigger,_,_CrimeName,_Victim)
AND
NOT DB_CharacterCrimeDisabled(_Player,_CrimeName)
THEN
PROC_CharacterRegisterCrime(_Player, _CrimeName, _Trigger, _Victim, 0);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_TrespassTrigger((TRIGGER)_Evidence,_,_CrimeType,_Victim)
THEN
DB_PlayerTrespassing(_Char,_CrimeID,(TRIGGER)_Evidence);

IF
LeftTrigger(_Player,_Trigger)
AND
DB_PlayerTrespassing(_Player,_CrimeID,_Trigger)
THEN
CharacterStopCrimeWithID(_Player,_CrimeID);
NOT DB_PlayerTrespassing(_Player,_CrimeID,_Trigger);

IF
CharacterLeftParty(_Character)
AND
DB_PlayerTrespassing(_Character,_CrimeID,_Trigger)
THEN
NOT DB_PlayerTrespassing(_Character,_CrimeID,_Trigger);
CharacterStopCrimeWithID(_Character,_CrimeID);

IF
DB_PlayerTrespassing(_Character,_CrimeID,_Trigger)
AND
DB_Is_InconspicuousPartyMember(_Character)
THEN
NOT DB_PlayerTrespassing(_Character,_CrimeID,_Trigger);
CharacterStopCrimeWithID(_Character,_CrimeID);

IF
OnCriminalMergedWithCrime(_CrimeID,_Criminal)
AND
DB_PlayerTrespassing(_,_CrimeID,_Trigger)
AND
NOT DB_PlayerTrespassing(_Criminal,_CrimeID,_Trigger)
THEN
DB_PlayerTrespassing(_Criminal,_CrimeID,_Trigger);

IF
DB_PlayerTrespassing(_Criminal,_CrimeID,_Trigger)
AND
DB_PlayerTrespassing(_Criminal,_OldCrimeID,_Trigger)
AND
_CrimeID != _OldCrimeID
THEN
NOT DB_PlayerTrespassing(_Criminal,_OldCrimeID,_Trigger);

PROC
PROC_CRIME_RecheckOnFastTravel((INTEGER)_CrimeID,(CHARACTER)_Character)
AND
DB_PlayerTrespassing(_Character,_CrimeID,_Trigger)
AND
// When fast travelling, all chained characters (= characters in the same party group)
// are teleported -> immediately stop it for all of them
DB_PartyMembers(_PartyMember)
AND
InSamePartyGroup(_PartyMember,_Character,1)
AND
IsInTrigger(_PartyMember,_Trigger,0)
THEN
NOT DB_PlayerTrespassing(_PartyMember,_CrimeID,_Trigger);
CharacterStopCrimeWithID(_PartyMember,_CrimeID);

IF
FlagSet(TeleportOutOfTrespass_13ec14ed-2baa-32c2-8945-bda5c463b1f7, _Player, _Inst) // flagType: Object
THEN
DB_CrimeTeleportOutOfTrespass(_Player,_Inst);

IF
DialogEnded(_,_ID)
AND
DB_DialogPlayers(_ID,_FirstPlayer,1)
AND
DB_PlayerTrespassing((CHARACTER)_FirstPlayer,_CrimeID,_Trigger)
AND
DB_CrimeTeleportOutOfTrespass(_FirstPlayer,_ID)
AND
DB_TrespassTrigger(_Trigger,_Outside,_,_)
AND
DB_DialogSpeakers(_ID,_PartyMember,_)
AND
DB_PlayerTrespassing((CHARACTER)_PartyMember,_OtherCrimeID,_Trigger)
THEN
CharacterStopCrimeWithID((CHARACTER)_PartyMember,_OtherCrimeID);
TeleportTo(_PartyMember,_Outside,"",1);
NOT DB_PlayerTrespassing(_PartyMember,_OtherCrimeID,_Trigger);
NOT DB_CrimeTeleportOutOfTrespass(_PartyMember,_ID);
ClearFlag((FLAG)TeleportOutOfTrespass_13ec14ed-2baa-32c2-8945-bda5c463b1f7, _PartyMember, 0); // flagType: Object

IF
DialogEnded(_,_ID)
AND
DB_CrimeTeleportOutOfTrespass(_Player,_ID)
THEN
NOT DB_CrimeTeleportOutOfTrespass(_Player,_ID);
ClearFlag((FLAG)TeleportOutOfTrespass_13ec14ed-2baa-32c2-8945-bda5c463b1f7, _Player, 0); // flagType: Object

IF
FlagSet((FLAG)GEB_Crime_ConvincedTrespassAllowedPermanently_77fff462-8394-4733-9a40-8a4c6ef776c3,_Player,_ID)
AND
DB_PlayerTrespassing((CHARACTER)_Player,_CrimeID,_TrespassTrigger)
THEN
PROC_CRIME_CleanUpTrespass(_CrimeID,_TrespassTrigger);

PROC
PROC_CRIME_CleanUpTrespass((INTEGER)_CrimeID,(TRIGGER)_TrespassTrigger)
THEN
PROC_RemoveDBTrespassTrigger(_TrespassTrigger);

// Sensible action: secondary -> pass through
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassReaction",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,0)
AND
CrimeGetType(_CrimeID,_CrimeName)
THEN
PROC_CRIME_OsirisReaction(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassArrest",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,0)
AND
CrimeGetType(_CrimeID,_CrimeName)
THEN
PROC_CRIME_OsirisArrest(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);


// Sensible Action: primary -> give precedence to reacting to players that can talk; if none -> combat
QRY
QRY_CRIME_IsAvailablePlayer((CHARACTER)_Char)
AND
DB_Players(_Char)
AND
NOT DB_CantTalk_IgnoreDialogsCombat(_Char)
AND
NOT DB_Is_InCombat(_Char,_)
AND
// They can be in a dialogue since PROC_CRIME_OsirisReaction/PROC_CRIME_OsirisArrest will stop it,
// unless it's one that can't be interrupted by crimes
NOT QRY_CRIME_InUnstoppableDialog(_Char)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_InUnstoppableDialog((CHARACTER)_Char)
AND
SpeakerGetDialog(_Char,0,_CurrentDialog,_ID)
AND
DB_Crime_DoNotStopDialog((DIALOGRESOURCE)_CurrentDialog)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_FixupTrespassWarningDialog((STRING)_CrimeType,(CHARACTER)_Warner,(DIALOGRESOURCE)_WarningDialog,(DIALOGRESOURCE)_ReplacementDialog)
AND
DB_QRYRTN_FixupTrespassWarningDialog(_Result)
THEN
NOT DB_QRYRTN_FixupTrespassWarningDialog(_Result);

QRY
QRY_CRIME_FixupTrespassWarningDialog((STRING)_CrimeType,(CHARACTER)_Warner,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)_ReplacementDialog)
AND
GUIDToString(_Warner,_WarnerStr)
AND
GUIDToString(_ReplacementDialog,_ReplacementDialogStr)
AND
Concatenate("Null dialog specified for trespass crime ",_CrimeType,_Str1)
AND
Concatenate(_Str1," by NPC ",_Str2)
AND
Concatenate(_Str2,_WarnerStr,_Str3)
AND
Concatenate(_Str3,", replacing with ",_Str4)
AND
Concatenate(_Str4,_ReplacementDialogStr,_Str5)
THEN
DebugBreak(_Str5);
DB_QRYRTN_FixupTrespassWarningDialog(_ReplacementDialog);

QRY
QRY_CRIME_FixupTrespassWarningDialog((STRING)_CrimeType,(CHARACTER)_Warner,(DIALOGRESOURCE)_OriginalDialog,(DIALOGRESOURCE)_ReplacementDialog)
AND
_OriginalDialog != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_QRYRTN_FixupTrespassWarningDialog(_OriginalDialog);

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,_Reaction,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,1)
AND
DB_CRIME_HandledTrespass(1)
THEN
NOT DB_CRIME_HandledTrespass(1);

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassReaction",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,1)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal1)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
QRY_CRIME_FixupTrespassWarningDialog(_CrimeName,_Warner,_WarningDialog,(DIALOGRESOURCE)NGB_Warning_Trespassing_fac4011f-ae0d-7dce-ae06-d7f7ecf57415)
AND
DB_QRYRTN_FixupTrespassWarningDialog(_FixedUpDialog)
THEN
DB_CRIME_HandledTrespass(1);
PROC_CRIME_OsirisReaction(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_FixedUpDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassArrest",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,1)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal1)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
QRY_CRIME_FixupTrespassWarningDialog(_CrimeName,_Warner,_WarningDialog,(DIALOGRESOURCE)NGB_Arrest_fabc5060-4331-61ef-a99e-f836fbed25bc)
AND
DB_QRYRTN_FixupTrespassWarningDialog(_FixedUpDialog)
THEN
DB_CRIME_HandledTrespass(1);
PROC_CRIME_OsirisArrest(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_FixedUpDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4);


IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,_Reaction,_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,1)
AND
DB_CRIME_TrespassOsirisAction(_Reaction)
AND
// Not "NOT QRY_CRIME_IsAvailablePlayer(_Criminal1)", since they won't be available anymore if a dialog got started above
NOT DB_CRIME_HandledTrespass(1)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
QRY_CRIME_FixupTrespassWarningDialog(_CrimeName,_Warner,_WarningDialog,(DIALOGRESOURCE)NGB_Warning_Trespassing_fac4011f-ae0d-7dce-ae06-d7f7ecf57415)
AND
DB_QRYRTN_FixupTrespassWarningDialog(_FixedUpDialog)
THEN
SysClear("DB_CRIME_TrespassCriminals",1);
SysClear("DB_CRIME_TrespassCrimeData",5);
DB_TrespassCrimeData(_Warner,_CrimeRegion,_CrimeID,_Reaction,_FixedUpDialog);
PROC_TryStopDialogFor(_Criminal1);
PROC_TryStopDialogFor(_Criminal2);
PROC_TryStopDialogFor(_Criminal3);
PROC_TryStopDialogFor(_Criminal4);
PROC_CRIME_Trespass_RegisterPlayer(_Criminal1);
PROC_CRIME_Trespass_RegisterPlayer(_Criminal2);
PROC_CRIME_Trespass_RegisterPlayer(_Criminal3);
PROC_CRIME_Trespass_RegisterPlayer(_Criminal4);
PROC_CRIME_Trespass_RegisterNonPlayer(_Criminal1);
PROC_CRIME_Trespass_RegisterNonPlayer(_Criminal2);
PROC_CRIME_Trespass_RegisterNonPlayer(_Criminal3);
PROC_CRIME_Trespass_RegisterNonPlayer(_Criminal4);
PROC_UnpackDB("DB_CRIME_TrespassCriminals", "CRIME_TrespassCriminals",_Warner,4,NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_CRIME_Trespass_RegisterPlayer((CHARACTER)_Criminal)
AND
QRY_CRIME_IsAvailablePlayer(_Criminal)
THEN
DB_CRIME_TrespassCriminals(_Criminal);

PROC
PROC_CRIME_Trespass_RegisterNonPlayer((CHARACTER)_Criminal)
AND
NOT QRY_CRIME_IsAvailablePlayer(_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_CRIME_TrespassCriminals(_Criminal);

PROC
PROC_UnpackDB_Callback("CRIME_TrespassCriminals",_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_TrespassCrimeData((CHARACTER)_Warner,_CrimeRegion,_CrimeID,_Reaction,_WarningDialog)
AND
NOT QRY_CRIME_IsAvailablePlayer((CHARACTER)_Criminal1)
AND
// Filter out KID and the like
CanJoinCombat(_Warner,1)
AND
CanFight(_Warner,1)
THEN
DB_CRIME_TrespassNonPlayerHandled(1);
PROC_CRIME_SetRelationTemporaryHostile(_CrimeID,-1,_Warner,_Criminal1);

PROC
PROC_UnpackDB_Callback("CRIME_TrespassCriminals",_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_TrespassCrimeData((CHARACTER)_Warner,_CrimeRegion,_CrimeID,_Reaction,_WarningDialog)
AND
NOT QRY_CRIME_IsAvailablePlayer((CHARACTER)_Criminal1)
AND
NOT DB_CRIME_TrespassNonPlayerHandled(1)
THEN
// Can't really do much, except for maybe play an AD...
PROC_CRIME_Trespass_NonPlayerNoCombatFallback(_Warner,_CrimeRegion,_CrimeID,_Reaction,_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4);
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
PROC_UnpackDB_Callback("CRIME_TrespassCriminals",_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_CRIME_TrespassNonPlayerHandled(1)
THEN
NOT DB_CRIME_TrespassNonPlayerHandled(1);

PROC
PROC_UnpackDB_Callback("CRIME_TrespassCriminals",_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_TrespassCrimeData((CHARACTER)_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassReaction",_WarningDialog)
AND
QRY_CRIME_IsAvailablePlayer((CHARACTER)_Criminal1)
AND
CrimeGetType(_CrimeID,_CrimeName)
THEN
PROC_CRIME_OsirisReaction(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4);

PROC
PROC_UnpackDB_Callback("CRIME_TrespassCriminals",_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_TrespassCrimeData((CHARACTER)_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisTrespassArrest",_WarningDialog)
AND
QRY_CRIME_IsAvailablePlayer((CHARACTER)_Criminal1)
AND
CrimeGetType(_CrimeID,_CrimeName)
THEN
PROC_CRIME_OsirisArrest(_Warner,_CrimeRegion,_CrimeID,_CrimeName,_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4);


PROC
PROC_CRIME_Trespass_NonPlayerNoCombatFallback((CHARACTER)_Warner,(STRING)_CrimeRegion,(INTEGER)_CrimeID,(STRING)_Reaction,(DIALOGRESOURCE)_WarningDialog,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
DB_NOOP(1);

//////////////////////////////
//END_REGION

//REGION Add criminal to (continuous) crime dialog while confrontation is ongoing
IF
OnCriminalMergedWithCrime(_CrimeID, _Criminal)
AND
CrimeGetLeadInvestigator(_CrimeID, _Investigator)
AND
DB_CrimeWarner(_CrimeID, _Investigator, _Dialog, _DialogID)
AND
SpeakerGetDialog(_Investigator,0, _Dialog, _DialogID)
THEN
PROC_ForceStopDialog(_Criminal);
PROC_DialogAddListeningActor(_DialogID, _Criminal);
//END_REGION

//REGION Crimes against a character that can't react because it's in a dialog
IF
CharacterSelectedAsBestUnavailableFallbackLead(_Char,_Region,_NewCrime,_OldCrime)
AND
CrimeHasProperty(_NewCrime, BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c, 0)
AND
IsSpeakerReserved(_Char,1)
AND
CrimeIsContinuous(_OldCrime,0)
THEN
PROC_ForceStopDialog(_Char);
PROC_CRIME_MakeTemporaryHostileToCriminalsOf(_Char, _OldCrime);
PROC_CRIME_MakeTemporaryHostileToCriminalsOf(_Char, _NewCrime);
//END_REGION
//----------------------------------- ASSAULT -----------------------------------
//REGION Player teleported while in dialog with NPC

// Keep track of the original position of the player when the dialog started
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFarInit((INTEGER)_DialogID, (CHARACTER)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
AND
NOT DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _, _, _)
THEN
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ);

// Ensure it always succeeds
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFarInit((INTEGER)_DialogID, (CHARACTER)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
THEN
DB_NOOP(1);

// Teleported further than 5 metres away from the NPC than the original position -> too far
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFar((CHARACTER)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
AND
DB_Players(_Player)
AND
DB_DialogPlayers(_DialogID, _Player, _)
AND
NOT DB_AutomatedDialog(_DialogID)
AND
QRY_CRIME_PlayerInDialogTeleportedTooFarInit(_DialogID, _Player, _OldX, _OldY, _OldZ)
AND
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OrgX, _OrgY, _OrgZ)
AND
DB_DialogNPCs(_DialogID, _NPC, _)
AND
IsCharacter(_NPC, 1)
AND
GetDistanceToPosition(_NPC, _OrgX, _OrgY, _OrgZ, _OrgDist)
AND
GetDistanceTo(_NPC, _Player, _NewDist)
AND
RealSum(_OrgDist, 5.0, _MaxDist)
AND
_NewDist > _MaxDist
THEN
DB_CRIME_PlayerInDialogTeleportedTooFar(_DialogID, _Player, (CHARACTER)_NPC);

// Clean up
IF
DialogEnded(_, _DialogID)
AND
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ)
THEN
NOT DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ);

IF
Teleported(_Player, _, _OldX, _OldY, _OldZ, _NewX, _NewY, _NewZ, _Spell)
AND
_Spell != "RegionSwap"
AND
_Spell != "Invalid"
AND
QRY_CRIME_PlayerInDialogTeleportedTooFar(_Player, _OldX, _OldY, _OldZ)
AND
DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC)
AND
CharacterIsCrimeEnabled(_NPC, "TeleportPlayerDialog", 1)
AND
RealSum(_NewY,1.0,_NewYUp)
THEN
NOT DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC);
// In case this results in investigation, ensures the NPC can start investigating
// instead of waiting until the end of the dialog (unless it's in a dialog that
// must not be interrupted due to a crime)
PROC_CrimeTryForceStopDialog(_NPC);
// OldX/OldY/OldZ would be better, but then investigations fail because they abort
// when the investigator can see the crime scene, but not the criminal
PROC_CharacterRegisterCrimeWithPosition(_Player, "TeleportPlayerDialog", NULL_00000000-0000-0000-0000-000000000000, _NewX, _NewYUp, _NewZ, _NPC, 0);

IF
ForceMoveStarted(_, (CHARACTER)_Player, _)
AND
DB_Players(_Player)
AND
GetPosition(_Player, _X, _Y, _Z)
AND
// Just init the current position
QRY_CRIME_PlayerInDialogTeleportedTooFar(_Player, _X, _Y, _Z)
THEN
DB_NOOP(1);

IF
ForceMoveEnded(_, (CHARACTER)_Player, _)
AND
GetPosition(_Player, _X, _Y, _Z)
AND
QRY_CRIME_PlayerInDialogTeleportedTooFar(_Player, _X, _Y, _Z)
AND
DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC)
AND
CharacterIsCrimeEnabled(_NPC, "TeleportPlayerDialog", 1)
AND
RealSum(_Y,1.0,_NewYUp)
THEN
NOT DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC);
// In case this results in investigation, ensures the NPC can start investigating
// instead of waiting until the end of the dialog (unless it's in a dialog that
// must not be interrupted due to a crime)
PROC_CrimeTryForceStopDialog(_NPC);
// OldX/OldY/OldZ would be better, but then investigations fail because they abort
// when the investigator can see the crime scene, but not the criminal
PROC_CharacterRegisterCrimeWithPosition(_Player, "TeleportPlayerDialog", NULL_00000000-0000-0000-0000-000000000000, _X, _NewYUp, _Z, _NPC, 0);


//END_REGION

//REGION Assault

QRY
QRY_HasNeutralBlockTag((CHARACTER)_NPC)
AND
DB_NeutralTagIgnore((TAG)_Tag)
AND
IsTagged(_NPC,_Tag,1)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsNonEnemyAssaultZeroDamage((CHARACTER)_NPC,(CHARACTER)_Attacker,(STRING)_DamageSource,0,(INTEGER)_StoryActionID)
AND
_DamageSource != "StatusEnter"
AND
_DamageSource != "SurfaceCreate"
AND
NOT QRY_IsEnemy(_NPC,_Attacker)
AND
NOT DB_CRIME_IsShove(_StoryActionID,_)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsDamageAssault("StatusEnter",0)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsDamageAssault((STRING)_,_Damage)
AND
_Damage != 0
THEN
DB_NOOP(1);


// Attack in combat
IF
ForceMoveEnded((CHARACTER)_Player,(CHARACTER)_NPC,_StoryActionID)
AND
DB_CRIME_IsShove(_StoryActionID,"Start")
THEN
NOT DB_CRIME_IsShove(_StoryActionID,"Start");
DB_CRIME_IsShove(_StoryActionID,"End");

IF
OnThrown(_ThrownObject,_,_,_StoryActionID,_,_,_)
AND
DB_CRIME_IsShove(_StoryActionID,"Start")
THEN
NOT DB_CRIME_IsShove(_StoryActionID,"Start");
DB_CRIME_IsShove(_StoryActionID,"End");

IF
ForceMoveEnded((CHARACTER)_Player,(CHARACTER)_NPC,_StoryActionID)
AND
IsCharacter(_Player,1)
THEN
PROC_CRIME_CheckAttackedInCombat(_NPC,_Player,1,"",_StoryActionID);

IF
AttackedBy((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,_,_DamageAmount,_DamageSource,_StoryActionID)
AND
NOT DB_IgnoreAssault(_NPC)
AND
NOT QRY_IsOriginPartOfTheTeam(_NPC)
AND
QRY_GetCharacterOwnerIfItemSummon(_Player,_Summon)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Attacker)
AND
NOT QRY_IgnoreDamageSource(_DamageSource)
AND
// When attacking a non-hostile with 0 damage, we normally start a custom disturbance.
// However, when you're in combat no one will be able to confront you, so just ignore.
NOT QRY_CRIME_IsNonEnemyAssaultZeroDamage(_NPC,_Summon,_DamageSource,_DamageAmount,_StoryActionID)
THEN
PROC_CRIME_CheckAttackedInCombat(_NPC,_Attacker,_DamageAmount,_DamageSource,_StoryActionID);

PROC
PROC_CRIME_CheckAttackedInCombat((CHARACTER)_NPC,(CHARACTER)_Attacker,(INTEGER)_DamangeAmount,(STRING)_DamageSource,(INTEGER)_StoryActionID)
AND
NOT DB_IgnoreAssaultFor(_Attacker,_NPC)
AND
NOT QRY_CRIME_IgnoreShoveStartAttack(_StoryACtionID)
AND
QRY_IsPartyMember(_Attacker,0)
AND
IsDead(_Attacker,0)
AND
IsCharacter(_NPC, 1)
AND
NOT QRY_IsPartyMember(_NPC,1)
AND
QRY_IsAnyInCombat(_Attacker,_NPC)
AND
DB_Is_InCombat(_NPC,_ID)
THEN
PROC_CRIME_AttackedInCombat(_NPC,_Attacker,_ID,_StoryActionID);

PROC
PROC_CRIME_AttackedInCombat((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_CombatID,(INTEGER)_StoryActionID)
AND
QRY_CRIME_IsNeutralInCombat(_NPC,_Player)
AND
NOT QRY_HasNeutralBlockTag(_NPC)
AND
CanFight(_NPC,1)
AND
IsDead(_NPC,0)
AND
IsTagged(_NPC,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,0)
AND
HasActiveStatusWithGroup(_NPC,"SG_Confused",0)
AND
HasActiveStatusWithGroup(_Player,"SG_Confused",0)
THEN
PROC_WarnPlayerOfAttack(_NPC,_Player,_CombatID);

PROC
PROC_CRIME_AttackedInCombat((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_CombatID,(INTEGER)_StoryActionID)
AND
NOT DB_Is_InCombat(_Player,_)
AND
NOT QRY_CRIME_IsNeutralInCombat(_NPC,_Player)
THEN
// This NPC may have been killed by the Attack. They're still in DB_Is_InCombat at this point
// because the AttackedBy event arrives before LeftCombat, but calling PROC_EnterCombat
// won't do anything if they're dead -> do it safely by trying to enter combat with all combat participants
PROC_EnterCombatByID(_Player,_CombatID);

QRY
QRY_CRIME_IsNeutralInCombat((CHARACTER)_NPC,(CHARACTER)_Player)
AND
// Not temporarily hostile to any player in combat
// Note: must use DB checks and not HasXXXStatus queries, because if the NPC
// died the status may have been removed already in code, because they get
// removed on leaving combat (which happens when thry die)
NOT DB_GLO_Combat_TemporaryHostile(_NPC)
AND
// Not permanently hostile to any player in combat
NOT DB_GLO_Combat_PermanentlyHostile(_NPC)
AND
// And neutral to this player
IsNeutral(_NPC,_Player,1)
THEN
DB_NOOP(1);

//REGION Combat warnings
IF
LeftCombat((CHARACTER)_NPC,_)
AND
DB_CombatWarnings(_NPC,_Cnt)
THEN
NOT DB_CombatWarnings(_NPC,_Cnt);

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
NOT DB_CombatWarnings(_NPC,_)
THEN
DB_CombatWarnings(_NPC,0);

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
NOT DB_Is_InCombat(_Player,_)
AND
DB_CombatWarnings(_NPC,_Count)
THEN
NOT DB_CombatWarnings(_NPC,_Count);
DB_CombatWarnings(_NPC,3);

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,_,_)
THEN
ClearFlag((FLAG)GEB_Crime_LastNeutralWarning_ead56322-50a0-afd7-2f2f-0c4e75a6a59b, _NPC); // flagType: Object
ClearFlag((FLAG)GEB_Crime_AttackNeutralWarning_f9aa8826-dd9f-98ac-03f9-4870812823be, _NPC); // flagType: Object

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
DB_CombatWarnings(_NPC,_Old)
AND
IntegerSum(_Old,1,_Count)
THEN
NOT DB_CombatWarnings(_NPC,_Old);
DB_CombatWarnings(_NPC,_Count);

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
DB_CombatWarnings(_NPC,_Count)
AND
_Count > 3
THEN
SetFlag((FLAG)GEB_Crime_AttackNeutralWarning_f9aa8826-dd9f-98ac-03f9-4870812823be, _NPC); // flagType: Object
PROC_MakeNPCHostile(_NPC,_Player);

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
DB_CombatWarnings(_NPC,3)
THEN
SetFlag((FLAG)GEB_Crime_LastNeutralWarning_ead56322-50a0-afd7-2f2f-0c4e75a6a59b, _NPC); // flagType: Object

PROC
PROC_WarnPlayerOfAttack((CHARACTER)_NPC,(CHARACTER)_Player,(GUIDSTRING)_ID)
AND
DB_CombatWarnings(_NPC,_Count)
AND
QRY_DoNeutralAttackWarning(_Count)
THEN
PROC_TryStartAD(GEB_AD_WarnFriendlyFire_8d08f145-2803-5cec-802f-b3b99c0bf660,_NPC);

QRY
QRY_DoNeutralAttackWarning((INTEGER)_Count)
AND
_Count < 3
AND
Random(100,_Rnd)
AND
_Rnd <= 40
THEN
DB_Noop(1);

QRY
QRY_DoNeutralAttackWarning(3)
THEN
DB_Noop(1);

//END_REGION
QRY
QRY_IsAnyInCombat((CHARACTER)_Player,(CHARACTER)_NPC)
AND
DB_Is_InCombat(_NPC,_)
THEN
DB_NOOP(1);

QRY
QRY_IsAnyInCombat((CHARACTER)_Player,(CHARACTER)_NPC)
AND
DB_Is_InCombat(_Player,_)
THEN
DB_NOOP(1);
//END_REGION

//REGION General Assault crime -- verifies if the assailant is a summon/wildshape or not and registers the Assault or Assault_Beast crime

QRY
QRY_IgnoreDamageSource((STRING)_Dmg)
AND
DB_IgnoreDamageSources(_Dmg)
THEN
DB_NOOP(1);

// Don't interpret missing someone as a zero-damage assault (like throwing a healing potion at them)
// This event fires before the AttackedBy, so the subsequent AttackedBy will be ignored because of
// the matching StoryActionID
IF
MissedBy((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_StoryActionID)
AND
// Even though we treat it as a regular assault, we shouldn't register it for NPCs for which 0-damdage is disabled
// since they shouldn't notice it at all (used e.g. for drunk sleeping goblins)
NOT QRY_IgnoreAssaultZeroDamage(_NPC,0)
THEN
PROC_CRIME_CheckAttackedOutsideCombat(_NPC,_Player,_Summon,1,"",_StoryActionID);

IF
AttackedBy((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,_,_DamageAmount,_DamageSource,_StoryActionID)
THEN
PROC_CRIME_CheckAttackedOutsideCombat(_NPC,_Player,_Summon,_DamageAmount,_DamageSource,_StoryActionID);

// Prevent zero-damage-assault reactions to shoving
IF
ForceMoveStarted((CHARACTER)_Player,(CHARACTER)_NPC,_StoryActionID)
AND
IsCharacter(_Player,1)
THEN
DB_CRIME_IsShove(_StoryActionID,"Start");

// Prevent reaction to being thrown in a chasm while flying (results in a hostile statusenter)
// We won't explicitly register a crime after the throw finishes, because the throwing will
// result in bludgeoning damage that triggers an AttackedBy event (unlike the shove)
IF
UsingSpell(_Player, _, "throw", _, _StoryActionID)
AND
IsCharacter(_Player,1)
THEN
DB_CRIME_IsShove(_StoryActionID,"Start");

// Not on ForceMoveStarted, since they could have been shoved into a chasm
IF
ForceMoveEnded((CHARACTER)_Player,(CHARACTER)_NPC,_StoryActionID)
AND
IsCharacter(_Player,1)
AND
QRY_CharacterGetOwnerOrSelf(_Player)
AND
DB_QRYRTN_CharacterGetOwnerOrSelf(_Owner)
THEN
PROC_CRIME_CheckAttackedOutsideCombat(_NPC,_Owner,_Player,1,"Status",_StoryActionID);

IF
ForceMoveEnded((CHARACTER)_Player,(CHARACTER)_NPC,_StoryActionID)
THEN
NOT DB_CRIME_IsShove(_StoryActionID,"End");

IF
OnThrown(_,_,_,_StoryActionID,_,_,_)
THEN
NOT DB_CRIME_IsShove(_StoryActionID,"End");

// Don't generate a crime on the AttackedBy event generated by the Shove
// (we'll do it on ForceMoveEnded, to avoid having a character halfway
//  falling down a chasm starting a crime dialog)
QRY
QRY_CRIME_IgnoreShoveStartAttack((INTEGER)_StoryActionID)
AND
DB_CRIME_IsShove(_StoryActionID,"Start")
THEN
DB_NOOP(1);

QRY
QRY_CRIME_CountsAsAssaultOutOfCombat((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_DamageAmount,(STRING)_DamageSource,(INTEGER)_StoryActionID)
AND
_NPC != _Summon
AND
NOT DB_IgnoreAssault(_NPC)
AND
NOT QRY_IgnoreAssaultZeroDamage(_NPC,_DamageAmount)
AND
NOT QRY_CRIME_IgnoreShoveStartAttack(_StoryActionID)
AND
NOT DB_Is_InCombat(_NPC,_)
AND
QRY_IsPartyMember(_Player,0)
AND
NOT QRY_IgnoreDamageSource(_DamageSource)
AND
IsDead(_Player,0)
AND
IsCharacter(_NPC, 1)
AND
IsDead(_NPC,0)
AND
IsTagged(_NPC,(TAG)GHOST_3def9d73-7c73-487b-8111-d1df1dce076e,0)
AND
IsSummon(_NPC,0)
THEN
DB_NOOP(1);

PROC
PROC_CRIME_CheckAttackedOutsideCombat((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_DamageAmount,(STRING)_DamageSource,(INTEGER)_StoryActionID)
AND
QRY_CRIME_CountsAsAssaultOutOfCombat(_NPC,_Player,_Summon,_DamageAmount,_DamageSource,_StoryActionID)
THEN
PROC_CrimeCheckAssailant(_NPC,_Player,_Summon,_DamageSource,_DamageAmount,_StoryActionID);

QRY
QRY_IgnoreAssaultZeroDamage((CHARACTER)_NPC,0)
AND
NOT QRY_CRIME_IsEnabled(_NPC,"Assault_Zero_Damage")
THEN
DB_NOOP(1);

PROC
PROC_CrimeCheckAssailant((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,(STRING)_DamageSource,(INTEGER)_DamageAmount,(INTEGER)_StoryActionID)
AND
QRY_CRIME_IsNonEnemyAssaultZeroDamage(_NPC,_Summon,_DamageSource,_DamageAmount,_StoryActionID)
AND
NOT QRY_IsPartyMember(_NPC,1)
AND
QRY_GetCharacterOwnerIfItemSummon(_Player,_Summon)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Attacker)
THEN
PROC_CrimeRegisterAssaultType(_Attacker,_NPC,"Assault_Zero_Damage",_StoryActionID);

PROC
PROC_CrimeCheckAssailant((CHARACTER)_NPC,(CHARACTER)_Player,(CHARACTER)_Summon,(STRING)_DamageSource,(INTEGER)_DamageAmount,(INTEGER)_StoryActionID)
AND
NOT QRY_CRIME_IsNonEnemyAssaultZeroDamage(_NPC,_Summon,_DamageSource,_DamageAmount,_StoryActionID)
AND
NOT QRY_IsPartyMember(_NPC,1)
AND
QRY_GetCharacterOwnerIfItemSummon(_Player,_Summon)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Attacker)
THEN
PROC_CrimeRegisterAssault(_Attacker,_NPC,"",_StoryActionID);

//--- Finish getting Assault type & registering

PROC
PROC_CrimeRegisterAssault((CHARACTER)_Assailant,(CHARACTER)_NPC,(STRING)_CrimeSuffix,(INTEGER)_StoryActionID)
AND
NOT DB_IgnoreAssaultFor(_Assailant, _NPC)
AND
IsEnemy(_NPC, _Assailant, 0)
AND
QRY_CrimeAssaultGetCrimeTypes(_Assailant, _NPC)
AND
DB_CrimeAssaultCrimeType(_AssaultType)
AND
Concatenate(_AssaultType, _CrimeSuffix, _FinalAssaultType)
AND
// Filter out non-existent combinations of crime + suffix
// E.g. There is no Assault_Beast_LowPrio_Silenced, to avoid a single unimportant rat being silenced preventing
// all reactions from other silenced NPCs
QRY_CRIME_IsCrimeFamilyMember(_FinalAssaultType, "Assault")
THEN
PROC_CrimeRegisterAssaultType(_Assailant, _NPC, _FinalAssaultType, _StoryActionID);

//--- Getting Assault type:
// Reset
QRY
QRY_CrimeAssaultGetCrimeTypes((CHARACTER)_Assailant, (CHARACTER)_NPC)
AND
DB_CrimeAssaultCrimeType(_AssaultType)
THEN
NOT DB_CrimeAssaultCrimeType(_AssaultType);

// Custom override
QRY
QRY_CrimeAssaultGetCrimeTypes((CHARACTER)_Assailant, (CHARACTER)_NPC)
AND
QRY_CrimeAssaultGetCrimeTypesCustom(_Assailant, _NPC)
THEN
DB_NOOP(1);

// Catch QRY_CrimeAssaultGetCrimeTypesCustom and set DB_CrimeAssaultCrimeType(_AssaultType) to override generic assaults
QRY
QRY_CrimeAssaultGetCrimeTypesCustom((CHARACTER)_Assailant, (CHARACTER)_NPC)
AND
1 == 0
THEN
DB_NOOP(1);


// Default fallback if no custom override
QRY
QRY_CrimeAssaultGetCrimeTypes((CHARACTER)_Assailant, (CHARACTER)_NPC)
AND
NOT DB_CrimeAssaultCrimeType(_)
AND
IsTagged(_NPC, (TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16, _VictimIsAnimal)
AND
IsTagged(_NPC, (TAG)MONSTER_90101158-141e-4896-8e60-f8db03f6dde3, _VictimIsMonster)
AND
DB_CRIME_AssaultType(_VictimIsAnimal, _VictimIsMonster, _AssaultType)
THEN
DB_CrimeAssaultCrimeType(_AssaultType);

// for pushing (Shove, Thunderwave etc) we take the position of the assailant because the victim's position might
// be too far for the NPCs to react to the crime
PROC
PROC_CrimeRegisterAssaultType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(INTEGER)_StoryActionID)
AND
DB_CRIME_IsShove(_StoryActionID, "End")
AND
NOT DB_CRIME_Assault_NoFallback(_AssaultType)
AND
GetPosition(_Assailant,_X,_Y,_Z)
AND
RealSum(_Y,1.0,_YUp)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID);
PROC_CharacterRegisterCrimeWithPosition(_Assailant,_AssaultType,_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_X,_YUp,_Z,_Victim,_CrimeID);

// for other crimes we take the position of the victim
PROC
PROC_CrimeRegisterAssaultType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(INTEGER)_StoryActionID)
AND
NOT DB_CRIME_IsShove(_StoryActionID, "End")
AND
NOT DB_CRIME_Assault_NoFallback(_AssaultType)
AND
GetPosition(_Victim,_X,_Y,_Z)
AND
RealSum(_Y,1.0,_YUp)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID);
PROC_CharacterRegisterCrimeWithPosition(_Assailant,_AssaultType,_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_X,_YUp,_Z,_Victim,_CrimeID);

PROC
PROC_CrimeRegisterAssaultType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(INTEGER)_StoryActionID)
AND
DB_CRIME_Assault_NoFallback(_AssaultType)
AND
GetPosition(_Victim,_X,_Y,_Z)
AND
RealSum(_Y,1.0,_YUp)
AND
CrimeGetNewID(_CrimeID)
THEN
PROC_CharacterRegisterCrimeWithPosition(_Assailant,_AssaultType,_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_X,_YUp,_Z,_Victim,_CrimeID);

//--- Incapacitated Assault
//noone reacted to the original assault crime, so assume the victim was incapacitated

// We always register both a LowPrio (neutral to victim) and HighPrio (allied to vicitm) variant of an Assault_Beast.
// If someone reacted to the LowPrio version, don't escalate the HighPrio version to Incapacitated/Find_SourceInvestigators
// (nobody will react to the HighPrio version in that case because they're neutral to the victim, not because they're
//   unavailable or unable to see the attacker)
IF
CrimeProcessingStarted(_CrimeID,1)
AND
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID)
AND
IsSubstring("LowPrio",_AssaultType,1)
AND
DB_Crime_Assault_Registered(_Assailant,_HighPrioAssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID)
AND
IsSubstring("HighPrio",_HighPrioAssaultType,1)
THEN
NOT DB_Crime_Assault_Registered(_Assailant,_HighPrioAssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID);

// Don't create incapacitated/Find_SourceInvestigators crimes for low priority animal assault/murder;
// if anyone cares, they'll react to the the high priority one
IF
CrimeProcessingStarted(_CrimeID,0)
AND
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID)
AND
IsSubstring("LowPrio",_AssaultType,0)
THEN
// Make sure the incapacitated crime doesn't get blocked because the assault crime
// already "handled" this story action (because it didn't)
PROC_CRIME_StoryActionHandled_Reset(_StoryActionID,_CrimeID);
PROC_RegisterAssault_Incapacitated(_Assailant,_Victim,_AssaultType,_StoryActionID,_X,_YUp,_Z,_CrimeID);

IF
CrimeProcessingStarted(_CrimeID,_)
AND
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID)
THEN
NOT DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrime_Blocked(_,_,_,_,_,_CrimeID)
AND
DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID)
THEN
NOT DB_Crime_Assault_Registered(_Assailant,_AssaultType,_StoryActionID,_X,_YUp,_Z,_Victim,_CrimeID);

PROC
PROC_RegisterAssault_Incapacitated((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(INTEGER)_StoryActionID,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_PreviousAssaultCrimeID)
AND
QRY_CrimeIncapacitatedAssaultGetCrimeType(_Assailant,_Victim,_AssaultType,_X,_Y,_Z,_PreviousAssaultCrimeID)
AND
DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType(_IncapacitatedAssaultCrimeType)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_IncapacitatedOriginalAssaultType(_CrimeID,_AssaultType);
PROC_CharacterRegisterCrimeWithPosition(_Assailant,_IncapacitatedAssaultCrimeType,_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_X,_Y,_Z,_Victim,_CrimeID);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_Crime_IncapacitatedOriginalAssaultType(_CrimeID,_AssaultType)
THEN
NOT DB_Crime_IncapacitatedOriginalAssaultType(_CrimeID,_AssaultType);

QRY
QRY_CrimeIncapacitatedAssaultGetCrimeType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_PreviousAssaultCrimeID)
AND
DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType(_IncapacitatedAssaultCrimeType)
THEN
NOT DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType(_IncapacitatedAssaultCrimeType);

QRY
QRY_CrimeIncapacitatedAssaultGetCrimeType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_PreviousAssaultCrimeID)
AND
QRY_CrimeIncapacitatedAssaultGetCrimeTypeCustom(_Assailant,_Victim,_AssaultType,_X,_Y,_Z,_PreviousAssaultCrimeID)
THEN
DB_NOOP(1);

// Custom Incapacitated Assault
//set DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType(_) with a custom IncapacitatedAssault crime if needed
QRY 
QRY_CrimeIncapacitatedAssaultGetCrimeTypeCustom((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_PreviousAssaultCrimeID)
THEN
DB_NOOP(1);

//Default IncapacitatedAssault
QRY
QRY_CrimeIncapacitatedAssaultGetCrimeType((CHARACTER)_Assailant,(CHARACTER)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_PreviousAssaultCrimeID)
AND
NOT DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType(_)
THEN
DB_QRYRTN_CrimeIncapacitatedAssaultGetCrimeType("IncapacitatedAssault");
//END_REGION

//REGION Assault-like crime registration
PROC
PROC_CRIME_TryRegisterAssaultLikeCrime((CHARACTER)_Assailant,(GUIDSTRING)_NPC,(INTEGER)_StoryActionID,(STRING)_AssaultCrimeSuffix)
AND
NOT DB_Is_InCombat(_NPC,_)
AND
NOT DB_IgnoreAssaultFor(_Assailant,(CHARACTER)_NPC)
AND
IsCharacter(_NPC,1)
AND
IsDead(_Assailant,0)
AND
IsDead(_NPC,0)
AND
IsPartyMember((CHARACTER)_NPC,1,0)
THEN
PROC_CrimeRegisterAssault(_Assailant,_NPC,_AssaultCrimeSuffix,_StoryActionID);
//END_REGION

//REGION Teleportation Netherswap
IF
UsingSpellOnTarget(_Player,(CHARACTER)_Npc,"Teleportation_Netherswap",_,_,_)
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
AND
NOT QRY_IsAnyInCombat((CHARACTER)_Player,_Npc)
AND
QRY_IsPartyMember(_Player,0)
AND
IsCharacter(_Npc,1)
AND
IsDead(_Player,0)
AND
IsPartyMember(_Npc,1,0)
AND
IsDead(_NPC,0)
THEN
PROC_DoCrimeCheckTeleportAssailant(_Player,_Npc,-1);

PROC
PROC_DoCrimeCheckTeleportAssailant((CHARACTER)_Summon,(CHARACTER)_NPC,(INTEGER)_StoryActionID)
AND
IsSummon(_Summon,1)
AND
CharacterGetOwner(_Summon,_Player)
THEN
PROC_CrimeCheckAssailant(_NPC,_Player,_Summon,"Teleport",1,_StoryActionID);

PROC
PROC_DoCrimeCheckTeleportAssailant((CHARACTER)_Player,(CHARACTER)_NPC,(INTEGER)_StoryActionID)
AND
IsSummon(_Player,0)
THEN
PROC_CrimeCheckAssailant(_NPC,_Player,_Player,"Teleport",1,_StoryActionID);

IF
UsingSpellOnTarget(_Player,(CHARACTER)_Npc,"Teleportation_Netherswap",_,_,_)
AND
DB_Is_InCombat(_Npc, _)
AND
NOT DB_Is_InCombat(_Player, _)
AND
QRY_IsPartyMember(_Player,0)
AND
IsDead((CHARACTER)_Player,0)
AND
IsCharacter(_Npc,1)
AND
IsPartyMember(_Npc,1,0)
AND
IsDead(_NPC,0)
THEN
PROC_EnterCombat(_Player, _NPC);

//END_REGION

//----------------------------------- /ASSAULT -----------------------------------

//REGION GEB_FleeOutOfSight
IF
AutomatedDialogEnded(GEB_AD_CallForHelp_86d42165-a621-b656-e97d-fc68b6240de9,_ID) // For kids looking for help
AND
DB_DialogNPCs(_ID,_NPC,1)
AND
IsTagged(_NPC,(TAG)KID_ee978587-6c68-4186-9bfc-3b3cc719a835,1)
AND
GetFlag((FLAG)GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC, 0) // flagType: Object
THEN
DB_CRIME_RestoreNPCOutOfSight(_NPC);
SetFlag((FLAG)GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC); // flagType: Object

IF
HitpointsChanged((CHARACTER)_NPC, 0.0)
AND
DB_Children(_NPC)
AND
IsImmortal(_NPC, 1)
AND
NOT DB_CantMove(_NPC)
AND
GetFlag((FLAG)GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC, 0) // flagType: Object
THEN
DB_CRIME_RestoreNPCOutOfSight(_NPC);
SetFlag((FLAG)GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC);


IF
FlagSet(GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, (CHARACTER)_NPC, _) // flagType: Object
AND
DB_CantMove_IgnoreDialog(_NPC)
THEN
ClearFlag(GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC, 0);

IF
FlagSet(GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, (CHARACTER)_NPC, _) // flagType: Object
AND
NOT DB_CantMove_IgnoreDialog(_NPC)
THEN
DB_CRIME_FledOutOfSight(_NPC);
PROC_ForceStopDialog(_NPC);

IF
FlagSet(GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, (CHARACTER)_NPC, _) // flagType: Object
AND
NOT DB_CantMove(_NPC)
THEN
PROC_DisappearOutOfSight((CHARACTER)_NPC,"Run",1,"GEB_NPCFledOutOfSight");
PROC_TryStartAD(GEB_AD_CallForHelp_86d42165-a621-b656-e97d-fc68b6240de9,_NPC);

PROC
PROC_StateCleared_CantMove((GUIDSTRING)_NPC)
AND
DB_CRIME_FledOutOfSight((CHARACTER)_NPC)
AND
NOT DB_DisappearedOutOfSight(_NPC, _, _, _, "GEB_NPCFledOutOfSight", _, _)
THEN
PROC_DisappearOutOfSight((CHARACTER)_NPC,"Run",1,"GEB_NPCFledOutOfSight");
PROC_TryStartAD(GEB_AD_CallForHelp_86d42165-a621-b656-e97d-fc68b6240de9,_NPC);
PROC_ForceStopDialog(_NPC);

IF
FlagSet(GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC, _) // flagType: Object
AND
NOT DB_GEB_FledOutOfSight(_NPC,_,_,_)
AND
GetPosition(_NPC,_X,_Y,_Z)
THEN
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);

IF
EntityEvent(_NPC,"GEB_NPCFledOutOfSight")
AND
GetFlag((FLAG)GEB_DontAppearAfter_a1085866-f30e-4165-865c-9992feec580e, _NPC, 0) // flagType: Object
THEN
PROC_CRIME_TryRestoreNPC((CHARACTER)_NPC);
ObjectTimerLaunch(_NPC,"GEB_AppearNPCOutOfSight",15000);

PROC
PROC_CRIME_TryRestoreNPC((CHARACTER)_NPC)
AND
DB_CRIME_RestoreNPCOutOfSight(_NPC)
AND
NOT DB_CRIME_BlockNPCRestore(_NPC)
THEN
SetHitpointsPercentage(_NPC, 100.0);
RemoveHarmfulStatuses(_NPC);

PROC
PROC_CRIME_TryRestoreNPC((CHARACTER)_NPC)
AND
DB_CRIME_RestoreNPCOutOfSight(_NPC)
THEN
NOT DB_CRIME_RestoreNPCOutOfSight(_NPC);

IF
FlagSet(GEB_DontAppearAfter_a1085866-f30e-4165-865c-9992feec580e, _Char, _) // flagType: Object
THEN
ObjectTimerCancel(_Char,"GEB_AppearNPCOutOfSight");

IF
FlagSet(GEB_DontAppearAfter_a1085866-f30e-4165-865c-9992feec580e, (CHARACTER)_Char, _) // flagType: Object
AND
DB_GEB_NPCAppearAfterCombat(_Char,_CombatID)
THEN
NOT DB_GEB_NPCAppearAfterCombat(_Char,_CombatID);

IF
FlagSet(GEB_DontAppearAfter_a1085866-f30e-4165-865c-9992feec580e, _NPC, _) // flagType: Object
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);

//--- Start trying to reappear
IF
ObjectTimerFinished((CHARACTER)_NPC,"GEB_AppearNPCOutOfSight")
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
AND
GetClosestPlayerToPosition(_X,_Y,_Z,_Player,_Dist)
THEN
PROC_CrimeAppearOutOfSightChecks(_NPC,_Player,_Dist);

// Level unloads -> force re-appear immediately
PROC
PROC_LevelUnloading(_)
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);
NOT DB_CRIME_FledOutOfSight((CHARACTER)_NPC);
ObjectTimerCancel(_NPC,"GEB_AppearNPCOutOfSight");
FlushOsirisQueue((CHARACTER)_NPC);
SetOnStage(_NPC,1);
PROC_CRIME_TryRestoreNPC((CHARACTER)_NPC);
TeleportToPosition(_NPC,_X,_Y,_Z);

//--- Check the distance and if the player is dead, in dialog or in combat
PROC
PROC_CrimeAppearOutOfSightChecks((CHARACTER)_NPC,(CHARACTER)_Player,(REAL)_Dist)
AND
_Dist > 20.0
THEN
PROC_AppearOutOfSightAfterFleeing(_NPC);

PROC
PROC_CrimeAppearOutOfSightChecks((CHARACTER)_NPC,(CHARACTER)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
NOT DB_CantTalk(_Player)
THEN
PROC_AppearOutOfSightAfterFleeing(_NPC);

PROC
PROC_CrimeAppearOutOfSightChecks((CHARACTER)_NPC,(CHARACTER)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
DB_Is_InCombat(_Player,_CombatID)
THEN
DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID);

PROC
PROC_CrimeAppearOutOfSightChecks((CHARACTER)_NPC,(CHARACTER)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
IsDead(_Player,1)
THEN
PROC_AppearOutOfSight_DeadClosestPlayer(_NPC,_Player);

PROC
PROC_CrimeAppearOutOfSightChecks((CHARACTER)_NPC,(CHARACTER)_Player,(REAL)_Dist)
AND
NOT DB_GEB_NPCAppearAfterCombat(_NPC,_)
AND
_Dist <= 20.0
AND
SpeakerGetDialog(_Player,0,_,_Inst)
THEN
DB_GEB_NPCAppearAfterDialog(_NPC,_Inst);

// Try to find a live player
PROC
PROC_AppearOutOfSight_DeadClosestPlayer((CHARACTER)_NPC,(CHARACTER)_Player)
AND
GetClosestAlivePlayer(_Player,_AlivePlayer,_)
THEN
DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer);

PROC
PROC_AppearOutOfSight_DeadClosestPlayer((CHARACTER)_NPC,(CHARACTER)_Player)
AND
NOT DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_)
THEN
PROC_AppearOutOfSightAfterFleeing(_NPC);

PROC
PROC_AppearOutOfSight_DeadClosestPlayer((CHARACTER)_NPC,(CHARACTER)_)
AND
DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer)
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
AND
GetDistanceToPosition(_AlivePlayer,_X,_Y,_Z,_Dist)
THEN
NOT DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer);
PROC_CrimeAppearOutOfSightChecks(_NPC,(CHARACTER)_AlivePlayer,_Dist);

//--- Recheck after dialog & combat
IF
DialogEnded(_,_Inst)
AND
DB_GEB_NPCAppearAfterDialog(_NPC,_Inst)
THEN
NOT DB_GEB_NPCAppearAfterDialog(_NPC,_Inst);
ObjectTimerLaunch(_NPC,"GEB_AppearNPCOutOfSight",3000); // restart from the beginning (delay in case combat starts after the dialog)

IF
CombatEnded(_CombatID)
AND
DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID)
THEN
NOT DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID);
ObjectTimerLaunch(_NPC,"GEB_AppearNPCOutOfSight",3000); // restart the checks from the beginning

//--- Appear
PROC
PROC_AppearOutOfSightAfterFleeing((CHARACTER)_NPC)
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_CRIME_FledOutOfSight(_NPC);
AppearOutOfSightToPosition((CHARACTER)_NPC,_X,_Y,_Z,NULL_00000000-0000-0000-0000-000000000000,0,NULL_00000000-0000-0000-0000-000000000000,"GEB_NPCAppeared");
ClearFlag((FLAG)GEB_FleeOutOfSight_f488cbb2-9aca-452f-9b8d-652e07561785, _NPC, 0); // flagType: Object
PROC_CharacterFullRestore(_NPC);

IF
EntityEvent(_NPC,"GEB_NPCAppeared")
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);
// the returnToIdlePos variable in the Anubis state will have been cleared by the StoryOverride events from fleeing and appearing
SetVarFloat3(_NPC,"CRIME_ReturnPos",_X,_Y,_Z);
SetEntityEvent(_NPC,"SetPeaceReturnFromStoryThroughBlackboard",1);

//END_REGION

//REGION Stealing
IF
CharacterStoleItem(_Character,_Item,_ItemTemplate,_,_,_,_Victim,_SrcContainer,_Amount,_Value)
AND
IsPartyMember(_Character,0,1)
AND
// do not register Steal for stealing from a container. The problem with doing this is
// that NPCs will detect missing items from a barrel without looking into it
_SrcContainer==NULL_00000000-0000-0000-0000-000000000000
AND
GetPosition(_Character,_X,_Y,_Z)
AND
RealSum(_Y,0.5,_YUp)
THEN
DB_CRIME_StealQueuedID(_Character,_Victim,_X,_YUp,_Z,"Steal");
DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value);
PROC_CRIME_PreventMoveForbiddenItem(_Item);
TimerCancel("CRIME_ProcessThefts");
TimerLaunch("CRIME_ProcessThefts",0);

// Crime reaction (without crime scene) when stealing something from a container in combat
// (outside combat, UseForbiddenItem triggers when you are looting from a container, but
//  that one does not trigger in combat)
IF
CharacterStoleItem(_Character,_Item,_ItemTemplate,_,_,_,_Victim,_SrcContainer,_Amount,_Value)
AND
IsPartyMember(_Character,0,1)
AND
_SrcContainer!=NULL_00000000-0000-0000-0000-000000000000
AND
DB_Is_InCombat(_Character,_CombatID)
AND
GetPosition(_Character,_X,_Y,_Z)
AND
RealSum(_Y,0.5,_YUp)
THEN
DB_CRIME_StealQueuedID(_Character,_Victim,_X,_YUp,_Z,"Steal_NoCrimescene");
DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value);
PROC_CRIME_PreventMoveForbiddenItem(_Item);
TimerCancel("CRIME_ProcessThefts");
TimerLaunch("CRIME_ProcessThefts",0);

IF
DB_CRIME_StealQueuedID(_Character,_Victim,_X1,_YUp1,_Z1,_Type1)
AND
DB_CRIME_StealQueuedID(_Character,_Victim,_X2,_YUp2,_Z2,_Type2)
AND
NOT QRY_CRIME_TheftEqual(_X1,_X2,_YUp1,_YUp2,_Z1,_Z2,_Type1,_Type2)
THEN
NOT DB_CRIME_StealQueuedID(_Character,_Victim,_X2,_YUp2,_Z2,_Type2);

QRY
QRY_CRIME_TheftEqual((REAL)_X,(REAL)_X,(REAL)_YUp,(REAL)_YUp,(REAL)_Z,(REAL)_Z,(STRING)_Type,(STRING)_Type)
THEN
DB_NOOP(1);

// Stealing consists of picking up (= moving) an item, so we will also get a MovedBy event.
// Since there are no story action IDs available in this case, just ignore the pending MovedBy event
// for this item
PROC
PROC_CRIME_PreventMoveForbiddenItem((ITEM)_Item)
AND
DB_CRIME_PendingMove(_Player,_CrimeName,_Item,_Owner)
THEN
NOT DB_CRIME_PendingMove(_Player,_CrimeName,_Item,_Owner);

IF
TimerFinished("CRIME_ProcessThefts")
AND
DB_CRIME_StealQueuedID(_Character,_Victim,_X,_Y,_Z,_CrimeType)
AND
CrimeGetNewID(_CrimeID)
AND
QRY_CRIME_DefineStolenItems(_CrimeID,_CrimeType,_Character,_Victim)
AND
DB_QRYRTN_CRIME_DefineStolenItems(_AtLeastOneNonBlockedEvidence)
THEN
NOT DB_CRIME_StealQueuedID(_Character,_Victim,_X,_Y,_Z,_CrimeType);
PROC_CRIME_RegisterStealCrimeIfNotBlocked(_Character,_CrimeType,_X,_Y,_Z,_Victim,_CrimeID,_AtLeastOneNonBlockedEvidence);

PROC
PROC_CRIME_RegisterStealCrimeIfNotBlocked((CHARACTER)_Character,(STRING)_CrimeType,(REAL)_X,(REAL)_Y,(REAL)_Z,(CHARACTER)_Victim,(INTEGER)_CrimeID,1)
THEN
PROC_CharacterRegisterCrimeWithPosition(_Character,_CrimeType,NULL_00000000-0000-0000-0000-000000000000,_X,_Y,_Z,_Victim,_CrimeID);

QRY
QRY_CRIME_DefineStolenItems((INTEGER)_CrimeID,(STRING)_CrimeType,(CHARACTER)_Character,(CHARACTER)_Victim)
AND
DB_QRYRTN_CRIME_DefineStolenItems(_Result)
THEN
NOT DB_QRYRTN_CRIME_DefineStolenItems(_Result);

QRY
QRY_CRIME_DefineStolenItems((INTEGER)_CrimeID,(STRING)_CrimeType,(CHARACTER)_Character,(CHARACTER)_Victim)
THEN
DB_QRYRTN_CRIME_DefineStolenItems(0);

QRY
QRY_CRIME_DefineStolenItems((INTEGER)_CrimeID,(STRING)_CrimeType,(CHARACTER)_Character,(CHARACTER)_Victim)
AND
DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value)
AND
// Still enable intercepts per evidence
NOT QRY_CRIME_Steal_BlockRegisterCrime((CHARACTER)_Character,_CrimeType,_Item,_Victim,_CrimeID)
THEN
DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value);
NOT DB_QRYRTN_CRIME_DefineStolenItems(0);
DB_QRYRTN_CRIME_DefineStolenItems(1);

QRY
QRY_CRIME_DefineStolenItems((INTEGER)_CrimeID,(STRING)_CrimeType,(CHARACTER)_Character,(CHARACTER)_Victim)
AND
DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value)
THEN
NOT DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value);

QRY
QRY_CRIME_Steal_BlockRegisterCrime((CHARACTER)_Character,(STRING)_CrimeType,(GUIDSTRING)_Item,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
QRY_CRIME_BlockRegisterCrime((CHARACTER)_Character,_CrimeType,_Item,_Victim,_CrimeID)
THEN
PROC_CharacterRegisterCrime_Blocked(_Character,_CrimeType,0,_Item,_Victim,_CrimeID);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value)
AND
CrimeAddItemEvidence(_CrimeID,_Item,_ItemTemplate,_Victim,_Amount,_Value,_)
THEN
DB_Crime_Stolen(_Item);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value)
THEN
NOT DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
NOT DB_CRIME_Steal_ProcessingSuccesses(1)
AND 
DB_Crime_Stolen(_Item)
THEN
// Prevent recursion when we call PROC_CharacterRegisterCrime_Success again
DB_CRIME_Steal_ProcessingSuccesses(1);
// Call the Success proc for each individual item that was stolen, as we have some intercepts that check for specific evidence
PROC_CharacterRegisterCrime_Success(_Char,_CrimeType,_StoryActionID,_Item,_Victim,_CrimeID);
NOT DB_CRIME_Steal_ProcessingSuccesses(1);
NOT DB_Crime_Stolen(_Item);

PROC
PROC_CharacterRegisterCrime_Blocked((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value)
THEN
NOT DB_CRIME_Steal(_CrimeID,_Item,_ItemTemplate,_Amount,_Value);


// Level starts unloading before crime registered -> cancel/clean up
PROC
PROC_LevelUnloading(_)
AND
DB_CRIME_StealQueuedID(_CrimeType,_Character,_X,_Y,_Z,_Victim)
THEN
NOT DB_CRIME_StealQueuedID(_CrimeType,_Character,_X,_Y,_Z,_Victim);

PROC
PROC_LevelUnloading(_)
AND
DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value)
THEN
NOT DB_CRIME_StealQueued(_Character,_Item,_ItemTemplate,_Victim,_Amount,_Value);

PROC
PROC_LevelUnloading(_)
THEN
TimerCancel("CRIME_ProcessThefts");

//END_REGION

//REGION Murder (animals and non-animals)

//REGION Helpers
// A killed character may get removed from a combat before the CharacterKilledByCharacter event gets triggered
// -> also check DB_Was_InCombat for the _Victim
QRY
QRY_CrimeKillerVictimWereInSameCombat((GUIDSTRING)_Killer,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Killer,_ID)
AND
DB_Was_InCombat(_Victim,_ID)
THEN
DB_NOOP(1);

QRY
QRY_CrimeKillerVictimWereInSameCombat((GUIDSTRING)_Killer,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Killer,_ID)
AND
DB_Is_InCombat(_Victim,_ID)
THEN
DB_NOOP(1);

// Killing a totem or a summon is not murder
QRY
QRY_CrimeCharacterBlockCreateMurder((CHARACTER)_Char)
AND
IsSummon(_Char,1)
THEN
DB_NOOP(1);

// If the character no longer exists, assume it was a summon that was already fully destroyed
QRY
QRY_CrimeCharacterBlockCreateMurder((CHARACTER)_Char)
AND
Exists(_Char,0)
THEN
DB_NOOP(1);

//END_REGION

//REGION Determine crime type
// By default, murdering a BEAST results in "Murder_Beast", murdering a non-BEAST MONSTER in "Murder_Monster",
//  and murdering anyone else in "Murder". Can override QRY_CrimeMurderGetCrimeTypesCustom() to return custom results.
//
// Note: QRY_CrimeMurderGetCrimeTypesCustom() can be called multiple times for the same murder
//   (-> should not keep state, e.g. don't assume second call is for second murder)

// Define signature for custom query
QRY
QRY_CrimeMurderGetCrimeTypesCustom((CHARACTER)_Killer,(CHARACTER)_Victim)
AND
1 == 0
THEN
DB_NOOP(1);

// Reset previous result, if any
QRY
QRY_CrimeMurderGetCrimeTypes((CHARACTER)_Killer,(CHARACTER)_Victim)
AND
DB_QRYRTN_CrimeMurderGetCrimeTypes(_Type)
THEN
NOT DB_QRYRTN_CrimeMurderGetCrimeTypes(_Type);

// Query custom overrides
QRY
QRY_CrimeMurderGetCrimeTypes((CHARACTER)_Killer,(CHARACTER)_Victim)
AND
QRY_CrimeMurderGetCrimeTypesCustom(_Killer,_Victim)
THEN
DB_NOOP(1);

// Default fallbacks
QRY
QRY_CrimeMurderGetCrimeTypes((CHARACTER)_Killer,(CHARACTER)_Victim)
AND
NOT DB_QRYRTN_CrimeMurderGetCrimeTypes(_)
AND
IsTagged(_Victim,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,_Beast)
AND
IsTagged(_Victim,(TAG)MONSTER_90101158-141e-4896-8e60-f8db03f6dde3,_Monster)
AND
QRY_Character_GetIsHidden(_Killer)
AND
DB_QRYRTN_Character_GetIsHidden(_Sneaking)
AND
DB_CRIME_MurderType(_Sneaking,_Beast,_Monster,_MurderType)
THEN
DB_QRYRTN_CrimeMurderGetCrimeTypes(_MurderType);
//END_REGION

//REGION Witnesses that should ignore this murder crime
// Only have to do something before registering the crime if
// the witness does not ignore crimes like this in general
PROC
PROC_CrimeMurderDefineSilentWitness((INTEGER)_CrimeID,(CHARACTER)_Witness,(CHARACTER)_Killer,(CHARACTER)_Victim)
AND
QRY_CrimeMurderGetCrimeTypes(_Killer,_Victim)
AND
DB_QRYRTN_CrimeMurderGetCrimeTypes(_CrimeType)
AND
NOT DB_CharacterCrimeDisabled(_Witness,_CrimeType)
THEN
DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness);
// Don't set it to ignore this crime yet, as another crime (murder)
// could occur between now and when this murder is registered due to
// the use of an iterator) -- that will be done by ProcCrimeCreateMurder)

// Convert DB_CrimeSilentWitness() to DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(), as used by ProcCharacterRegisterCrimeWithPosition()
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
AND
DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness)
THEN
NOT DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness);
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_Witness);

// NPCs that should ignore the murder of this victim should be treated as silent witnesses
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTER)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTER)_Victim)
AND
DB_MurderIgnoreFor((CHARACTER)_Witness,(CHARACTER)_Victim)
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_Witness);
//END_REGION

//REGION Register the murder crime
PROC
PROC_CrimeCreateMurder((CHARACTER)_Killer,(CHARACTER)_Victim,(INTEGER)_CrimeID,(STRING)_MurderType,(INTEGER)_StoryActionID)
AND
GetPosition(_Victim,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
THEN
PROC_CharacterRegisterCrimeWithPosition(_Killer,_MurderType,_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_x,_yUp,_z,_Victim,_CrimeID);
//END_REGION

//REGION Knocked out an NPC (one-shot) outside combat
IF
StatusApplied((CHARACTER)_Defender,"KNOCKED_OUT",_Attacker,_StoryActionID)
AND
NOT DB_Players(_Defender)
AND 
NOT DB_PlayerSummons(_Defender)
AND
NOT DB_DontCreateMurder(_Defender)
AND
QRY_IsPartyMember(_Attacker,0)
THEN
PROC_CRIME_OneshotKnockOut((CHARACTER)_Attacker,_Defender,_StoryActionID);

PROC
PROC_CRIME_OneshotKnockOut((CHARACTER)_Attacker,(CHARACTER)_Defender,(INTEGER)_StoryActionID)
AND
IsEnemy(_Defender,_Attacker,0)
AND
NOT QRY_CrimeCharacterBlockCreateMurder(_Defender)
THEN
PROC_CrimeRegisterAssaultType(_Attacker,_Defender,"KnockOut",_StoryActionID);
//END_REGION

//REGION 1) Killed a non-enemy NPC outside of combat (one-shot, so combat did not have a chance to start)
IF
KilledBy(_Defender,_AttackerOwner,_Attacker,_StoryActionID)
AND
NOT DB_Players(_Defender)
AND 
NOT DB_PlayerSummons(_Defender)
AND
NOT DB_DontCreateMurder(_Defender)
AND
QRY_GetCharacterOwnerIfItemSummon(_AttackerOwner,_Attacker)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Killer)
AND
NOT QRY_CrimeKillerVictimWereInSameCombat(_Killer,_Defender)
AND
QRY_IsPartyMember(_Killer,0)
THEN
PROC_CRIME_OneshotMurder((CHARACTER)_Killer,_Defender,_StoryActionID);

PROC
PROC_CRIME_OneshotMurder((CHARACTER)_Attacker,(CHARACTER)_Defender,(INTEGER)_StoryActionID)
AND
IsEnemy(_Defender,_Attacker,0)
AND
IsPartyFollower(_Attacker,0)
AND
NOT QRY_CrimeCharacterBlockCreateMurder(_Defender)
AND
QRY_CrimeMurderGetCrimeTypes(_Attacker,_Defender)
AND
DB_QRYRTN_CrimeMurderGetCrimeTypes(_MurderType)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_CrimeMurderCreated(_Defender,_Attacker);
PROC_CrimeCreateMurder(_Attacker,_Defender,_CrimeID,_MurderType,_StoryActionID);

PROC
PROC_CRIME_OneshotMurder((CHARACTER)_Attacker,(CHARACTER)_Defender,(INTEGER)_StoryActionID)
AND
NOT DB_CrimeMurderCreated(_Defender,_Attacker)
THEN
PROC_CRIME_OneshotMurder_Fallback(_Attacker,_Defender,_StoryActionID);

PROC
PROC_CRIME_OneshotMurder_Fallback(_Attacker,_Defender,_StoryActionID)
THEN
DB_NOOP(1);
//END_REGION

//REGION 2) Killed an NPC in a combat following an assault crime
// Current logic:
//  - Create a murder for any NPC that you kill in this combat
//  - This murder is, however, ignored by anyone within a 25 metre range that was not in combat (except if allies and can fight/join combat)
// Reasoning: the characters that joined in the combat due to the assault, presumably would
// have done the same for murder. The ones that did not, might not join for murder either. They also
// might, but we don't have a good way to determine this. Creating a murder in this case can easily
// lead to an avalanche where a whole city starts fighting a player, which is not good -> be very
// restrictive about who will care about such a murder
//
// Don't check for IsEnemy(_NPC,0), because when someone attacks you after you assaulted them,
// they will obviously be an enemy to you.
IF
KilledBy(_Defender,_AttackerOwner,_Attacker,_StoryActionID)
AND
// This DB is set an NPC joins combat because of a crime, and also for other
// characters that join a combat in which a crime victim is involved
DB_Crime_PlayerAttacked(_,_,_Defender)
AND
DB_Is_InCombat(_Defender,_ID)
AND
NOT DB_Players(_Defender)
AND
NOT DB_DontCreateMurder(_Defender)
AND
QRY_GetCharacterOwnerIfItemSummon(_AttackerOwner,_Attacker)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Killer)
AND
NOT DB_CrimeMurderCreated(_Defender,_Killer)
AND
QRY_IsPartyMember(_Killer,0)
AND
IsPartyFollower(_Killer,0)
AND
NOT QRY_CrimeCharacterBlockCreateMurder(_Defender)
AND
QRY_CrimeMurderGetCrimeTypes(_Killer,_Defender)
AND
DB_QRYRTN_CrimeMurderGetCrimeTypes(_MurderType)
AND
CrimeGetNewID(_CrimeID)
AND
IntegertoString(_CrimeID,_Iterator)
AND
Concatenate("GEB_IgnoreCrime_",_Iterator,_IteratorID)
AND
Concatenate(_IteratorID,"_Finished",_IteratorFinishedID)
THEN
DebugText(_Defender,"GenCrime: Assault murder scene");
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_MurderType,_Defender,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID);
IterateCharactersAround(_Defender,25.0,_IteratorID,_IteratorFinishedID);

PROC
PROC_CrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTER)_Witness,(CHARACTER)_Killer,(CHARACTER)_Victim)
AND
NOT DB_Is_InCombat(_Witness,_)
AND
IsAlly(_Witness,_Victim,_IsAlly)
AND
CanFight(_Witness,_CanFight)
AND
CanJoinCombat(_Witness,_CanJoinCombat)
AND
DB_LogicAnd(_CanFight,_CanJoinCombat,_CanFightAndJoinCombat)
AND
// If we're allied to the victim, and can fight/join combat, the only reason we're not in this combat is because we couldn't see it
// -> still treat killing as murder when we notice it later
// Example: assault Silver, kill him in combat, and later on Kagha notices his corpse. 
DB_LogicAnd(_CanFightAndJoinCombat,_IsAlly,0)
THEN
PROC_CrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Allies let allies commit murders! That's what real friendship is all about.
PROC
PROC_CrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTER)_Witness,(CHARACTER)_Killer,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Witness,_)
AND
IsAlly(_Witness,_Killer,1)
THEN
PROC_CrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Neutral against killer -> not attacking now -> should not care afterwards either
PROC
PROC_CrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTER)_Witness,(CHARACTER)_Killer,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Witness,_)
AND
IsNeutral(_Witness,_Killer,1)
THEN
PROC_CrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// An ally of my ally is my friend (e.g. Butter in Fort Joy is only allied to the player that charmed her).
PROC
PROC_CrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTER)_Witness,(CHARACTER)_Killer,(CHARACTER)_Victim)
AND
DB_Is_InCombat(_Witness,_)
AND
DB_Players(_Player)
AND
IsAlly(_Witness,_Player,1)
AND
IsAlly(_Player,_Killer,1)
THEN
PROC_CrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Ignore murder seen in combat
IF
EntityEvent((CHARACTER)_NPC,_IteratorID)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_,_DeadMan,_IteratorID,_,_Killer,_)
AND
// PermaDefeated rather than defeated, because otherwise characters in the combat that were
// e.g. petrified at the time of the kill will still start investigating after the combat
// ends
NOT DB_PermaDefeated((CHARACTER)_NPC)
THEN
PROC_CrimeMurderMaybeMakeSilentWitness(_CrimeID,_NPC,_Killer,_DeadMan);

// Create Murder at the end
IF
EntityEvent(_NPC,_IteratorFinishedID)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_MurderType,_DeadMan,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID)
AND
_NPC == NULL_00000000-0000-0000-0000-000000000000
THEN
NOT DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_MurderType,_DeadMan,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID);
//DebugText(_DeadMan,"GenCrime: Normal Murder Crime Scene");
PROC_CrimeCreateMurder(_Killer,_DeadMan,_CrimeID,_MurderType,_StoryActionID);

QRY
QRY_HasDontCreateMurderInCombat((GUIDSTRING)_ID)
AND
DB_Is_InCombat(_NPCS,_ID)
AND
DB_DontCreateMurder((CHARACTER)_NPCS)
THEN
DB_NOOP(1);

// One DB_DontCreateMurder() NPC in a combat -> killing others that join the combat should not create murders either
// (TODO: check that they're allies of one of the DB_DontCreateMurder() NPCs -- especially now that neutrals don't
//  join random combats anymore)
IF
EnteredCombat(_Obj,_ID)
AND
IsCharacter(_Obj,1)
AND
QRY_HasDontCreateMurderInCombat(_ID)
AND
DB_Is_InCombat(_NPC,_ID)
AND
IsCharacter(_NPC,1)
AND
NOT DB_Players((CHARACTER)_NPC)
AND
NOT DB_DontCreateMurder(_NPC)
THEN
DB_DontCreateMurder(_NPC);
DB_CrimeCreateMurderAfterCombat(_NPC,_ID);
DebugText(_NPC,"GenCrime: Killing me won't create a murder in this combat, because I joined a combat with others whose murder gets ignored");

IF
SwitchedCombat((CHARACTER)_NPC,_OldCombatID,_NewCombatID)
AND
DB_CrimeCreateMurderAfterCombat(_NPC,_OldCombatID)
THEN
NOT DB_CrimeCreateMurderAfterCombat(_NPC,_OldCombatID);
DB_CrimeCreateMurderAfterCombat(_NPC,_NewCombatID);

IF
CombatEnded(_CombatID)
AND
DB_CrimeCreateMurderAfterCombat(_NPC,_CombatID)
THEN
NOT DB_CrimeCreateMurderAfterCombat(_NPC,_CombatID);
NOT DB_DontCreateMurder(_NPC);

IF
EnteredCombat(_NPC,_)
AND
IsCharacter(_NPC,1)
THEN
PROC_CrimeAddToAttackedDBIfAssaultCombat((CHARACTER)_NPC);

IF
SwitchedCombat(_NPC,_,_)
AND
IsCharacter(_NPC,1)
THEN
PROC_CrimeAddToAttackedDBIfAssaultCombat((CHARACTER)_NPC);

IF
DB_Crime_PlayerAttacked(_CrimeID,_,_NPC)
THEN
PROC_CrimeAddToAttackedDBIfAssaultCombat((CHARACTER)_NPC);

PROC
PROC_CrimeAddToAttackedDBIfAssaultCombat((CHARACTER)_NPC)
AND
DB_Crime_PlayerAttacked(_CrimeID,_Player,_OrigVic)
AND
DB_Is_InCombat(_Player,_ID)
AND
DB_Is_InCombat(_NPC2,_ID)
AND
NOT DB_Crime_PlayerAttacked(_CrimeID,_Player,(CHARACTER)_NPC2)
AND
IsCharacter(_NPC2,1)
AND
IsPartyMember(_NPC2,1,0)
AND
IsAlly(_OrigVic,_NPC2,1)
THEN
DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC2);
DebugText(_NPC2,"GenCrime: Killing me will create a murder scene (probably joined combat to help assaulted NPC), although it will be ignored by anyone within a 25m radius of this combat");

IF
LeftCombat((CHARACTER)_NPC,_)
AND
DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC)
THEN
NOT DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_Crime_PlayerAttacked(_Old,_Player,_NPC)
THEN
NOT DB_Crime_PlayerAttacked(_Old,_Player,_NPC);
DB_Crime_PlayerAttacked(_New,_Player,_NPC);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_Old,_MurderType,_DeadMan,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID)
THEN
NOT DB_CrimeMurderSilentWitnessCollectionContext(_Old,_MurderType,_DeadMan,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID);
DB_CrimeMurderSilentWitnessCollectionContext(_New,_MurderType,_DeadMan,_IteratorID,_IteratorFinishedID,_Killer,_StoryActionID);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_CrimeSilentWitness(_Old,_CrimeType,_NPC)
THEN
NOT DB_CrimeSilentWitness(_Old,_CrimeType,_NPC);
DB_CrimeSilentWitness(_New,_CrimeType,_NPC);
//END_REGION

//REGION Reset DB_CrimeMurderCreated
IF
KilledBy(_,_,_,_)
AND
DB_CrimeMurderCreated(_Defender,_Attacker)
THEN
NOT DB_CrimeMurderCreated(_Defender,_Attacker);
//END_REGION

//END_REGION

//REGION Pickpocket

IF
RequestPickpocket(_Player,_Npc)
AND
QRY_BlockPickpocket(_Player, _Npc)
THEN
DB_PickpocketingBlocked(1);
PROC_TryStartAD(GEB_AD_CannotPickpocket_57a33157-d1d7-9e9d-fb3d-300883dd3abd,_Player);

QRY
QRY_BlockPickpocket((CHARACTER)_Player, (CHARACTER)_Npc)
AND
IsPartyMember(_Npc, 1, 0)
AND
IsTagged(_Npc, (TAG)BLOCK_PICKPOCKET_fe2e65d3-a8de-45bf-a372-c339adec669e, 1)
THEN
DB_NOOP(1);

QRY
QRY_BlockPickpocket((CHARACTER)_Player, (CHARACTER)_Npc)
AND
IsPartyMember(_Npc, 1, 0)
AND
IsTagged(_Npc, ALLOW_PICKPOCKET_FOR_SUBRACE_8064838d-48cc-454e-bdcd-7a1f76f798c5, 0)
AND
DB_CannotPickpocketTags(_Tag)
AND
IsTagged(_Npc, _Tag, 1)
THEN
DB_NOOP(1);

IF
CharacterPickpocketFailed(_Player,_NPC)
THEN
RemoveStatusesWithGroup(_Player,"SG_Invisible",_NPC);


IF
RequestPickpocket(_Player,_Npc)
AND
DB_PickpocketingBlocked(1)
THEN
StartPickpocket(_Player,_Npc,0);

IF
RequestPickpocket(_Player,_Npc)
AND
NOT DB_PickpocketingBlocked(1)
AND
IsPartyMember(_Npc, 1, 0)
THEN
PROC_GenTradeItems(_Player,_Npc);
StartPickpocket(_Player,_Npc,1);

IF
RequestPickpocket(_Player,_Npc)
THEN
NOT DB_PickpocketingBlocked(1);

IF
RequestPickpocket(_Player,_OtherPlayer)
AND
IsPartyMember(_OtherPlayer, 1, 1)
AND
NOT QRY_BlockPickpocket(_Player, _OtherPlayer)
THEN
StartPickpocket(_Player,_OtherPlayer,1);


//--- PICKPOCKET SUCCESS
IF
CharacterPickpocketSuccess(_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue) //TODO: Only trigger on HighValueItems
AND
CharacterIsCrimeEnabled(_Victim,"EmptyPocketNoticed",1)
AND
CharacterCanSpotCrimes(_Victim,1)
AND
Random(10000,_Rand)
AND
IntegerSum(_Rand,5000,_Time)
AND
// In case the item no longer exists
GetPosition(_Thief,_X,_Y,_Z)
THEN
DB_Pickpocketed(_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);
PROC_CRIME_EvidenceOwnership_Record(-1,_Item,_X,_Y,_Z);
ObjectTimerCancel(_Victim,"CRIME_Pickpocket_CheckPockets");
ObjectTimerLaunch(_Victim,"CRIME_Pickpocket_CheckPockets",_Time);


IF
ObjectTimerFinished((CHARACTER)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
IsDead(_Victim,0)
AND
IsSpeakerReserved(_Victim,1) // Victim is in dialog, restart timer to delay reaction
AND
Random(10000,_Rand)
AND
IntegerSum(_Rand,5000,_Time)
THEN
ObjectTimerCancel(_Victim,"CRIME_Pickpocket_CheckPockets");
ObjectTimerLaunch(_Victim,"CRIME_Pickpocket_CheckPockets",_Time);

IF
ObjectTimerFinished((CHARACTER)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
QRY_SpeakerIsAvailable(_Victim)
AND
CrimeGetNewID(_CrimeID)
AND
DB_Pickpocketed(_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue)
THEN
NOT DB_OnlyOnce("CRIME_Pickpocket_PlayAnimation");
NOT DB_Pickpocketed(_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);
PROC_CRIME_EvidenceOwnership_Remove(-1,_Item);
DB_CRIME_EmptyPocketNoticed(_CrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);

IF
ObjectTimerFinished((CHARACTER)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
QRY_OnlyOnce_Reset("CRIME_EmptyPocketNoticed")
AND
DB_CRIME_EmptyPocketNoticed(_CrimeID,_Thief,_Victim,_,_,_,_)
AND
QRY_OnlyOnce("CRIME_EmptyPocketNoticed")
AND
GetPosition(_Victim,_x,_y,_z)
THEN
// Will add evidence in PROC_CharacterRegisterCrime_Success
PROC_CharacterRegisterCrimeWithPosition(_Thief,"EmptyPocketNoticed",NULL_00000000-0000-0000-0000-000000000000,_x,_y,_z,_Victim,_CrimeID); //BUG? it doesn't check if the item is still missing; it could have been reverse-pickpocketed by a different player before the end of the timer?

IF
OnCrimeMergedWith(_OldCrimeID, _NewCrimeID)
AND
DB_CRIME_EmptyPocketNoticed(_OldCrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue)
THEN
NOT DB_CRIME_EmptyPocketNoticed(_OldCrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);
DB_CRIME_EmptyPocketNoticed(_NewCrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);

// Add the evidence for the EmptyPocketNoticed crime
PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_EmptyPocketNoticed(_CrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue)
AND
CrimeAddItemEvidence(_CrimeID,_Item,_ItemTemplate,_Victim,_Amount,_GoldValue,_)
THEN
// Don't clear, still necesary for the EmptyPocketNoticedInvestigation crime
DB_NOOP(1);

// Clean up (also if registering the crime got blocked)
PROC
PROC_CRIME_Finished((INTEGER)_InvestigationID)
AND
DB_CRIME_EmptyPocketNoticed(_InvestigationID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue)
THEN
NOT DB_CRIME_EmptyPocketNoticed(_InvestigationID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);

IF
OnCrimeResolved(_CrimeID, _Victim, _Thief, _, _, _)
AND
QRY_OnlyOnce_Reset("CRIME_EmptyPocketNoticed")
AND
DB_CRIME_EmptyPocketNoticed(_CrimeID,_,_,_,_,_,_)
AND
QRY_OnlyOnce("CRIME_EmptyPocketNoticed")
AND
CrimeGetNewID(_InvestigationID)
AND
DB_CRIME_EmptyPocketNoticed(_CrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue)
THEN
NOT DB_CRIME_EmptyPocketNoticed(_CrimeID,_Thief,_Victim,_Item,_ItemTemplate,_Amount,_GoldValue);
DB_CRIME_EmptyPocketStolen(_InvestigationID,_Item,_ItemTemplate,_Amount,_GoldValue);

IF
OnCrimeResolved(_CrimeID, _Victim, _Thief, _, _, _)
AND
QRY_OnlyOnce_Reset("CRIME_EmptyPocketNoticedInvestigation")
AND
DB_CRIME_EmptyPocketStolen(_InvestigationID,_,_,_,_)
AND
QRY_OnlyOnce("CRIME_EmptyPocketNoticedInvestigation")
AND
GetPosition(_Victim,_x,_y,_z)
THEN
// Will add evidence in PROC_CharacterRegisterCrime_Success
PROC_CharacterRegisterCrimeWithPosition(_Thief,"EmptyPocketNoticedInvestigation",NULL_00000000-0000-0000-0000-000000000000,_x,_y,_z,_Victim,_InvestigationID);

// Add the evidence for the EmptyPocketNoticedInvestigation crime
PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_EmptyPocketStolen(_CrimeID,_Item,_ItemTemplate,_Amount,_GoldValue)
AND
CrimeAddItemEvidence(_CrimeID,_Item,_ItemTemplate,_Victim,_Amount,_GoldValue,_)
THEN
// Clear so that on OnCrimeResolved of this crime, we don't re-register it
NOT DB_CRIME_EmptyPocketStolen(_CrimeID,_Item,_ItemTemplate,_Amount,_GoldValue);

PROC
PROC_CharacterRegisterCrime_Blocked((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_CRIME_EmptyPocketStolen(_InvestigationID,_Item,_ItemTemplate,_Amount,_GoldValue)
THEN
NOT DB_CRIME_EmptyPocketStolen(_InvestigationID,_Item,_ItemTemplate,_Amount,_GoldValue);


// Cancel pickpocket timer and clear DB
PROC
PROC_CRIME_Pickpocket_CheckPockets_ObjectTimerCancel((CHARACTER)_Victim)
THEN
ObjectTimerCancel(_Victim,"CRIME_Pickpocket_CheckPockets");

PROC
PROC_CRIME_Pickpocket_CheckPockets_ObjectTimerCancel((CHARACTER)_Victim)
AND
DB_Pickpocketed(_Thief,_Victim,_Item)
THEN
NOT DB_Pickpocketed(_Thief,_Victim,_Item);


//--- PICKPOCKET FAIL
//--- Don't create a crime if it failed because of a tag
IF
CharacterPickpocketFailed(_Player,_Npc)
AND
QRY_BlockPickpocket(_Player, _Npc)
THEN
DB_PickpocketingBlocked(1);

//--- Check if player already stole items on that NPC
//--- Pass the item as evidence if it's the case.
IF
CharacterPickpocketFailed(_Player,_Npc)
AND
NOT DB_PickpocketingBlocked(1)
AND
IsPartyMember(_Npc, 1, 0)
THEN
PROC_CrimePickpocketFailedFlow(_Player,_Npc);

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
THEN
ObjectTimerCancel(_Npc,"CRIME_Pickpocket_CheckPockets");

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
AND
CharacterIsCrimeEnabled(_Npc,"PickPocketFailed",1)
THEN
RemoveStatus(_Player,"SNEAKING");

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
AND
CharacterIsCrimeEnabled(_Npc,"PickPocketFailed",1)
AND
HasActiveStatusWithGroup(_Npc, "SG_Sleeping", 1)
THEN
RemoveStatusesWithGroup(_Npc,"SG_Sleeping", _Player);
EndRepose(_Npc);

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
AND
NOT DB_Pickpocketed(_Player,_Npc,_)
THEN
PROC_RegisterPickPocketFailed(_Player,_Npc,NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
AND
DB_Pickpocketed(_Player,_Npc,_)
AND
QRY_CrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence(_Npc)
AND
NOT DB_PickpocketFailedNoEvidenceRegistered(1)
THEN
DB_PickpocketFailedNoEvidenceRegistered(1);
PROC_RegisterPickPocketFailed(_Player,_Npc,NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
THEN
NOT DB_PickpocketFailedNoEvidenceRegistered(1);

// pass item as evidence if NPC must perform a search
PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
AND
DB_Pickpocketed(_Player,_Npc,_Item)
AND
NOT QRY_CrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence(_Npc)
THEN
PROC_RegisterPickPocketFailed(_Player,_Npc,_Item);
NOT DB_Pickpocketed(_Player,_Npc,_Item);

PROC
PROC_RegisterPickPocketFailed((CHARACTER)_Player,(CHARACTER)_Npc,(GUIDSTRING)_Evidence)
AND
GetPosition(_Npc,_X,_Y,_Z)
AND
RealSum(_Y,1.0,_YUp)
THEN
PROC_CharacterRegisterCrimeWithPosition(_Player,"PickPocketFailed",_Evidence,_X,_YUp,_Z,_Npc,0);

QRY
QRY_CrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence((CHARACTER)_Npc)
AND
IsPartyMember(_Npc, 1, 0)
AND
NOT QRY_NPCIsGuard(_Npc)
THEN
DB_NOOP(1);

PROC
PROC_CrimePickpocketFailedFlow((CHARACTER)_Player,(CHARACTER)_Npc)
THEN
NOT DB_PickpocketingBlocked(1);



//END_REGION

//REGION NPC Draw Weapons
// Drawing weapons (and stowing again) when arresting/reacting to crime
PROC
PROC_CRIME_SetWeaponUnsheathed((CHARACTER)_Npc, (INTEGER)_CrimeID)
AND
QRY_HasAnyWeaponEquipped(_Npc)
THEN
PROC_CRIME_StoreWeaponUnsheathed((CHARACTER)_Npc, (INTEGER)_CrimeID);
SetWeaponUnsheathed(_Npc,1,0);

PROC
PROC_CRIME_StoreWeaponUnsheathed((CHARACTER)_Npc, (INTEGER)_CrimeID)
AND
NOT DB_WeaponUnsheathedState(_Npc,_CrimeID,_)
AND
IsWeaponUnsheathed(_Npc,_FightMode)
THEN
DB_WeaponUnsheathedState(_Npc,_CrimeID,_FightMode);

IF
DB_WeaponUnsheathedState(_Npc,_CrimeID,_FightMode)
AND
DB_WeaponUnsheathedState(_Npc,_OldCrimeID,_OldFightMode)
AND
_CrimeID != _OldCrimeID
THEN
NOT DB_WeaponUnsheathedState(_Npc,_OldCrimeID,_OldFightMode);
NOT DB_WeaponUnsheathedState(_Npc,_CrimeID,_FightMode);
DB_WeaponUnsheathedState(_Npc,_CrimeID,_OldFightMode);

IF
OnCrimeResolved(_CrimeID, _, _, _, _, _)
AND
DB_WeaponUnsheathedState(_Npc,_CrimeID,_)
THEN
PROC_CRIME_RestoreWeaponUnsheathed(_Npc, _CrimeID);

PROC
PROC_CRIME_RestoreWeaponUnsheathed((CHARACTER)_Npc, (INTEGER)_CrimeID)
AND
DB_WeaponUnsheathedState(_Npc,_CrimeID,_State)
THEN
PROC_RestoreWeaponUnsheathedIfNoCombat(_Npc, _State);
NOT DB_WeaponUnsheathedState(_Npc,_CrimeID,_State);

PROC
PROC_RestoreWeaponUnsheathedIfNoCombat((CHARACTER)_Npc, (INTEGER)_State)
AND
NOT DB_Is_InCombat(_NPC,_)
THEN
SetWeaponUnsheathed(_Npc,_State,0);

IF
EntityEvent((CHARACTER)_NPC,"CRIME_SetUnsheath")
AND
Exists(_Npc,1)
AND
GetHandlingCrimeID(_NPC, _CrimeID)
THEN
PROC_CRIME_SetWeaponUnsheathed(_NPC, _CrimeID);

//END_REGION

//REGION Sneaking Spotted
IF
Saw(_NPC,_Player,1)
AND
IsPartyMember(_NPC,1,0)
THEN
PROC_CharacterRegisterCrime(_Player,"Sneaking",NULL_00000000-0000-0000-0000-000000000000,_NPC,0);
//END_REGION

//REGION Vandalise - AttackItem
QRY
QRY_Crime_ItemHasHPorIndestructible((ITEM)_Item)
AND
IsDestructible(_Item,0)
THEN
DB_NOOP(1);

QRY
QRY_Crime_ItemHasHPorIndestructible((ITEM)_Item)
AND
IsDestructible(_Item,1)
AND
GetHitpoints(_Item,_INT)
AND
_INT > 0
THEN
DB_NOOP(1);

//--- 1) Item attacked
IF
AttackedBy((ITEM)_Item,(CHARACTER)_Player,(CHARACTER)_Summon,_,_,_DamageSource,_StoryActionID)
AND
NOT QRY_IgnoreDamageSource(_DamageSource)
AND
IsItem(_Item,1)
AND
QRY_IsPartyMember(_Player,0)
AND
QRY_Crime_ItemHasHPorIndestructible(_Item)
AND
NOT QRY_CheckforVandaliseTags(_Item)
THEN
PROC_CrimeVandaliseCheckOwner(_Item,_Player,_Summon,_StoryActionID);

//--- 2) Check if the item has an owner
PROC
PROC_CrimeVandaliseCheckOwner((ITEM)_Item,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_StoryAction)
AND
IgnoreGenerics(_Item,0)
AND
GetOwner(_Item,_Owner)
AND
_Owner != NULL_00000000-0000-0000-0000-000000000000
AND
IsPartyMember(_Owner,1,0)
THEN
PROC_CrimeVandaliseCheckVandal(_Item,_Owner,_Player,_Summon,"",_StoryAction);

PROC
PROC_CrimeVandaliseCheckOwner((ITEM)_Item,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_StoryAction)
AND
IgnoreGenerics(_Item,0)
AND
GetOwner(_Item,_Owner)
AND
_Owner == NULL_00000000-0000-0000-0000-000000000000
AND
IsJunk(_Item,0)
THEN
PROC_CrimeVandaliseCheckVandal(_Item,NULL_00000000-0000-0000-0000-000000000000,_Player,_Summon,"NoOwner",_StoryAction);


//--- 3) Determine crime prefix (none anymore currently)
PROC
PROC_CrimeVandaliseCheckVandal((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Player,(CHARACTER)_Summon,(STRING)_Postfix,(INTEGER)_StoryAction)
AND
QRY_GetCharacterOwnerIfItemSummon(_Player,_Summon)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Attacker)
AND
QRY_ShouldTriggerVandaliseCrime(_Item,(CHARACTER)_Attacker)
AND
NOT DB_Crime_Vandalise(_Attacker,_Item,_)
THEN
PROC_CrimeRegisterVandalise(_Item,_Owner,_Attacker,"",_Postfix,_StoryAction);


//--- 4) Concatenate the crime's name & register it
PROC
PROC_CrimeRegisterVandalise((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Vandal)
THEN
PROC_CrimeRegisterVandalise(_Item,_Owner,_Vandal,"","",-1);

PROC
PROC_CrimeRegisterVandalise((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Vandal,(STRING)_Prefix,(STRING)_Postfix,(INTEGER)_StoryAction)
AND
Concatenate(_Prefix,"Vandalise",_Part1)
AND
Concatenate(_Part1,_Postfix,_CrimeName)
AND
GetPosition(_Item,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_Vandalise(_Vandal,_Item,_CrimeID);
PROC_CharacterRegisterCrimeWithPosition(_Vandal,_CrimeName,_StoryAction,_Item,_x,_yUp,_z,_Owner,_CrimeID);

QRY
QRY_ShouldTriggerVandaliseCrime((ITEM)_Item,(CHARACTER)_Player)
AND
NOT DB_Is_InCombat(_Player,_)
THEN
DB_NOOP(1);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_Crime_Vandalise(_Player,_Item,_Old)
THEN
NOT DB_Crime_Vandalise(_Player,_Item,_Old);
DB_Crime_Vandalise(_Player,_Item,_New);

QRY
QRY_CheckforVandaliseTags((ITEM)_Item)
AND
DB_IgnoreVandaliseTag((TAG)_Tag)
AND
IsTagged(_Item,_Tag,1)
THEN
DB_NOOP(1);

PROC
PROC_CRIME_Finished(_CrimeID)
AND
DB_Crime_Vandalise(_Player,_Item,_CrimeID)
THEN
NOT DB_Crime_Vandalise(_Player,_Item,_CrimeID);
//END_REGION

//REGION Vandalise - Destroy Item

IF
AttackedBy((ITEM)_Item,(CHARACTER)_Player,(CHARACTER)_Summon,_,_,_DamageSource,_StoryActionID)
AND
NOT QRY_IgnoreDamageSource(_DamageSource)
AND
IsItem(_Item,1)
AND
NOT QRY_CheckforVandaliseTags(_Item)
AND
QRY_IsPartyMember(_Player,0)
AND
NOT DB_Is_InCombat(_Player,_)
AND
IsDestructible(_Item,1)
AND
GetHitpoints(_Item,_INT)
AND
_INT < 1
AND
NOT DB_Crime_ItemDestroyed(_Item,_Player,_)
AND
IgnoreGenerics(_Item,0)
AND
GetOwner(_Item,_Owner)
THEN
PROC_CrimeItemDestroyCheckOwner(_Item,_Owner,_Player,_Summon,_StoryActionID);

//1. destroy of unowned item -> VandaliseNoOwner
PROC
PROC_CrimeItemDestroyCheckOwner((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_StoryActionID)
AND
_Owner == NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_CrimeVandaliseCheckOwner(_Item,_Player,_Summon,_StoryActionID);

PROC
PROC_CrimeItemDestroyCheckOwner((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Player,(CHARACTER)_Summon,(INTEGER)_StoryActionID)
AND
QRY_CrimeIsNPCOwner(_Owner)
THEN
PROC_CrimeItemDestroyCheckVandal(_Item,_Owner,_Player,_Summon,_StoryActionID);

//2. check the criminal (special treatment for summons/wildshape is handled via stats, no other special handling currently)
PROC
PROC_CrimeItemDestroyCheckVandal((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_AttackerOwner,(CHARACTER)_Attacker,(INTEGER)_StoryActionID)
AND
QRY_ShouldTriggerVandaliseCrime(_Item,_Attacker)
AND
NOT DB_Crime_Vandalise(_Attacker,_Item,_)
THEN
PROC_CrimeRegisterItemDestroy(_Item,_Owner,_Attacker,"",_StoryActionID);

//3. register the crime
PROC
PROC_CrimeRegisterItemDestroy((ITEM)_Item,(CHARACTER)_Owner,(CHARACTER)_Vandal,(STRING)_Prefix,(INTEGER)_StoryActionID)
AND
Concatenate(_Prefix,"ItemDestroy",_CrimeName)
AND
GetPosition(_Item,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_ItemDestroyed(_Item,_Vandal,_CrimeID);
PROC_CharacterRegisterCrimeWithPosition(_Vandal,_CrimeName,_StoryActionID,_Item,_x,_yUp,_z,_Owner,_CrimeID);
//END_REGION


//REGION Status Reaction
IF
StatusApplied(_Player,_Status,_,_)
AND
_Status != "UNSHEATHED"
AND
DB_Players((CHARACTER)_Player)
AND
DB_StatusReaction(_Status,_Crime)
AND
HasActiveStatus(_Player,_Status,1)
THEN
PROC_CharacterRegisterCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

IF
StatusApplied(_Player,_Status,_,_)
AND
_Status == "UNSHEATHED"
AND
DB_Players((CHARACTER)_Player)
AND
NOT DB_Is_InCombat(_Player,_)
AND
DB_StatusReaction(_Status,_Crime)
AND
HasActiveStatus(_Player,_Status,1)
THEN
PROC_CharacterRegisterCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

IF
StatusRemoved(_Player, _Status, _, _)
AND
DB_Players((CHARACTER)_Player)
AND
DB_StatusReaction(_Status,_Crime)
THEN
CharacterStopCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000);
//END_REGION

//REGION Attitude Change
QRY
QRY_NPCCaresAboutVictim((CHARACTER)_NPC,(CHARACTER)_Victim,(INTEGER)_)
AND
IsTagged(_NPC,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,1)
AND
IsTagged(_Victim,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,1)
THEN
DB_NOOP(1);

QRY
QRY_NPCCaresAboutVictim((CHARACTER)_NPC,(CHARACTER)_Victim,_Primary)
AND
IsTagged(_NPC,(TAG)BEAST_890b5a2a-e773-48df-b191-c887d87bec16,0)
AND
QRY_NonAnimalNPCCaresAboutVictim(_NPC,_Victim,_Primary)
THEN
DB_NOOP(1);


QRY
QRY_NonAnimalNPCCaresAboutVictim((CHARACTER)_NPC,(CHARACTER)_Victim,0)
AND
IsCharacter(_Victim,0)
THEN
DB_NOOP(1);

QRY
QRY_NonAnimalNPCCaresAboutVictim((CHARACTER)_NPC,(CHARACTER)_Victim,0)
AND
IsCharacter(_Victim,1)
AND
IsAlly(_NPC,_Victim,1)
THEN
DB_NOOP(1);

QRY
QRY_NonAnimalNPCCaresAboutVictim((CHARACTER)_NPC,(CHARACTER)_Victim,1)
THEN
DB_NOOP(1);

IF
CharacterOnCrimeSensibleActionNotification(_NPC,_Region,_CrimeID,_PriorityName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Primary)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
NOT DB_NPC_CrimeAttitude_DoNotChange(_NPC,_CrimeName)
AND
DB_CrimeAttitudeChange(_CrimeName,_AttitudeAmountToSub)
AND
CrimeGetVictim(_CrimeID,_Victim)
THEN
PROC_CheckAdjustAttitude(_NPC,_Victim,_Criminal,_Criminal2,_Criminal3,_Criminal4,_AttitudeAmountToSub,_Primary);

PROC
PROC_CheckAdjustAttitude((CHARACTER)_NPC,(CHARACTER)_Victim,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(INTEGER)_AttitudeAmountToSub, (INTEGER)_Primary)
AND
QRY_NPCCaresAboutVictim(_NPC,_Victim,_Primary)
THEN
PROC_CrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal,_AttitudeAmountToSub);
PROC_CrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal2,_AttitudeAmountToSub);
PROC_CrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal3,_AttitudeAmountToSub);
PROC_CrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal4,_AttitudeAmountToSub);

PROC
PROC_CrimeCheckIfAttitudeCauseCombat((CHARACTER)_NPC,(CHARACTER)_Criminal,(INTEGER)_AttitudeAmountToSub)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
THEN
AddAttitudeTowardsPlayer(_NPC,_Criminal,_AttitudeAmountToSub);

//END_REGION

//REGION Dialog interrupting

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
NOT QRY_SpeakerIsAvailableForDialogSlot(_NPC,_CrimeDialog,1,0)
THEN
DB_NOOP(1);

// We ignore most player dialog unavailability due to statuses, as we define in the crime stats which dialogs can start for which shapes/dialog capabilities
QRY
QRY_CrimeSpeakerUnavailableForDialog((CHARACTER)_Char, (DIALOGRESOURCE)_CrimeDialog, (INTEGER)_DialogSlot)
AND
DB_PartyMembers(_Char)
AND
DB_CantTalk_IgnoreStatuses(_Char)
THEN
DB_NOOP(1);

QRY
QRY_CrimeSpeakerUnavailableForDialog((CHARACTER)_Char, (DIALOGRESOURCE)_CrimeDialog, (INTEGER)_DialogSlot)
AND
NOT DB_PartyMembers(_Char)
AND
NOT QRY_SpeakerIsAvailableForDialogSlot(_Char,_CrimeDialog,_DialogSlot,0)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_CrimeSpeakerUnavailableForDialog(_Criminal,_CrimeDialog,2)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal2 != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_CrimeSpeakerUnavailableForDialog(_Criminal2,_CrimeDialog,3)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal3 != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_CrimeSpeakerUnavailableForDialog(_Criminal3,_CrimeDialog,4)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal4 != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_CrimeSpeakerUnavailableForDialog(_Criminal4,_CrimeDialog,5)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
GetRegion(_NPC,_Region)
AND
NOT DB_CurrentLevel(_Region)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
QRY_Crime_IsAboutToCombat(_NPC)
THEN
DB_NOOP(1);

QRY
QRY_Crime_IsAboutToCombat((GUIDSTRING)_NPC)
AND
IsInCombat(_NPC, 1)
THEN
DB_NOOP(1);

QRY
QRY_Crime_IsAboutToCombat((GUIDSTRING)_NPC)
AND
DB_EnterCombatRequested(_NPC)
AND
CanFight(_NPC, 1)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
IsEnemy(_NPC,_Criminal,1)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal2 != NULL_00000000-0000-0000-0000-000000000000
AND
IsEnemy(_NPC,_Criminal2,1)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal3 != NULL_00000000-0000-0000-0000-000000000000
AND
IsEnemy(_NPC,_Criminal3,1)
THEN
DB_NOOP(1);

QRY
QRY_AnyCrimeSpeakerUnavailableForDialog((CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
_Criminal4 != NULL_00000000-0000-0000-0000-000000000000
AND
IsEnemy(_NPC,_Criminal4,1)
THEN
DB_NOOP(1);

QRY
QRY_TryStopDialogFor((CHARACTER)NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NOOP(1);

QRY
QRY_TryStopDialogFor((CHARACTER)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
NOT SpeakerGetDialog(_Char,0,_,_)
THEN
// Also stop any potential automated dialogues, because they now have timelines too
// and code will wait for that timeline to end before starting any other dialogues
// involving its actors (including interactive ones)
PROC_ForceStopDialog(_Char);

QRY
QRY_TryStopDialogFor((CHARACTER)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
SpeakerGetDialog(_Char,1,_CurrentDialog,_ID)
AND
NOT DB_Crime_DoNotStopDialog((DIALOGRESOURCE)_CurrentDialog)
THEN
PROC_ForceStopDialog(_Char);
DB_StoppedDialog(_ID);

PROC 
PROC_SmoothStopDialog((GUIDSTRING)_Object)
AND
NOT DB_ObjectIsDialogSoftLocked(_,_Object)
THEN
DialogRequestSmoothStop(_Object);

PROC
PROC_TrySmoothStopDialogFor((CHARACTER)_Char)
AND
QRY_TrySmoothStopDialogFor((CHARACTER)_Char)
THEN
DB_NOOP(1);

QRY
QRY_TrySmoothStopDialogFor((CHARACTER)NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NOOP(1);

QRY
QRY_TrySmoothStopDialogFor((CHARACTER)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
NOT SpeakerGetDialog(_Char,0,_,_)
THEN
// Also stop any potential automated dialogues, because they now have timelines too
// and code will wait for that timeline to end before starting any other dialogues
// involving its actors (including interactive ones)
PROC_SmoothStopDialog(_Char);

QRY
QRY_TrySmoothStopDialogFor((CHARACTER)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
SpeakerGetDialog(_Char,0,_CurrentDialog,_ID)
AND
NOT DB_Crime_DoNotStopDialog((DIALOGRESOURCE)_CurrentDialog)
THEN
PROC_SmoothStopDialog(_Char);
DB_StoppedDialog(_ID);

QRY
QRY_StartDialog_BlockAttackButton((DIALOGRESOURCE)_Dialog)
AND
DB_Crime_DoNotStopDialog((DIALOGRESOURCE)_Dialog)
THEN
DB_NOOP(1);

PROC
PROC_TryStopDialogFor((CHARACTER)_Char)
AND
QRY_TryStopDialogFor((CHARACTER)_Char)
THEN
DB_NOOP(1);

// _Pipeline is used so we know whether to start an interrogation, reaction, or prison arrest after the dialogs have been stopped (if any needed to be stopped)
PROC
PROC_CrimeInterruptStoryDialogs((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,1,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DB_StoppedDialog(_ID)
THEN
// in case someone outside the crime system called PROC_TryStopDialogFor without unsetting DB_StoppedDialog(_) afterwards
NOT DB_StoppedDialog(_ID);

PROC
PROC_CrimeInterruptStoryDialogs((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,1,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
PROC_TryStopDialogFor(_NPC);
PROC_TrySmoothStopDialogFor(_Criminal);
PROC_TrySmoothStopDialogFor(_Criminal2);
PROC_TrySmoothStopDialogFor(_Criminal3);
PROC_TrySmoothStopDialogFor(_Criminal4);

PROC
PROC_CrimeInterruptStoryDialogs((STRING)_Pipeline,_CrimeID,_,1,_,_,_,_,_)
AND
DB_StoppedDialog(_DialogID)
THEN
DB_CRIME_WaitingForDialogStop(_CrimeID,_DialogID);
NOT DB_StoppedDialog(_DialogID);

PROC
PROC_CrimeInterruptStoryDialogs((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,0,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
QRY_TryStopDialogFor(_NPC)
AND
DB_StoppedDialog(_DialogID)
THEN
DB_CRIME_WaitingForDialogStop(_CrimeID,_DialogID);
NOT DB_StoppedDialog(_DialogID);

PROC
PROC_CrimeInterruptStoryDialogs((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,_Interactive,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
DB_CRIME_WaitingForInterruptedStoryDialogs(_Pipeline,_CrimeID,_CrimeDialog,_Interactive,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

// The DB_CRIME_WaitingForDialogStop DBs get cleared by rules in ZZZ_LastGoal to ensure
// that if story wants to start dialogs on DialogEnded, it can do so before the crime
// dialog starts (starting the crime dialog will fail then because the NPC will already be reserved)
IF
DB_CRIME_WaitingForInterruptedStoryDialogs(_Pipeline,_CrimeID,_CrimeDialog,_Interactive,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4)
AND
NOT DB_CRIME_WaitingForDialogStop(_CrimeID,_)
THEN
NOT DB_CRIME_WaitingForInterruptedStoryDialogs(_Pipeline,_CrimeID,_CrimeDialog,_Interactive,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);
PROC_CrimeInterruptStoryDialogs_FinishedWaiting(_Pipeline,_CrimeID,_CrimeDialog,_Interactive,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeInterruptStoryDialogs_FinishedWaiting((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,0,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT QRY_AnyCrimeSpeakerUnavailableForDialog(_NPC,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,_CrimeDialog)
THEN
PROC_StartCrimeDialog(_CrimeID,_CrimeDialog,0,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CrimeInterruptStoryDialogs_FinishedWaiting((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,1,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT QRY_AnyCrimeSpeakerUnavailableForDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog)
THEN
PROC_StartCrimeDialog(_CrimeID,_CrimeDialog,1,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog,1,_)
AND
DB_CheckInterrupt(_CrimeID,_Warner)
THEN
DB_Interrupted(_CrimeID,_Warner,1);

PROC
PROC_HandleCrimeDialog((CHARACTER)_Warner,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog,1,_)
AND
DB_CheckInterrupt(_CrimeID,_Warner)
THEN
NOT DB_CheckInterrupt(_CrimeID,_Warner);


// Crime type
PROC
PROC_CrimeDialogSetupFlags((INTEGER)_CrimeID,(CHARACTER)_NPC,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
DB_CrimeDialogFlags(_CrimeName,(FLAG)_ActiveFlag)
THEN
ClearFlag((FLAG)_ActiveFlag,_NPC,0);

PROC
PROC_CrimeDialogSetupFlags((INTEGER)_CrimeID,(CHARACTER)_NPC,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
THEN
SetFlag((FLAG)GEB_State_CrimeDialog_c1083e9c-5ff7-4cf2-9326-5d64fe2b5a14,_NPC,0);

PROC 
PROC_CrimeDialogSetupFlags((INTEGER)_CrimeID,(CHARACTER)_NPC,(CHARACTER)_Criminal1,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4,(DIALOGRESOURCE)_CrimeDialog)
AND
QRY_CRIME_CrimeTypeResolveSourceInvestigation(_CrimeID)
AND
DB_QRYRTN_CRIME_CrimeTypeResolveSourceInvestigation(_CrimeName)
AND
QRY_CRIME_GetCrimeFamily(_CrimeName)
AND
DB_QRYRTN_CRIME_GetCrimeFamily(_CrimeFamily)
AND
DB_CrimeDialogFlags(_CrimeFamily,(FLAG)_Flag)
THEN
SetFlag((FLAG)_Flag,_NPC);

QRY
QRY_CRIME_CrimeTypeResolveSourceInvestigation((INTEGER)_CrimeID)
AND
DB_QRYRTN_CRIME_CrimeTypeResolveSourceInvestigation(_Result)
THEN
NOT DB_QRYRTN_CRIME_CrimeTypeResolveSourceInvestigation(_Result);

QRY
QRY_CRIME_CrimeTypeResolveSourceInvestigation((INTEGER)_CrimeID)
AND
NOT QRY_CRIME_CrimeTypeResolveSourceInvestigation_Custom(_CrimeID)
AND
CrimeGetType(_CrimeID,_CrimeType)
THEN
DB_QRYRTN_CRIME_CrimeTypeResolveSourceInvestigation(_CrimeType);

QRY
QRY_CRIME_CrimeTypeResolveSourceInvestigation_Custom((INTEGER)_CrimeID)
AND
1 == 2
THEN
DB_NOOP(1);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_NPC,1)
THEN
ClearFlag((FLAG)GEB_State_CrimeDialog_c1083e9c-5ff7-4cf2-9326-5d64fe2b5a14,_NPC,0);

IF
AutomatedDialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_NPC,1)
THEN
ClearFlag((FLAG)GEB_State_CrimeDialog_c1083e9c-5ff7-4cf2-9326-5d64fe2b5a14,_NPC,0);

// First speaker leaves dialog before it ends (unlikely edge case)
IF
DialogActorLeft(_Dialog,_ID,_NPC, 0)
AND
DB_DialogNPCs(_ID,_NPC,1)
THEN
ClearFlag((FLAG)GEB_State_CrimeDialog_c1083e9c-5ff7-4cf2-9326-5d64fe2b5a14,_NPC,0);

PROC
PROC_StartCrimeDialog((INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,1,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
DialogStartCrimeDialog(_CrimeID,_CrimeDialog,_NPC,_Criminal,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,_Success,_DialogID)
THEN
PROC_CrimeWarning_TryAddExtraCriminals(_Criminal2, _CrimeDialog, _DialogID, _CrimeID);
PROC_CrimeWarning_TryAddExtraCriminals(_Criminal3, _CrimeDialog, _DialogID, _CrimeID);
PROC_CrimeWarning_TryAddExtraCriminals(_Criminal4, _CrimeDialog, _DialogID, _CrimeID);
PROC_StartDialog_PreDialogStarted(_CrimeDialog,_Success,_DialogID, _NPC, _Criminal, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
PROC_CrimeDialogSetupFlags(_CrimeID,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog);
DB_CheckInterrupt(_CrimeID,_NPC);
DB_CrimeWarner(_CrimeID,_NPC,_CrimeDialog,_DialogID);
PROC_HandleCrimeDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog,_Success,1);

PROC
PROC_CrimeWarning_TryAddExtraCriminals((CHARACTER)_Criminal, (DIALOGRESOURCE)_CrimeDialog, (INTEGER)_ID, (INTEGER)_CrimeID)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_CrimeWarning_ExtraCriminals(_Criminal, _CrimeDialog, _ID, _CrimeID);

PROC
PROC_StartDialog_AddExtraSpeakers(_CrimeDialog, _ID)
AND
DB_CrimeWarning_ExtraCriminals(_Criminal, _CrimeDialog, _ID, _CrimeID)
THEN
PROC_DialogAddListeningActor(_ID, _Criminal);

IF
DialogEnded(_CrimeDialog, _ID)
AND
DB_CrimeWarning_ExtraCriminals(_Criminal, _CrimeDialog, _ID, _CrimeID)
THEN
NOT DB_CrimeWarning_ExtraCriminals(_Criminal, _CrimeDialog, _ID, _CrimeID);

// NPC warns player (don't add player to dialog)
PROC
PROC_StartCrimeDialog((INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,0,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
IsPartyMember(_Criminal,1,1)
AND
DialogStartCrimeDialog(_CrimeID,_CrimeDialog,_NPC,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,_Success,_DialogID)
AND
CrimeGetType(_CrimeID,_CrimeType)
THEN
PROC_StartDialog_PreDialogStarted(_CrimeDialog,_Success, _DialogID, _NPC, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
PROC_CrimeDialogSetupFlags(_CrimeID,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog);
DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,_NPC,_Criminal); // in AD we don't have player, so to clear Warning flags, store target player in this DB
DB_CheckInterrupt(_CrimeID,_NPC);
PROC_HandleCrimeDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog,_Success,0);
DB_Interrupted(_CrimeID,_NPC,1);

// NPC warns NPC(s) (do add criminals to the AD, so they suspend behaviours till end of AD and can optionally reply)
PROC
PROC_StartCrimeDialog((INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,0,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
IsPartyMember(_Criminal,1,0)
AND
DialogStartCrimeDialog(_CrimeID,_CrimeDialog,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Success,_DialogID)
AND
CrimeGetType(_CrimeID,_CrimeType)
THEN
PROC_StartDialog_PreDialogStarted(_CrimeDialog,_Success, _DialogID, _NPC, _Criminal, _Criminal2, _Criminal3, _Criminal4, NULL_00000000-0000-0000-0000-000000000000);
DB_Crime_WarningAD_Target(_CrimeType,_CrimeID,_NPC,_Criminal);
DB_CheckInterrupt(_CrimeID,_NPC);
PROC_HandleCrimeDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog,_Success,0);
DB_Interrupted(_CrimeID,_NPC,1);

PROC
PROC_CrimeInterruptStoryDialogs_FinishedWaiting((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,(INTEGER)_MarkForInteractive,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
AND
NOT DB_Interrupted(_CrimeID,_NPC,1)
THEN
//NPC not available for dialog anymore
DB_Crime_FailedToInterruptStoryDialogs((INTEGER)_CrimeId,(DIALOGRESOURCE)_CrimeDialog,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4);

PROC
PROC_CrimeInterruptStoryDialogs_FinishedWaiting((STRING)_Pipeline,(INTEGER)_CrimeID,(DIALOGRESOURCE)_CrimeDialog,(INTEGER)_MarkForInteractive,(CHARACTER)_NPC,(CHARACTER)_Criminal,(CHARACTER)_Criminal2,(CHARACTER)_Criminal3,(CHARACTER)_Criminal4)
THEN
NOT DB_Interrupted(_CrimeID,_NPC,1);
PROC_CRIME_DialogsStoppedCallback(_Pipeline,_CrimeID);

// Only stop an NPCs dialog without starting a new one
PROC
PROC_CrimeTryForceStopDialog((CHARACTER)_Char)
THEN
PROC_TryStopDialogFor(_Char);

//END_REGION

//REGION -Knock Spell crime

/*******************************************/
//--- Crime reactions & Knock Spell crime
/*******************************************/

IF
UsingSpellOnTarget(_Player,_Item,"Target_Knock",_,_,_)
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
AND
IsCharacter((CHARACTER)_Player, 1)
AND
IsPartyMember((CHARACTER)_Player,0,1)
AND
IsItem(_Item,1)
AND
IgnoreGenerics((ITEM)_Item,0)
AND
GetOwner((ITEM)_Item,_Owner)
AND
NOT QRY_CharacterIsNull(_Owner)
AND
IsPartyMember(_Owner,1,0)
AND
HasActiveStatus(_Item,"SILENCED",0)
THEN
PROC_CharacterRegisterCrime(_Player,"KnockSpell",_Item,(CHARACTER)_Owner,0);

//END_REGION

//REGION -ForbiddenItem crime. Action Requests handling.

/***************************************/
//--- Crime reactions & Move crime
/***************************************/
IF
DialogStarted(GEB_Warning_UseForbiddenItem_36230c8e-c3e8-5a46-457d-84f9dd9f1214,_Inst)
AND
DB_DialogPlayers(_Inst,_Player,1)
THEN
EndRepose(_Player);

QRY
QRY_GetMoveForbiddenItemInfo((CHARACTER)_Mover, (ITEM)_Item, (CHARACTER)_Owner)
AND
IsPartyMember(_Mover,0,1)
AND
IsItem(_Item,1)
AND
CanSitOn((ITEM)_Item,0)
AND
IgnoreGenerics(_Item,0)
AND
QRY_CrimeIsNPCOwner(_Owner)
THEN
SysClear("DB_QRYRTN_GetMoveForbiddenItemInfo",2);
DB_QRYRTN_GetMoveForbiddenItemInfo(_Owner,"MoveForbiddenItem");

QRY
QRY_CRIME_IsValidEvidence((GUIDSTRING)_Evidence, 0)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_IsValidEvidence((GUIDSTRING)_Evidence, 1)
AND
IsItem(_Evidence, 1)
AND
GetCanPickUp((ITEM)_Evidence, 1)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_GetFirstPickupableEvidenceIndex((INTEGER)_CrimeID)
AND
DB_QRY_RTN_CRIME_GetFirstPickupableEvidenceIndex(_Index)
THEN
NOT DB_QRY_RTN_CRIME_GetFirstPickupableEvidenceIndex(_Index);

QRY
QRY_CRIME_GetFirstPickupableEvidenceIndex((INTEGER)_CrimeID)
AND
CrimeGetNumberOfEvidence(_CrimeID, _NumEvidence)
AND
QRY_DoNTimes(_NumEvidence)
AND
DB_QRY_RTN_DoNTimes(_Index)
AND
NOT DB_QRY_RTN_CRIME_GetFirstPickupableEvidenceIndex(_)
AND
CrimeGetEvidence(_CrimeID, _Index, _Evidence)
AND
QRY_CRIME_IsValidEvidence(_Evidence, 1)
THEN
DB_QRY_RTN_CRIME_GetFirstPickupableEvidenceIndex(_Index);

IF
UsingSpellOnTarget(_Player,_Item,_,"teleportation",_,_)
AND
IsCharacter(_Player,1)
AND
IsItem(_Item,1)
AND
GetOwner((ITEM)_Item,_Owner)
AND
QRY_GetMoveForbiddenItemInfo((CHARACTER)_Player,(ITEM)_Item,_Owner)
AND
DB_QRYRTN_GetMoveForbiddenItemInfo(_Owner,_CrimeName)
THEN
PROC_CharacterRegisterCrime(_Player,_CrimeName,_Item,(CHARACTER)_Owner,0);

IF
MovedBy((ITEM)_Item,(CHARACTER)_Player)
AND
IsItem(_Item,1)
AND
GetOwner(_Item,_Owner)
AND
QRY_GetMoveForbiddenItemInfo(_Player,_Item,_Owner)
AND
DB_QRYRTN_GetMoveForbiddenItemInfo(_Owner,_CrimeName)
THEN
DB_CRIME_PendingMove(_Player,_CrimeName,_Item,_Owner);
TimerCancel("CRIME_CheckMovedItem_1");
// CharacterStoleItem triggers at most two frames after MovedBy, so give it a chance to handle it first
TimerLaunch("CRIME_CheckMovedItem_1",0);

IF
TimerFinished("CRIME_CheckMovedItem_1")
THEN
TimerLaunch("CRIME_CheckMovedItem_2",0);

IF
TimerFinished("CRIME_CheckMovedItem_2")
THEN
TimerLaunch("CRIME_CheckMovedItem_3",0);

IF
TimerFinished("CRIME_CheckMovedItem_3")
AND
DB_CRIME_PendingMove(_Player,_CrimeName,_Item,_Owner)
THEN
NOT DB_CRIME_PendingMove(_Player,_CrimeName,_Item,_Owner);
PROC_CharacterRegisterCrime(_Player,_CrimeName,_Item,(CHARACTER)_Owner,0);

IF
MovedBy((ITEM)_Item,(CHARACTER)_Player)
AND
DB_CRIME_StealIgnoreNextMoveForbidden(_Item)
THEN
NOT DB_CRIME_StealIgnoreNextMoveForbidden(_Item);

// Throw item
IF
OnThrown(_Object,_Template,_Thrower,_StoryActionID,_X,_Y,_Z)
AND
IsCharacter(_Thrower,1)
AND
IsItem(_Object,1)
AND
GetOwner((ITEM)_Object,_Owner)
AND
QRY_GetMoveForbiddenItemInfo((CHARACTER)_Thrower,(ITEM)_Object,_Owner)
AND
DB_QRYRTN_GetMoveForbiddenItemInfo(_Owner,_CrimeName)
THEN
PROC_CharacterRegisterCrime(_Thrower,_CrimeName,_Object,(CHARACTER)_Owner,0);

// Improvised weapon (or possibly other carrying in the future): item
IF
OnStartCarrying(_Object,_Template,_Carrier,_StoryActionID,_X,_Y,_Z)
AND
IsCharacter(_Carrier,1)
AND
IsItem(_Object,1)
AND
GetOwner((ITEM)_Object,_Owner)
AND
QRY_GetMoveForbiddenItemInfo((CHARACTER)_Carrier,(ITEM)_Object,_Owner)
AND
DB_QRYRTN_GetMoveForbiddenItemInfo(_Owner,_CrimeName)
THEN
PROC_CharacterRegisterCrime(_Carrier,_CrimeName,_Object,(CHARACTER)_Owner,0);

// Improvised weapon (or possibly other carrying in the future): character
IF
OnStartCarrying(_Object,_Template,_Carrier,_StoryActionID,_X,_Y,_Z)
AND
IsCharacter(_Carrier,1)
AND
IsCharacter(_Object,1)
AND
NOT DB_IgnoreAssault((CHARACTER)_Object)
AND
NOT QRY_IgnoreAssaultZeroDamage(_Object,0)
AND
NOT DB_Is_InCombat(_Carrier,_)
AND
QRY_IsPartyMember((CHARACTER)_Carrier,0)
AND
IsDead(_Carrier,0)
AND
IsTagged(_Object,(TAG)GHOST_3def9d73-7c73-487b-8111-d1df1dce076e,0)
AND
IsSummon(_Object,0)
THEN
PROC_CRIME_CarryingCharacter(_Object,_Carrier,_StoryActionID);

PROC
PROC_CRIME_CarryingCharacter((CHARACTER)_Object,(CHARACTER)_Carrier,(INTEGER)_StoryActionID)
AND
NOT DB_PermaDefeated(_Object)
THEN
PROC_CrimeCheckAssailant(_Object,_Carrier,_Carrier,"Attack",0,_StoryActionID);

PROC
PROC_CRIME_CarryingCharacter((CHARACTER)_Object,(CHARACTER)_Carrier,(INTEGER)_StoryActionID)
AND
DB_PermaDefeated(_Object)
AND
DB_OwnedCorpse(_Object,_CorpseOwner)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Carrier,_Object,_CorpseOwner,"Moving",0);

// Move crime handled -> pick up item
IF
OnCrimeConfrontationDone(_CrimeID, _LeadInvestigator, 1, _Criminal1, _Criminal2, _Criminal3, _Criminal4)
AND
CrimeGetType(_CrimeID, _Type)
AND
QRY_CRIME_IsCrimeFamilyMember(_Type, "MoveForbiddenItem")
THEN
// Make the lead investigator of this crime pick up the item
PROC_TryCreatePickUpEvidenceCrime(_CrimeID, "PickUpEvidence", _LeadInvestigator);

PROC
PROC_TryCreatePickUpEvidenceCrime((INTEGER)_CrimeID, (STRING)_PickupDisturbanceType, (CHARACTER)_LeadInvestigator)
AND
QRY_CRIME_GetFirstPickupableEvidenceIndex(_CrimeID)
AND
DB_QRY_RTN_CRIME_GetFirstPickupableEvidenceIndex(_EvidenceIndex)
AND
CrimeGetNumberOfEvidence(_CrimeID, _NumEvidence)
AND
CrimeGetEvidence(_CrimeID, _EvidenceIndex, _Evidence1)
AND
CrimeGetNewID(_NewCrimeID)
AND
CrimeGetCriminal(_CrimeID, 1, _Criminal1)
AND
CrimeGetCriminalsCount(_CrimeID, _NumCriminals)
AND
IntegerSum(_EvidenceIndex, 1, _RemainingEvidenceIndex)
THEN
PROC_CharacterRegisterCrime(_Criminal1, _PickupDisturbanceType, _Evidence1, _LeadInvestigator, _NewCrimeID);
PROC_AddRemainingEvidence(_CrimeID, _NewCrimeID, _NumEvidence, _RemainingEvidenceIndex, 1);
PROC_AddRemainingCriminals(_CrimeID, _NewCrimeID, _NumCriminals, 2);

PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
QRY_CRIME_IsCrimeFamilyMember(_CrimeType, "PickUpEvidence")
THEN
// Update in case we allow more than one piece of evidence at some point
// (could then also be added during merging; not possible right now)
// We have to cache the evidence, because if it gets stacked, it will
// no longer be possible to request it
DB_CRIME_PickupEvidence(_CrimeID, _Evidence);

IF
CharacterOnCrimeSensibleActionNotification(_Lead, _, _CrimeID, _, _, _, _, _, _, 1)
AND
DB_CRIME_PickupEvidence(_CrimeID, _Evidence)
THEN
// Can't request lead anymore once the crime is resolved, and we will need it there
DB_CRIME_PickupEvidenceLeadReacting(_CrimeID, _Lead);

QRY
QRY_CRIME_TryAddEvidence((INTEGER)_CrimeID, (GUIDSTRING)_Evidence, (INTEGER)_MustBePickupableItem)
AND
QRY_CRIME_IsValidEvidence(_Evidence, _MustBePickupableItem)
AND
CrimeAddEvidence(_CrimeID, _Evidence, 1)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_TryAddEvidence((INTEGER)_CrimeID, (GUIDSTRING)_Evidence, (INTEGER)_MustBePickupableItem)
THEN
// Always succeed, so we try the next piece of evidence
DB_NOOP(1);

PROC
PROC_AddRemainingEvidence((INTEGER)_OldCrimeID, (INTEGER)_NewCrimeID, (INTEGER)_NumEvidence, (INTEGER)_EvidenceIndex, (INTEGER)_MustBePickupableItem)
AND
_EvidenceIndex <= _NumEvidence
AND
CrimeGetEvidence(_OldCrimeID, _EvidenceIndex, _Evidence)
AND
QRY_CRIME_TryAddEvidence(_NewCrimeID, _Evidence, _MustBePickupableItem)
AND
IntegerSum(_EvidenceIndex, 1, _NewEvidenceIndex)
THEN
PROC_AddRemainingEvidence(_OldCrimeID, _NewCrimeID, _NumEvidence, _NewEvidenceIndex, _MustBePickupableItem);

PROC
PROC_AddRemainingCriminals((INTEGER)_OldCrimeID, (INTEGER)_NewCrimeID, (INTEGER)_NumCriminals, (INTEGER)_CriminalIndex)
AND
_CriminalIndex <= _NumCriminals
AND
CrimeGetCriminal(_OldCrimeID, _CriminalIndex, _Criminal)
AND
CrimeAddCriminal(_NewCrimeID, _Criminal, 1)
AND
IntegerSum(_CriminalIndex, 1, _NewCriminalIndex)
THEN
PROC_AddRemainingCriminals(_OldCrimeID, _NewCrimeID, _NumCriminals, _NewCriminalIndex);

// Nobody noticed the forbidden move crime -> register a pickup crime for the owner
IF
CrimeProcessingStarted(_CrimeID, 0)
AND
CrimeGetType(_CrimeID, _Type)
AND
QRY_CRIME_IsCrimeFamilyMember(_Type, "MoveForbiddenItem")
AND
CrimeGetEvidence(_CrimeID, 1, _Evidence)
AND
GetOwner((ITEM)_Evidence, _Owner)
THEN
PROC_TryCreatePickUpEvidenceCrime(_CrimeID, "PickupEvidence_Unnoticed", _Owner);

// Stop other crimes for picking up this evidence once one of the investigators picks it up
IF
AddedTo((ITEM)_Evidence, _Lead, _)
AND
DB_CRIME_PickupEvidenceLeadReacting(_CrimeID, (CHARACTER)_Lead)
AND
DB_CRIME_PickupEvidence(_CrimeID, _Evidence)
THEN
PROC_CRIME_CheckedPickedUpEvidence(_CrimeID, _Lead, _Evidence);

IF
StackedWith(_Evidence, _Item)
AND
DB_CRIME_PickupEvidence(_CrimeID, _Evidence)
AND
GetInventoryOwner(_Item, _Lead)
AND
DB_CRIME_PickupEvidenceLeadReacting(_CrimeID, (CHARACTER)_Lead)
THEN
PROC_CRIME_CheckedPickedUpEvidence(_CrimeID, _Lead, _Evidence);

PROC
PROC_CRIME_CheckedPickedUpEvidence((INTEGER)_CrimeID, (CHARACTER)_Lead, (ITEM)_Evidence)
AND
DB_CRIME_PickupEvidence(_OtherCrimeID, _Evidence)
AND
_OtherCrimeID != _CrimeID
AND
CrimeGetCriminalsCount(_OtherCrimeID, _CriminalsCount)
AND
QRY_DoNTimes(_CriminalsCount)
AND
DB_QRY_RTN_DoNTimes(_Index)
AND
CrimeGetCriminal(_OtherCrimeID, _Index, _Criminal)
THEN
CharacterStopCrimeWithID(_Criminal, _OtherCrimeID);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_PickupEvidence(_CrimeID, _Evidence)
THEN
NOT DB_CRIME_PickupEvidence(_CrimeID, _Evidence);

PROC
PROC_CRIME_Finished((INTEGER)_CrimeID)
AND
DB_CRIME_PickupEvidenceLeadReacting(_CrimeID, _Lead)
THEN
NOT DB_CRIME_PickupEvidenceLeadReacting(_CrimeID, _Lead);

/***************************************/
//--- REQUESTS
/***************************************/
IF
RequestCanUse(_Char,_Item,_RequestID)
THEN
PROC_BlockUseOfItem(_Char,_Item,_RequestID);
PROC_ProcessUseOfItemWithStatus(_Char,_Item);
PROC_ProcessUseOfItem(_Char,_Item,_RequestID);

IF
RequestCanLoot(_Looter,_Corpse)
THEN
PROC_BlockLootCorpse(_Looter,_Corpse);
PROC_ProcessLootCorpse(_Looter,_Corpse);

IF
RequestCanMove(_Char,_Item,_RequestID)
THEN
PROC_BlockMoveOfItem(_Char,_Item,_RequestID);
PROC_ProcessMoveOfItem(_Char,_Item,_RequestID);

IF
RequestCanPickup(_Char,_Item,_RequestID)
AND
IsCharacter(_Item, 0)
THEN
PROC_BlockPickupOfItem(_Char,(ITEM)_Item,_RequestID);
PROC_ProcessPickupOfItem(_Char,(ITEM)_Item,_RequestID);

IF
RequestCanPickup(_Char, _Character,_RequestID)
AND
IsCharacter(_Character, 1)
THEN
PROC_BlockPickupOfCharacter(_Char,(CHARACTER)_Character,_RequestID);
PROC_ProcessPickupOfCharacter(_Char,(CHARACTER)_Character,_RequestID);

IF
RequestCanLockpick(_Char,_Item,_RequestID)
THEN
PROC_BlockLockpickItem(_Char,_Item);
PROC_ProcessLockpickItem(_Char,_Item,_RequestID);

IF
RequestCanDisarmTrap(_Char,_Item,_RequestID)
THEN
PROC_BlockTrapDisarm(_Char,_Item);
PROC_ProcessDisarmTrap(_Char,_Item,_RequestID);

IF
RequestCanCombine(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID)
THEN
PROC_BlockCombineItem(_Char,_ItemA);
PROC_BlockCombineItem(_Char,_ItemB);
PROC_BlockCombineItem(_Char,_ItemC);
PROC_BlockCombineItem(_Char,_ItemD);
PROC_BlockCombineItem(_Char,_ItemE);
PROC_ProcessCombineItem(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID);


/***************************************/
//--- BLOCK ACTIONS
/***************************************/
/*	Catch one of the following PROCs to set the appropriate DB:
	DB_CustomUseItemResponse((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_Result)
	DB_CustomMoveItemResponse((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_Result)
	DB_CustomPickupItemResponse((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_Result)
	DB_CustomPickupCharacterResponse((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_Result)
	DB_CustomLockpickItemResponse((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_Result)
	DB_CustomCombineItemResponse((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_Result)
	DB_CustomLootCorpseResponse((CHARACTER)_Looter,(CHARACTER)_Corpse,(INTEGER)_Result)
*/

PROC
PROC_BlockUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
THEN
PROC_BlockUseOfItem((CHARACTER)_Char,(ITEM)_Item);

PROC
PROC_BlockUseOfItem((CHARACTER)_Char,(ITEM)_Item)
THEN
DB_NOOP(1);

PROC
PROC_BlockLootCorpse((CHARACTER)_Looter,(CHARACTER)_Corpse)
THEN
DB_NOOP(1);

PROC
PROC_BlockMoveOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
THEN
PROC_BlockMoveOfItem(_Char,_Item);

PROC
PROC_BlockMoveOfItem((CHARACTER)_Char,(ITEM)_Item)
THEN
DB_NOOP(1);

PROC
PROC_BlockPickupOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
THEN
PROC_BlockPickupOfItem(_Char,_Item);

PROC
PROC_BlockPickupOfItem((CHARACTER)_Char,(ITEM)_Item)
THEN
DB_NOOP(1);

PROC
PROC_BlockPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_RequestID)
THEN
PROC_BlockPickupOfCharacter(_Char,_Character);

PROC
PROC_BlockPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character)
THEN
DB_NOOP(1);

PROC
PROC_BlockLockpickItem((CHARACTER)_Char,(ITEM)_Item)
THEN
DB_NOOP(1);

PROC
PROC_BlockTrapDisarm((CHARACTER)_Char, (ITEM)_Item)
THEN
DB_NOOP(1);

PROC
PROC_BlockCombineItem((CHARACTER)_Char,(ITEM)_Item)
THEN
DB_NOOP(1);


/***************************************/
//--- BURNING items apply status
/***************************************/
PROC
PROC_ProcessUseOfItemWithStatus((CHARACTER)_Char,(ITEM)_Item)
AND
NOT DB_CustomUseItemResponse(_Char,_Item,0) // if handled in story, don't apply effect
AND
NOT DB_HandledRequest(_Char,_Item,_)
AND
DB_ItemStatusAffectCharacterOnUse(_Status)
AND
HasActiveStatus(_Item,_Status,1)
AND
NOT QRY_ItemStatusIsNotAppliedToUser(_Item,_Status)
THEN
ApplyStatus(_Char,_Status,12.0);

QRY
QRY_ItemStatusIsNotAppliedToUser((ITEM)_Item,(STRING)_Status)
AND
_Status == "BURNING"
AND
NOT IsLadder(_Item,1)
THEN
DB_NOOP(1);

/***************************************/
//--- PROCESS
/***************************************/
// Use
PROC
PROC_ProcessUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomUseItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
AND
CanSitOn(_Item,0)
AND
IsLadder(_Item,0)
AND
IsPublicDomain(_Item,0)
AND
IgnoreGenerics(_Item,0)
THEN
DB_HandledRequest(_Char,_Item,_RequestID);
PROC_CrimeTryRegisteringUseForbiddenItem(_Char,_Item,_RequestID,"Item");

PROC
PROC_ProcessUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
PROC_ProcessUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Item,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Item,_RequestID);

// Loot corpse
PROC
PROC_ProcessLootCorpse((CHARACTER)_Looter,(CHARACTER)_Corpse)
AND
DB_CustomLootCorpseResponse(_Looter,_Corpse,(INTEGER)_Result)
THEN
LootRequestProcessed(_Looter,_Result);

PROC
PROC_ProcessLootCorpse((CHARACTER)_Looter,(CHARACTER)_Corpse)
AND
NOT DB_CustomLootCorpseResponse(_Looter,_Corpse,_)
AND
DB_OwnedCorpse(_Corpse,_CorpseOwner)
AND
IsPartyMember(_Looter,0,1)
AND
IsPartyMember(_CorpseOwner,1,0)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Looter,_Corpse,_CorpseOwner,"Looting",0);

PROC
PROC_ProcessLootCorpse((CHARACTER)_Looter,(CHARACTER)_Corpse)
AND
NOT DB_CustomLootCorpseResponse(_Looter,_Corpse,_)
AND
NOT DB_OwnedCorpse(_Corpse,_)
THEN
LootRequestProcessed(_Looter,1);

IF
ForceMoveStarted(_Player,(CHARACTER)_Corpse,_)
AND
DB_OwnedCorpse(_Corpse,_CorpseOwner)
AND
IsCharacter((CHARACTER)_Player,1)
AND
IsPartyMember(_Player,0,1)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Player,_Corpse,_CorpseOwner,"Moving",0);

IF
UsingSpellOnTarget(_Caster,_Corpse,_Spell,_,_,_)
AND
DB_CRIME_AnimateDeadSpells(_Spell)
AND
DB_OwnedCorpse((CHARACTER)_Corpse,_CorpseOwner)
AND
IsPartyMember((CHARACTER)_Caster,0,1)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Caster,_Corpse,_CorpseOwner,"Reanimating",0);


// Move (registers MoveForbiddenItem instead of UseForbiddenItem)
PROC
PROC_ProcessMoveOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomMoveItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessMoveOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomMoveItemResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

// Pickup
PROC
PROC_ProcessPickupOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomPickupItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessPickupOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomPickupItemResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
PROC_ProcessPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_RequestID)
AND
DB_CustomPickupCharacterResponse(_Char,_Character,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_RequestID)
AND
NOT DB_CustomPickupCharacterResponse(_Char,_Character,_)
AND
NOT DB_HandledRequest(_Char,_Character,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

// Lockpick
PROC
PROC_ProcessLockpickItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomLockpickItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessLockpickItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomLockpickItemResponse(_Char,_Item,_)
THEN
PROC_CrimeTryRegisteringUseForbiddenItem(_Char,_Item,_RequestID,"Lock");

// Trap Disarming
PROC
PROC_ProcessDisarmTrap((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomDisarmTrapResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
PROC_ProcessDisarmTrap((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomDisarmTrapResponse(_Char,_Item,_)
THEN
DB_HandledRequest(_Char,_Item,_RequestID);
PROC_CrimeTryRegisteringUseForbiddenItem(_Char,_Item,_RequestID,"Trap");

PROC
PROC_ProcessDisarmTrap((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomDisarmTrapResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
PROC_ProcessDisarmTrap((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Item,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Item,_RequestID);


// Combine
PROC
PROC_ProcessCombineItem(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID)
AND
NOT QRY_CombineItemHasCustomResult(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
AND
IsPartyMember(_Player,0,1)
THEN
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull(_Player,_ItemA,_RequestID);
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull(_Player,_ItemB,_RequestID);
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull(_Player,_ItemC,_RequestID);
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull(_Player,_ItemD,_RequestID);
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull(_Player,_ItemE,_RequestID);

PROC
PROC_ProcessCombineItem_CheckRegisterUseForbiddenItem_NonNull((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID)
AND
_Item != NULL_00000000-0000-0000-0000-000000000000
THEN
PROC_CrimeCheckRegisterUseForbiddenItem(_Player,_Item,_RequestID,"Item");

PROC
PROC_ProcessCombineItem((CHARACTER)_Char,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE,(INTEGER)_RequestID)
AND
QRY_CombineItemHasCustomResult(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
PROC_ProcessCustomCombineResponse(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID);

PROC
PROC_ProcessCustomCombineResponse((CHARACTER)_Char,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE,(INTEGER)_RequestID)
AND
QRY_CombineItemIsBlocked(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
RequestProcessed(_Char,_RequestID,0);

PROC
PROC_ProcessCustomCombineResponse((CHARACTER)_Char,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE,(INTEGER)_RequestID)
AND
NOT QRY_CombineItemIsBlocked(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
RequestProcessed(_Char,_RequestID,1);


//--- General proc:
PROC
PROC_CrimeTryRegisteringUseForbiddenItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
NOT QRY_CrimeIsNPCOwner(_Char)
THEN
PROC_CrimeCheckRegisterUseForbiddenItem(_Char,_Item,_RequestID,_ItemKind);

PROC
PROC_CrimeTryRegisteringUseForbiddenItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
QRY_CrimeIsNPCOwner(_Char)
THEN
RequestProcessed(_Char,_RequestID,1);

/**************************************************/
//--- Block/allow request depending crime reaction
/**************************************************/

IF
CrimeProcessingStarted(_CrimeID, _ActedOnImmediately)
AND
DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID)
AND
DB_Negate(_ActedOnImmediately, _RequestAllowed)
THEN
PROC_CRIME_AllowRequestOnReaction(_Player, _CrimeID, _RequestID, _RequestAllowed);

PROC
PROC_CRIME_AllowRequestOnReaction((CHARACTER)_Player, (INTEGER)_CrimeID, (INTEGER)_RequestID, (INTEGER)_RequestAllowed)
AND
DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID)
AND
QRY_CRIME_AllowRequestOnReactionCustom(_Player, _CrimeID, _RequestID, _RequestAllowed)
AND
DB_QRYRTN_CRIME_AllowRequestOnReactionCustom((INTEGER)_CustomRequestAllowed)
THEN
RequestProcessed(_Player, _RequestID, _CustomRequestAllowed);
NOT DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID);

PROC
PROC_CRIME_AllowRequestOnReaction((CHARACTER)_Player, (INTEGER)_CrimeID, (INTEGER)_RequestID, (INTEGER)_RequestAllowed)
AND
DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID)
THEN
RequestProcessed(_Player, _RequestID, _RequestAllowed);
NOT DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID);

QRY
QRY_CRIME_AllowRequestOnReactionCustom((CHARACTER)_Player, (INTEGER)_CrimeID, (INTEGER)_RequestID, (INTEGER)_RequestAllowed)
AND
1 == 0
THEN
DB_NOOP(1);

// If its registration gets blocked, nobody will react to it
PROC
PROC_CharacterRegisterCrime_Blocked(_Player,_,_,_,_,_CrimeID)
AND
DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID)
THEN
RequestProcessed(_Player, _RequestID, 1);
NOT DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID);

/***************************************/
//--- CLEAR custom response facts
/***************************************/
PROC
PROC_ProcessUseOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomUseItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomUseItemResponse(_Char,_Item,_Result);

PROC
PROC_ProcessLootCorpse((CHARACTER)_Looter, (CHARACTER)_Corpse)
AND
DB_CustomLootCorpseResponse(_Looter,_Corpse,_Result)
THEN
NOT DB_CustomLootCorpseResponse(_Looter,_Corpse,_Result);

PROC
PROC_ProcessMoveOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomMoveItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomMoveItemResponse(_Char,_Item,_Result);

PROC
PROC_ProcessMoveOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Item,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Item,_RequestID);

PROC
PROC_ProcessPickupOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomPickupItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomPickupItemResponse(_Char,_Item,_Result);

PROC
PROC_ProcessPickupOfItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Item,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Item,_RequestID);

PROC
PROC_ProcessPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_RequestID)
AND
DB_CustomPickupCharacterResponse(_Char,_Character,_Result)
THEN
NOT DB_CustomPickupCharacterResponse(_Char,_Character,_Result);

PROC
PROC_ProcessPickupOfCharacter((CHARACTER)_Char,(CHARACTER)_Character,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Character,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Character,_RequestID);

PROC
PROC_ProcessLockpickItem((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomLockpickItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomLockpickItemResponse(_Char,_Item,_Result);

PROC
PROC_ProcessDisarmTrap((CHARACTER)_Char,(ITEM)_Item,(INTEGER)_RequestID)
AND
DB_CustomDisarmTrapResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomDisarmTrapResponse(_Char,_Item,_Result);

/***************************************/
//--- REGISTERING CRIMES and responding to the requests
/***************************************/

/*
PROC
PROC_AddCustomForbiddenItemCrimes((ITEM)_Item, (STRING)_Crime, (STRING)_SneakCrime)
THEN
PROC_AddCustomForbiddenItemCrimes(_Item, _Crime, _SneakCrime, -5);

PROC
PROC_AddCustomForbiddenItemCrimes((ITEM)_Item, (STRING)_Crime, (STRING)_SneakCrime, (INTEGER)_AttitudeChange)
THEN
DB_CustomForbiddenItemCrimes(_Item, _Crime, _SneakCrime);
DB_CrimeAttitudeChange(_Crime, _AttitudeChange);
DB_CrimeAttitudeChange(_SneakCrime, _AttitudeChange);
DB_CrimeDialogFlags(_Crime,(FLAG)GEB_Crime_UseForbiddenItem_0203c578-3de4-5976-5494-5d5ad94bca80);
DB_CrimeDialogFlags(_SneakCrime,(FLAG)GEB_Crime_UseForbiddenItem_0203c578-3de4-5976-5494-5d5ad94bca80);

PROC
PROC_RemoveCustomForbiddenItemCrimes((ITEM)_Item)
AND
DB_CustomForbiddenItemCrimes(_Item, _Crime, _SneakCrime)
AND
DB_CrimeAttitudeChange(_Crime, _AttitudeChange)
THEN
NOT DB_CustomForbiddenItemCrimes(_Item, _Crime, _SneakCrime);
NOT DB_CrimeDialogFlags(_Crime,(FLAG)GEB_Crime_UseForbiddenItem_0203c578-3de4-5976-5494-5d5ad94bca80);
NOT DB_CrimeDialogFlags(_SneakCrime,(FLAG)GEB_Crime_UseForbiddenItem_0203c578-3de4-5976-5494-5d5ad94bca80);
NOT DB_CrimeAttitudeChange(_Crime, _AttitudeChange);
NOT DB_CrimeAttitudeChange(_SneakCrime, _AttitudeChange);
*/

QRY
QRY_CRIME_ItemUseAllowed((ITEM)_Item)
AND
NOT QRY_CrimeItemHasNPCOwner(_Item)
THEN
DB_NOOP(1);

QRY
QRY_CRIME_ItemUseAllowed((ITEM)_Item)
AND
IgnoreGenerics(_Item, 1)
THEN
DB_NOOP(1);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
QRY_CRIME_ItemUseAllowed(_Item)
THEN
RequestProcessed(_Player,_RequestID,1);
DB_CRIME_UseForbiddenItemOkay(1);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
NOT DB_CRIME_UseForbiddenItemOkay(1)
AND
DB_CustomForbiddenItemCrimes((ITEM)_Item,(STRING)_Crime,(STRING)_SneakCrime)
AND
NOT DB_HiddenCharacters(_Player,_)
THEN
PROC_CrimeRegisterUseForbiddenItem(_Player,_Item,_RequestID,_Crime);
DB_CRIME_UseForbiddenItemOkay(1);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
NOT DB_CRIME_UseForbiddenItemOkay(1)
AND
DB_CustomForbiddenItemCrimes((ITEM)_Item, (STRING)_Crime,(STRING)_SneakCrime)
AND
DB_HiddenCharacters(_Player,_)
THEN
PROC_CrimeRegisterUseForbiddenItem(_Player,_Item,_RequestID,_SneakCrime);
DB_CRIME_UseForbiddenItemOkay(1);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
NOT DB_CRIME_UseForbiddenItemOkay(1)
AND
DB_HiddenCharacters(_Player,_)
AND
DB_CRIME_ForbiddenItemType(_ItemKind,1,_Crime)
AND
GetOwner(_Item,_Owner)
THEN
DB_Crime_UseForbiddenItem(_Player,_Crime,_Item);
// No need to wait to check whether someone noticed the crime, since the player is sneaking
// (-> can't be spotted) and such crimes are not audible either
RequestProcessed(_Player,_RequestID,1);
PROC_CharacterRegisterCrime(_Player,_Crime,_Item,_Owner,0);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
NOT DB_CRIME_UseForbiddenItemOkay(1)
AND
NOT DB_HiddenCharacters(_Player,_)
AND
DB_CRIME_ForbiddenItemType(_ItemKind,0,_Crime)
THEN
PROC_CrimeRegisterUseForbiddenItem(_Player,_Item,_RequestID,_Crime);

PROC
PROC_CrimeCheckRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_ItemKind)
AND
DB_CRIME_UseForbiddenItemOkay(1)
THEN
NOT DB_CRIME_UseForbiddenItemOkay(1);

PROC
PROC_CrimeRegisterUseForbiddenItem((CHARACTER)_Player,(ITEM)_Item,(INTEGER)_RequestID,(STRING)_CrimeName)
AND
GetPosition(_Item,_X,_Y,_Z)
AND
GetOwner(_Item,_Owner)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_WaitingForReaction(_Player, _CrimeID, _RequestID);
DB_Crime_UseForbiddenItem(_Player,_CrimeName,_Item);
PROC_CharacterRegisterCrime(_Player,_CrimeName,_Item,_Owner,_CrimeID);

// Interact with owned corpse
PROC
PROC_CrimeRegisterOwnedCorpseInteraction((CHARACTER)_Looter,(CHARACTER)_Corpse,(CHARACTER)_CorpseOwner,(STRING)_Interaction,(INTEGER)_CorpseIsEvidence)
AND
QRY_Character_GetIsHidden(_Looter)
AND
DB_QRYRTN_Character_GetIsHidden(_Sneaking)
AND
DB_CRIME_LootOwnedCorpse(_Interaction,_Sneaking,_CrimeType)
AND
CrimeGetNewID(_CrimeID)
THEN
PROC_CharacterRegisterCrime(_Looter,_CrimeType,_Corpse,_CorpseOwner,_CrimeID);
PROC_CRIME_RecordIfLootingCorpse(_Looter,_CrimeID,_Interaction);
PROC_CRIME_OwnedCorpseAddIfEvidence(_Corpse,_CrimeID,_CorpseIsEvidence);

PROC
PROC_CRIME_RecordIfLootingCorpse((CHARACTER)_Looter,(INTEGER)_CrimeID,"Looting")
THEN
DB_Crime_LootingCorpse(_Looter,_CrimeID);

PROC
PROC_CRIME_OwnedCorpseAddIfEvidence((CHARACTER)_Corpse,(INTEGER)_CrimeID,1)
AND
CrimeAddEvidence(_CrimeID,_Corpse,_)
THEN
DB_NOOP(1);

IF
CrimeProcessingStarted(_CrimeID,_Witnessed)
AND
DB_Crime_LootingCorpse(_Looter,_CrimeID)
THEN
PROC_CRIME_CorpseLootWitnessed(_Looter,_CrimeID,_Witnessed);

PROC
PROC_CRIME_CorpseLootWitnessed((CHARACTER)_Looter,(INTEGER)_CrimeID,(INTEGER)_Witnessed)
AND
DB_Negate(_Witnessed,_Allowed)
THEN
LootRequestProcessed(_Looter,_Allowed); 

/***************************************/
//--- CHECK CRIME REACTIONS
/***************************************/
/*
IF
CharacterOnCrimeSensibleActionNotification(_,_,_CrimeID,_,_,_,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"UseForbiddenItem")
THEN
PROC_CrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"UseForbiddenItem");

IF
CharacterOnCrimeSensibleActionNotification(_,_,_CrimeID,_,_,_,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"SneakUseForbiddenItem")
THEN
PROC_CrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"SneakUseForbiddenItem");
*/

IF
OnCrimeConfrontationDone(_CrimeID,_Investigator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,_Type)
AND
DB_CustomForbiddenItemCrimes(_,_Type,_)
THEN
PROC_CrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,_Type);

IF
OnCrimeConfrontationDone(_CrimeID,_Investigator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,_ForbiddenItemCrime)
AND
DB_CRIME_ForbiddenItemType(_,_,_ForbiddenItemCrime)
THEN
PROC_CrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,_ForbiddenItemCrime);

IF
OnCrimeConfrontationDone(_CrimeID,_Investigator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,_Type)
AND
DB_CustomForbiddenItemCrimes(_,_,_Type)
THEN
PROC_CrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,_Type);

PROC
PROC_CrimeForbiddenItemGetEvidence((INTEGER)_CrimeID,(CHARACTER)_Criminal,(STRING)_CrimeType)
AND
NOT QRY_CharacterIsNull(_Criminal)
AND
CrimeGetNumberOfEvidence(_CrimeID,_NumEvidence)
AND
_NumEvidence > 0
AND
CrimeGetEvidence(_CrimeID,1,(ITEM)_Item)
THEN
PROC_CrimeStopForbiddenItem(_Criminal,_CrimeType,_Item);

PROC
PROC_CrimeForbiddenItemGetEvidence((INTEGER)_CrimeID,(CHARACTER)_Criminal,(STRING)_CrimeType)
AND
NOT QRY_CharacterIsNull(_Criminal)
AND
CrimeGetNumberOfEvidence(_CrimeID,_NumEvidence)
AND
_NumEvidence < 1
THEN
PROC_CrimeStopForbiddenItem(_Criminal,_CrimeType,NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_CrimeStopForbiddenItem((CHARACTER)_Criminal,(STRING)_CrimeType,(ITEM)_Evidence)
THEN
CharacterStopCrime(_Criminal,_CrimeType,_Evidence);

PROC
PROC_CrimeStopForbiddenItem((CHARACTER)_Criminal,(STRING)_CrimeType,(ITEM)_Evidence)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Evidence)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Evidence);

// If it's witnessed, the request will be denied and hence we won't be looting
IF
OnCrimeConfrontationDone(_CrimeID,_,_,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_LootingCorpse(_Looter,_CrimeID)
THEN
PROC_CRIME_StopLootingCorpse(_Criminal1,_CrimeID);
PROC_CRIME_StopLootingCorpse(_Criminal2,_CrimeID);
PROC_CRIME_StopLootingCorpse(_Criminal3,_CrimeID);
PROC_CRIME_StopLootingCorpse(_Criminal4,_CrimeID);

PROC
PROC_CRIME_StopLootingCorpse((CHARACTER)_Looter,(INTEGER)_CrimeID)
AND
DB_Crime_LootingCorpse(_Looter,_CrimeID)
THEN
NOT DB_Crime_LootingCorpse(_Looter,_CrimeID);
CharacterStopCrimeWithID(_Looter,_CrimeID);

IF
OnCrimeMergedWith(_OldCrimeID,_NewCrimeID)
AND
DB_Crime_LootingCorpse(_Looter,_OldCrimeID)
THEN
NOT DB_Crime_LootingCorpse(_Looter,_OldCrimeID);
DB_Crime_LootingCorpse(_Looter,_NewCrimeID);

/***************************************/
//--- STOPPING CRIMES
/***************************************/
IF
UseFinished(_Player,_Item, _)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

IF
StoppedDisarmingTrap(_Player, _Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

IF
CharacterLootedCharacter(_Looter, _)
AND
DB_Crime_LootingCorpse(_Looter,_CrimeID)
THEN
NOT DB_Crime_LootingCorpse(_Looter,_CrimeID);
CharacterStopCrimeWithID(_Looter,_CrimeID);

/*
IF
MovedBy(_Player,_Item)
CharacterStoppedMovingItem(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);
*/

IF
StoppedLockpicking(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

IF
StoppedCombining(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
PROC_CrimeStopCombineItemCrime(_Player,_ItemA);
PROC_CrimeStopCombineItemCrime(_Player,_ItemB);
PROC_CrimeStopCombineItemCrime(_Player,_ItemC);
PROC_CrimeStopCombineItemCrime(_Player,_ItemD);
PROC_CrimeStopCombineItemCrime(_Player,_ItemE);

PROC
PROC_CrimeStopCombineItemCrime((CHARACTER)_Player,(ITEM)_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
CharacterStopCrime(_Player,_CrimeType,_Item);

QRY
QRY_CrimeClearCombineItemBD((CHARACTER)_Player,(STRING)_CrimeType)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);


/***************************************/
//--- QUERIES
/***************************************/

QRY
QRY_CrimeIsValidItemRequest((CHARACTER)_Char,(ITEM)_Item)
AND
IsPartyMember(_Char,1,0)
THEN
DB_NOOP(1);

QRY
QRY_CrimeIsValidItemRequest((CHARACTER)_Char,(ITEM)_Item)
AND
IsPartyMember(_Char,0,1)
AND
NOT QRY_CrimeItemHasNPCOwner((ITEM)_Item)
THEN
DB_NOOP(1);

QRY
QRY_CrimeCombinedItemsAreValid((ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
NOT QRY_CrimeItemHasNPCOwner(_ItemA)
AND
NOT QRY_CrimeItemHasNPCOwner(_ItemB)
AND
NOT QRY_CrimeItemHasNPCOwner(_ItemC)
AND
NOT QRY_CrimeItemHasNPCOwner(_ItemD)
AND
NOT QRY_CrimeItemHasNPCOwner(_ItemE)
THEN
DB_NOOP(1);

QRY
QRY_CrimeItemHasNPCOwner((ITEM)_Item)
AND
GetOwner(_Item,_Char)
AND
QRY_CrimeIsNPCOwner(_Char)
THEN
DB_NOOP(1);

QRY
QRY_CrimeIsNPCOwner((CHARACTER)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
// Also check recruited companions not currently in the party
NOT DB_PartOfTheTeam(_Char)
AND
// Also check potential "party members" not considered part of the team (summoned items?)
IsPartyMember(_Char,1,0)
THEN
DB_NOOP(1);

/**** Combine item custom result ****/
QRY
QRY_CombineItemHasCustomResult((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemA,_)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemHasCustomResult((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemB,_)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemHasCustomResult((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemC,_)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemHasCustomResult((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemD,_)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemHasCustomResult((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemE,_)
THEN
DB_NOOP(1);


/**** Combine item is blocked ****/
QRY
QRY_CombineItemIsBlocked((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemA,1)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemIsBlocked((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemB,1)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemIsBlocked((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemC,1)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemIsBlocked((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemD,1)
THEN
DB_NOOP(1);

QRY
QRY_CombineItemIsBlocked((CHARACTER)_Player,(ITEM)_ItemA,(ITEM)_ItemB,(ITEM)_ItemC,(ITEM)_ItemD,(ITEM)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemE,1)
THEN
DB_NOOP(1);

// Picking up/dropping owned corpses
IF
AddedTo((CHARACTER)_Corpse,(CHARACTER)_Player,_)
AND
DB_Players((CHARACTER)_Player)
AND
DB_OwnedCorpse(_Corpse,_CorpseOwner)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Player,_Corpse,_CorpseOwner,"PickUp",1);

IF
DroppedBy((CHARACTER)_Corpse,_Player)
AND
DB_Players(_Player)
AND
DB_OwnedCorpse(_Corpse,_CorpseOwner)
THEN
PROC_CrimeRegisterOwnedCorpseInteraction(_Player,_Corpse,_CorpseOwner,"Drop",1);

//END_REGION

//REGION Linked crimes
PROC
PROC_CharacterDisableCrime((CHARACTER)_Char,_Crime)
AND
DB_LinkedCrimes(_Crime,_LinkedCrime)
THEN
DB_CharacterCrimeDisabled(_Char,_LinkedCrime);
CharacterDisableCrime(_Char,_LinkedCrime);

PROC
PROC_CharacterEnableCrime((CHARACTER)_Char,_Crime)
AND
DB_LinkedCrimes(_Crime,_LinkedCrime)
THEN
DB_CharacterCrimeEnabled(_Char,_LinkedCrime);
CharacterEnableCrime(_Char,_LinkedCrime);

IF
DB_CrimeAttitudeChange("Assault",_Amount)
THEN
DB_CrimeAttitudeChange("IncapacitatedAssault",_Amount);

//END_REGION


//REGION Background reactions without fleeing
// Background reactions that don't cause people to flee explicitly should not cause people to
// return to their starting position at the end (DOSTWO-24283)
IF
CharacterOnCrimeSensibleActionNotification(_Char,_,_ID,_Reaction,_,_,_,_,_,_)
AND
DB_CRIME_FleeReaction(_Reaction)
AND
CrimeHasProperty(_ID, BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c,1)
THEN
DB_CRIME_ZeroTensionFlee(_ID,_Char);

IF
OnCrimeConfrontationDone(_ID,_Investigator,_,_,_,_,_)
AND
CrimeHasProperty(_ID, BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c,1)
AND
NOT DB_CRIME_ZeroTensionFlee(_ID,_Investigator)
AND
NOT DB_GEB_FledOutOfSight(_Investigator,_,_,_)
THEN
SetEntityEvent(_Investigator,"ClearCrimeReturn",1);

IF
OnCrimeConfrontationDone(_ID,_Investigator,_,_,_,_,_)
THEN
NOT DB_CRIME_ZeroTensionFlee(_ID,_Investigator);
//END_REGION

//REGION Investigation fallback: discovered but cannot reach criminal -> force combat
IF
EntityEvent((CHARACTER)_Investigator,"GEB_Investigation_SceneUnreachable")
AND
GetHandlingCrimeID(_Investigator,_CrimeID)
AND
CrimeGetType(_CrimeID,_CrimeType)
AND
DB_CRIME_SceneUnreachableCombat(_CrimeType)
AND
GetVarObject(_Investigator, "Criminal1",(CHARACTER)_Criminal)
AND
CanFight(_Investigator,1)
THEN
LookAtEntity(_Investigator,_Criminal);
PROC_TryStartAD((DIALOGRESOURCE)GEB_AD_Investigation_AttackFallback_37e82a0b-c7e0-2ca9-bbe7-af21834ee46f,_Investigator);
PROC_SetRelationTemporaryHostile(_Investigator,_Criminal);
//END_REGION

//REGION Stop a crime completely
IF
OnCrimeInvestigatorSwitchedState(_CrimeID,_Investigator,_,"Confronting")
AND
CrimeGetLeadInvestigator(_CrimeID,_Investigator)
AND
CrimeIsContinuous(_CrimeID,_Continuous)
THEN
DB_CRIME_LeadConfronting(_CrimeID,_Investigator,_Continuous);

IF
OnCrimeInvestigatorSwitchedState(_CrimeID,_Investigator,"Confronting",_)
AND
DB_CRIME_LeadConfronting(_CrimeID,_Investigator,_Continuous)
THEN
NOT DB_CRIME_LeadConfronting(_CrimeID,_Investigator,_Continuous);

PROC
PROC_CRIME_StopForAllCriminals((INTEGER)_CrimeID)
AND
// Can't remove criminals while confronting a non-continuous crime, must end confrontation by lead instead
// (after confrontation by lead ends, the crime will be resolved)
NOT DB_CRIME_LeadConfronting(_CrimeID,_,0)
AND
CrimeGetCriminalsCount(_CrimeID,_NumCriminals)
AND
_NumCriminals > 0
AND
QRY_DoNTimes(_NumCriminals)
AND
DB_QRY_RTN_DoNTimes(_Index)
AND
CrimeGetCriminal(_CrimeID,_Index,_Criminal)
THEN
CharacterStopCrimeWithID(_Criminal,_CrimeID);

PROC
PROC_CRIME_StopForAllCriminals((INTEGER)_CrimeID)
AND
CrimeGetLeadInvestigator(_CrimeID,_Lead)
THEN
// This works for all non-idle crime states, so we can also abort investigations with this
CrimeConfrontationDone(_CrimeID,_Lead);
//END_REGION

//REGION Track whether a character is handling a disturbance
IF
OnCrimeInvestigatorSwitchedState(_CrimeID,_Investigator,"Idle",_)
AND
CrimeHasProperty(_CrimeID,(DISTURBANCEPROPERTY)BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c,_IsBackgroundDisturbance)
THEN
DB_Is_HandlingDisturbance(_Investigator,_IsBackgroundDisturbance);

IF
OnCrimeInvestigatorSwitchedState(_CrimeID,_Investigator,_,"Idle")
THEN
PROC_CRIME_CheckForNewDisturbance(_Investigator);

// Could be handling a different crime now, so recheck (so we don't
// mark the NPC as "available" temporarily)
PROC
PROC_CRIME_CheckForNewDisturbance((CHARACTER)_Investigator)
THEN
NOT DB_CRIME_CheckForNewDisturbance_Found(1);

PROC
PROC_CRIME_CheckForNewDisturbance((CHARACTER)_Investigator)
AND
GetHandlingCrimeID(_Investigator,_CrimeID)
AND
CrimeHasProperty(_CrimeID,(DISTURBANCEPROPERTY)BackgroundReaction_db918cfb-a484-437c-93bb-8bc36fe98a9c,_IsBackgroundDisturbance)
AND
DB_Negate(_IsBackgroundDisturbance,_OppositeBackgroundDisturbance)
THEN
DB_CRIME_CheckForNewDisturbance_Found(1);
DB_Is_HandlingDisturbance(_Investigator,_IsBackgroundDisturbance);
// Clear old DB in case it was different in terms of the background disturbance property
// (first set new one, so rules checking whether neither is set won't trigger)
NOT DB_Is_HandlingDisturbance(_Investigator,_OppositeBackgroundDisturbance);

PROC
PROC_CRIME_CheckForNewDisturbance((CHARACTER)_Investigator)
AND
NOT DB_CRIME_CheckForNewDisturbance_Found(1)
AND
DB_Is_HandlingDisturbance(_Investigator,_IsBackgroundDisturbance)
THEN
NOT DB_Is_HandlingDisturbance(_Investigator,_IsBackgroundDisturbance);
//END_REGION

//REGION Crime-specific sight logic
QRY
QRY_CRIME_CanSeeCriminal((CHARACTER)_Caller,(CHARACTER)_Criminal)
AND
DB_Sees(_Caller,_Criminal)
THEN
DB_NOOP(1);

// Fallback for crowd and simple characters (they don't have sight capabilities)
QRY
QRY_CRIME_CanSeeCriminal((CHARACTER)_Caller,(CHARACTER)_Criminal)
AND
NOT DB_Sees(_Caller,_Criminal)
AND
NOT QRY_CharacterIsHidden(_Criminal)
AND
// Add GetSightRange query (this is the sight range of _Base)
QRY_IsInRange(_Caller,_Criminal,16.0)
AND
HasLineOfSight(_Caller,_Criminal,1)
THEN
DB_NOOP(1);
//END_REGION

//REGION Summons don't react to crimes
IF
DB_PlayerSummons(_Summon)
THEN
BlockNewCrimeReactions(_Summon, 1);
//END_REGION
EXITSECTION
	
ENDEXITSECTION
ParentTargetEdge "__Shared_Campaign"
