Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Documentation on Confluence: [Link Redacted]
//REGION Relationship threshold flags
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_-40_For_Sp1_b5ab9ca2-f6cd-aefc-5a2d-7d64f5d3f705, -40);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_-40_For_Sp2_8048280b-6d47-7a41-ca35-4acd441219fb, -40);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_-40_For_Sp3_972ad03d-3a49-bab2-2983-01efd98ec272, -40);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_-40_For_Sp4_dcebf4e2-2410-f836-b5ac-843f283bb8db, -40);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_-40_For_Sp5_8bc51a4f-4e27-e233-603a-0152a597bb53, -40);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_-40_For_Sp6_66a71cdc-fff4-002a-a596-f1a411ebf834, -40);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_-40_For_Sp7_52cf2f29-d327-38c9-4b95-af45737310f9, -40);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_-40_For_Sp8_a51ebfc6-4f03-dee3-7371-7f77d9438396, -40);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_-30_For_Sp8_862600f1-3fec-7cf1-5919-ea231e60741e, -30);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_-30_For_Sp7_f2077c29-8b90-e7bf-1b3b-e54953572d9f, -30);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_-30_For_Sp6_1367a864-28a6-6e79-f4fb-bfdf6693195e, -30);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_-30_For_Sp5_af384d6b-0a1a-d2fe-eccf-f7b5fbf0a77d, -30);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_-30_For_Sp4_fff32281-b937-22d0-b283-29e547cb2765, -30);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_-30_For_Sp3_c6dc4704-03d4-7341-da34-27f8df3f3390, -30);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_-30_For_Sp2_f3edd65c-5368-b2e0-486f-fb6bbfd8f948, -30);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_-30_For_Sp1_8f9363d0-7072-bbac-3615-7ede8167786e, -30);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_-20_For_Sp1_209202b4-2d23-0c5f-9437-8cae49ef1a36, -20);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_-20_For_Sp2_4c39c64b-8373-6f5f-2dac-990196d3c6dc, -20);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_-20_For_Sp3_f9de3de1-3b93-acc1-d0c6-bb5ec029ceb4, -20);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_-20_For_Sp4_78b5186f-9a5c-2225-3293-d6b9b67b042e, -20);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_-20_For_Sp5_5c42332e-8fce-c600-7c9c-1db11d983ba9, -20);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_-20_For_Sp6_e3d69631-b56b-5cf8-4343-ddf74ef5e2a2, -20);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_-20_For_Sp7_9c3028cd-6361-acb1-28a1-b2ade10712a2, -20);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_-20_For_Sp8_32ba15fd-1aa8-e6d1-746c-ef06acd20241, -20);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_-10_For_Sp1_487684c1-c443-51f9-2b5a-605e1d744164, -10);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_-10_For_Sp2_83af0bd4-90ca-5a49-2cd4-b7f6d84f55d6, -10);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_-10_For_Sp3_ce552cc6-4a56-66ce-4307-f184558fd519, -10);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_-10_For_Sp4_c380eaee-571b-3d90-5ab3-0fc49a3147af, -10);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_-10_For_Sp5_bafcfe34-39d0-76d6-d3b3-f83a3af6520d, -10);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_-10_For_Sp6_ba713378-57c3-0174-bdb4-500d4696baf1, -10);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_-10_For_Sp7_fdd7ea1d-3e9e-671c-2a26-f007e7f24374, -10);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_-10_For_Sp8_dd631c7c-1e7c-3c0e-a2fd-781571013df6, -10);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_0_For_Sp1_80966819-5946-2be4-645c-809ecb253ed6, 0);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_0_For_Sp2_c90a1ed4-c142-3300-65d0-0a0a4d6e08f7, 0);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_0_For_Sp3_1a5e1181-0d95-2ede-17a4-73d90ff80b16, 0);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_0_For_Sp4_0f3d2be5-4b46-5d79-52d7-23d192809d8c, 0);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_0_For_Sp5_c6d3b29d-f6aa-b56f-4534-1a469825a01b, 0);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_0_For_Sp6_2dc29d83-6949-af53-7716-ef92a033797e, 0);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_0_For_Sp7_9ba9c4f0-701b-9b3f-5351-89799446b87f, 0);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_0_For_Sp8_53c05fc5-8650-3dbd-77db-6a967a98451f, 0);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_5_For_Sp1_7468e995-931a-454f-9b2d-0facc6e81ee1, 5);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_5_For_Sp2_1966ea6c-0567-401b-96b6-28eb2b9116b8, 5);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_5_For_Sp3_a0c5116c-d6cf-4a92-8ba0-fa3e93cf327f, 5);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_5_For_Sp4_6c0445e8-1f6e-4487-8c8f-fffdfe36bc45, 5);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_5_For_Sp5_3de95a00-c1e1-4c0b-8a96-cfe8d1a0bdd1, 5);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_5_For_Sp6_544e42f0-e5ed-40e9-8eb6-3fb291e8cc96, 5);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_5_For_Sp7_a607d7c2-550e-4370-a881-9f17057c8964, 5);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_5_For_Sp8_cb3132da-b370-4b39-9564-2fdb55b69ed9, 5);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_10_For_Sp1_2a7380a2-da28-7741-a065-fd118fdd9a92, 10);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_10_For_Sp2_fccac36f-92a5-ad84-9e45-fed71d386452, 10);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_10_For_Sp3_be8510e8-0339-3fee-f198-b1dbe1a0b010, 10);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_10_For_Sp4_d9dca2cd-6f2e-2b0b-7acd-2998c28e423f, 10);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_10_For_Sp5_07cc77e6-f6b6-cced-08c8-15e0b6e57fcb, 10);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_10_For_Sp6_a73a36ae-c4b3-e79e-98ae-c393c8613f8a, 10);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_10_For_Sp7_ad3eebe2-0608-3b7d-940d-0a5f89817009, 10);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_10_For_Sp8_0c69a671-d426-347e-4ed7-3652a2c62dc6, 10);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_20_For_Sp1_f262956a-153c-91bd-4d7c-9a8e5e11119e, 20);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_20_For_Sp2_91cfff92-fb1e-caf5-9d5c-9c5971b96d04, 20);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_20_For_Sp3_1e3e9473-4277-79b5-42a2-cfd066386593, 20);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_20_For_Sp4_6577f4d6-484e-6054-93a3-586ef6fb790e, 20);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_20_For_Sp5_71329c17-9144-3f40-e7fc-c1f7d4257663, 20);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_20_For_Sp6_7b3cf70e-ee58-25c1-076a-8b8e863469a6, 20);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_20_For_Sp7_dfc5c129-03de-43ec-1355-b91dd281d1d3, 20);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_20_For_Sp8_4cd2d6ed-7581-1e83-6ef6-d2585b7a65b2, 20);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_35_For_Sp1_662a12ed-c01d-4af2-9510-d18bf5005c29, 35);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_35_For_Sp2_0c8d2c95-983d-4f69-b1b4-7ff8ebc7e8c5, 35);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_35_For_Sp3_8d6daa9f-187f-4bce-8036-3073dd41e042, 35);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_35_For_Sp4_a230990c-7305-4b86-aa7b-cb56bc437a1a, 35);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_35_For_Sp5_23bef76e-4327-4fd8-ac29-63e670d84b76, 35);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_35_For_Sp6_f4dfddbb-7692-42d8-b7e7-81663df1fab3, 35);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_35_For_Sp7_315b9416-9ea5-4dce-a922-76999ee91b77, 35);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_35_For_Sp8_540c3a4d-0a86-462e-bdf1-f95649366c95, 35);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_30_For_Sp1_55081005-8df3-62e5-60d9-971a0439947e, 30);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_30_For_Sp2_98ca7185-0f2d-4420-be81-2b7c5e109e91, 30);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_30_For_Sp3_534d898c-b83a-2523-eff2-e44fec0c207e, 30);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_30_For_Sp4_6f7d25cc-01ae-5a89-578e-355fade06976, 30);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_30_For_Sp5_d7a4ac4f-4f39-0307-e3ff-fefee2b5e36c, 30);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_30_For_Sp6_7cde612d-5755-6bf7-6fb2-6365e20cc7cc, 30);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_30_For_Sp7_da1fcdc2-de0d-7ff8-0487-9b970cdb6a01, 30);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_30_For_Sp8_2249338c-8458-4a51-2bc7-f1ace2aa8897, 30);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_40_For_Sp1_50cd7894-b71c-adf0-7476-48b94c42be43, 40);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_40_For_Sp2_cb50595f-b514-26a8-0c90-fbb21185b22e, 40);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_40_For_Sp3_f1ab5792-7ebe-3021-bb12-e8b749507477, 40);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_40_For_Sp4_f242d0c0-ec33-ba97-0fc7-38eb9e069744, 40);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_40_For_Sp5_dbbb346d-e481-fab7-5656-c66a9aba41ec, 40);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_40_For_Sp6_a9100391-be49-c52d-4514-bc12c412c77a, 40);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_40_For_Sp7_e4647aa3-27b6-9141-1852-c3cb9ad387dc, 40);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_40_For_Sp8_264fd066-e4ab-30c1-20bf-37f3878ead69, 40);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_50_For_Sp1_31d32c7a-52bc-62fc-38a7-15277f3b46fb, 50);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_50_For_Sp2_c2882882-ad2e-460d-4ab7-77f502407eaf, 50);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_50_For_Sp3_1ab5dca5-dc29-9dcc-2f8f-bcc15147a15c, 50);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_50_For_Sp4_9127723e-2705-ab06-3756-74ef70c64e63, 50);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_50_For_Sp5_3ec33176-b4dd-66fc-d2c2-3c35e75c9d57, 50);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_50_For_Sp6_6931495d-29b5-8971-69a8-e6738963688e, 50);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_50_For_Sp7_558ee7d5-41ec-430e-2f6e-b88d0164dbc8, 50);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_50_For_Sp8_f8470e9b-4176-7b85-ab98-14ba12932d10, 50);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_60_For_Sp1_4445984d-56f3-0e7c-25d5-cf5cca2a5642, 60);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_60_For_Sp2_bf670cb3-8110-e901-ed45-bb0b0f15b761, 60);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_60_For_Sp3_379b2a1e-207f-fca8-b2e7-372dc8751a5d, 60);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_60_For_Sp4_0ec68bb1-36f5-91a6-33ce-bdeb03500cd3, 60);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_60_For_Sp5_0327c081-f75e-af79-db68-6bff6b3fc618, 60);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_60_For_Sp6_f6320f72-d30d-2ada-6ad3-029ba68bb162, 60);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_60_For_Sp7_f5e9b2a3-7008-f239-ed0d-c8c93468f4a3, 60);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_60_For_Sp8_4ed58c96-3ed3-d0ab-08fe-1e005b897e68, 60);
DB_OriginRelationThresholdEventsPerSpeaker(9, (FLAG)Approval_AtLeast_60_For_Sp9_8767c432-0a83-d4b0-e0e4-7306f38ba150, 60);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_70_For_Sp1_2fb2abfb-5445-5419-6de4-77380dbf6265, 70);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_70_For_Sp2_183bb6c7-7d59-0fbc-82ea-8f167bbb7553, 70);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_70_For_Sp3_207d5eaa-871d-a8ff-7ef4-a3778ef41660, 70);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_70_For_Sp4_75d58ff1-4ef2-da14-e7f0-9a2a07e94bbe, 70);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_70_For_Sp5_92845171-f0a7-b40d-a2bd-276f1869a99b, 70);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_70_For_Sp6_1a586740-994e-e3aa-0d1e-bc070f483e89, 70);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_70_For_Sp7_5b917a54-1f88-8d60-bee2-a0cac84fa475, 70);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_70_For_Sp8_199fbc42-e5f8-7e11-36b3-d4dc348fdb73, 70);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_80_For_Sp1_c014f892-8450-7821-8936-f862cc67654e, 80);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_80_For_Sp2_4975d4b7-031d-7a78-778a-86b46503a224, 80);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_80_For_Sp3_5d4a8ffd-8e6b-f5ad-22f4-c4c21fe9f3e0, 80);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_80_For_Sp4_001125f2-3208-5127-bdb2-eeb45f054e70, 80);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_80_For_Sp5_c349164e-ae28-d2b4-eef1-50fbdd06bc2e, 80);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_80_For_Sp6_afbcda35-0370-bcd3-2b8f-4ab9515b44b0, 80);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_80_For_Sp7_b62c330f-45c1-31f8-259c-1612e5bde942, 80);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_80_For_Sp8_f9d76602-b77c-ad3c-e629-a3db592b0414, 80);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_90_For_Sp1_1b98e5dd-064f-a93b-fcb0-23cd1c55671f, 90);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_90_For_Sp2_a6e30a69-e73e-be47-44e6-5e0a799ba02d, 90);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_90_For_Sp3_4caef451-20b0-49ff-c5ad-954fadd29d44, 90);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_90_For_Sp4_d0321928-f0ea-8138-7e44-7830852d0a85, 90);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_90_For_Sp5_6fdd52fa-7899-d484-fc0c-2d6349a4ca2d, 90);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_90_For_Sp6_c77be22f-d0e7-e38c-dc68-c5d42e98a832, 90);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_90_For_Sp7_b0467b67-bbe5-5835-2788-3060dae6e779, 90);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_90_For_Sp8_f9b00a9c-a3c1-2737-21e7-b8f1669a614f, 90);
DB_OriginRelationThresholdEventsPerSpeaker(1, (FLAG)Approval_AtLeast_100_For_Sp1_20293b72-864b-f8c7-605b-500e5a9fffd1, 100);
DB_OriginRelationThresholdEventsPerSpeaker(2, (FLAG)Approval_AtLeast_100_For_Sp2_5a2ce348-da21-b68d-e777-83631eb4107d, 100);
DB_OriginRelationThresholdEventsPerSpeaker(3, (FLAG)Approval_AtLeast_100_For_Sp3_4c9f41f5-b15c-7c2b-b62e-9c9b16ca46f5, 100);
DB_OriginRelationThresholdEventsPerSpeaker(4, (FLAG)Approval_AtLeast_100_For_Sp4_6f71c17b-9d7d-aafe-dae3-914dcc464b8b, 100);
DB_OriginRelationThresholdEventsPerSpeaker(5, (FLAG)Approval_AtLeast_100_For_Sp5_ba31ebb9-f3ac-c89d-fca1-c80163f5960e, 100);
DB_OriginRelationThresholdEventsPerSpeaker(6, (FLAG)Approval_AtLeast_100_For_Sp6_7689ecc4-914c-368d-41b8-9ab20afd6ffb, 100);
DB_OriginRelationThresholdEventsPerSpeaker(7, (FLAG)Approval_AtLeast_100_For_Sp7_ebeb67a2-c031-0b10-9205-041ece18f242, 100);
DB_OriginRelationThresholdEventsPerSpeaker(8, (FLAG)Approval_AtLeast_100_For_Sp8_3d696bde-ff67-01a9-c131-6c46b96c8931, 100);
//END_REGION

// The dialog that gets started when a companion's attitude drops below a certain level. Also a dialog from which a dialog can be
// permanently dismissed/killed.
NOT DB_OriginLeavingDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

// Other dialogs from which a companion can be permanently dismissed/killed.
NOT DB_OriginMayLeaveDialog((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

NOT DB_CompanionCanPartner((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, "");

//The DBs are defined in Gustav and GustavDev
NOT DB_OriginPartOfTheTeamFlag((CHARACTER) NULL_00000000-0000-0000-0000-000000000000, (FLAG) NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_OriginKickFromPartyFlags((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);


//Reasons for origins who might temporarily leave the team
NOT DB_Origin_TemporaryLeaveReason((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, "");

//Tracks what Avatars are dating what Companions (in that order)
NOT DB_ORI_Dating((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

//Character who doesn't count towards dating limit
NOT DB_ORI_FreeDating((CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

//REGION Killing NPCs that the Origins care about
// use positive ApprovalChange to increase approval
// use negative ApprovalChange to decrease approval
// set _OnlyOnce to 1 to allow only one approval change
// _Companion, _Faction, _ApprovalChange, _IncludeChildFactions, _OnlyOnce
NOT DB_CompanionCaredFaction((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FACTION)NULL_00000000-0000-0000-0000-000000000000, 0, 0, 0);

// use DB_CompanionCaredFaction_IgnoredNPC to prevent the companion from reacting to death of certain NPCs even if the companion cares about their faction
NOT DB_CompanionCaredFaction_IgnoredNPC((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
//END_REGION

DB_Origins_BlockTransferReasons("Killed");
DB_Origins_BlockTransferReasons("CompanionHostile");
DB_Origins_BlockTransferReasons("CompanionMurdered");
DB_Origins_BlockTransferReasons("Debug");

DB_Origins_NestedFlags((FLAG)ORI_InParty_Event_EnterFromNestedEnd_d0b9336e-628d-9882-92f4-1e8333733573);
DB_Origins_NestedFlags((FLAG)ORI_InParty_Event_EnterFromNestedNoComment_9b25b086-d73c-4ae4-8099-d995a740be2d);
DB_Origins_NestedFlags((FLAG)ORI_InParty_Event_EnterFromNestedWithComment_1eed37c0-2301-440f-bf0e-842d49aacf5b);

NOT DB_ORI_WasDating((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_ORI_WasDatingFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CompanionIsDating((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);

DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionA_6061dd44-55fe-41b0-a79c-fc696073de0a);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionB_8da83898-1476-43e7-ab38-314c61b1ff74);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionC_98e473ed-0144-482c-853a-e4fc739646f5);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionD_0bdf3afd-1997-4c9e-82f3-b1365a47034c);

NOT DB_ORI_SelectedKissFlag((FLAG)NULL_00000000-0000-0000-0000-000000000000);

DB_ORI_RandomKissCount(0);

KBSECTION
//REGION Make all non-selected characters NPCs again after CC
PROC
PROC_PlayersSelected("Initial")
AND
DB_Origins((CHARACTER)_Origin)
AND
IsTagged(_Origin,(TAG)AVATAR_306b9b05-1057-4770-aa17-01af21acd650,0)
THEN
PROC_GLO_PartyMembers_Initialize(_Origin);

PROC
PROC_PlayersSelected("Initial")
THEN
PROC_CheckPartyFull();
//END_REGION

//REGION Setup/clear recruitment situation hooks
// Set up recruitment in the level the first time it gets loaded, unless we're reloading story
// (because then a party preset will still be loaded later, which may include this origin;
//  PROC_GLO_Origins_SetupRecruitment() will then be called once the preset has been loaded)
PROC
PROC_LevelLoadedOnce(_Level)
AND
NOT DB_StoryReloaded(1)
THEN
PROC_GLO_Origins_SetupRecruitment(_Level);

// Used when reloading story or recruiting an origin via the debug book
PROC
PROC_GLO_Origins_SetupRecruitment((STRING)_Level)
THEN
DB_NOOP(1);
//END_REGION

//REGION Alignments as NPC (for GLO_PartyMembers)
IF
DB_OriginNPCAlignment((CHARACTER)_Origin,(FACTION)_Alignment)
THEN
DB_GLO_PartyMembers_OriginalAlignment(_Origin,_Alignment);
//END_REGION

//REGION Support routines for GLO_PartyMembers
QRY
QRY_GLO_PartyMembers_GetInPartyDialog((CHARACTER)_Origin)
AND
DB_OriginInPartyDialog(_Origin,(DIALOGRESOURCE)_Dialog)
THEN
DB_GLO_PartyMembers_InPartyDialog(_Origin,_Dialog);

IF
DB_OriginInPartyDialog(_Origin,(DIALOGRESOURCE)_NewDialog)
AND
DB_OriginInPartyDialog(_Origin,(DIALOGRESOURCE)_OldDialog)
AND
_NewDialog != _OldDialog
AND
DB_Dialogs(_Origin,_OldDialog)
THEN
NOT DB_OriginInPartyDialog(_Origin,(DIALOGRESOURCE)_OldDialog);
PROC_RemoveAllDialogEntriesForSpeaker(_Origin);
DB_Dialogs(_Origin,_NewDialog);
//END_REGION

//REGION Update origin recruitment location and dialog depending on the region
PROC
PROC_GLO_Origins_SetRecruitmentDialog((CHARACTER)_Origin,(DIALOGRESOURCE)_NewDialog)
THEN
PROC_GLO_Origins_SetRecruitmentDialog((CHARACTER)_Origin,(DIALOGRESOURCE)_NewDialog, 0);

PROC
PROC_GLO_Origins_SetRecruitmentDialog((CHARACTER)_Origin,(DIALOGRESOURCE)_NewDialog, (INTEGER)_IgnoreInPartyDialog)
THEN
PROC_GLO_Origins_RemoveRecruitmentDialogs(_Origin);
DB_OriginRecruitmentDialog(_Origin, _NewDialog);
DB_DropMutingStatussesDialog(_NewDialog);
PROC_GLO_Origins_SetRecruitmentDialog_Internal(_Origin, _IgnoreInPartyDialog);

PROC
PROC_GLO_Origins_SetRecruitmentDialog_Internal((CHARACTER)_Origin, (INTEGER)_IgnoreInPartyDialog)
AND
QRY_Origin_GetRecruitmentDialog(_Origin, _IgnoreInPartyDialog)
AND
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_NewDialog)
THEN
PROC_RemoveAllDialogEntriesForSpeaker(_Origin);
PROC_GLO_Origins_MaybeSetDefaultDialog(_Origin,_NewDialog);

IF
Resurrected(_Origin)
AND
NOT DB_GLO_PartyMembers_BlockRecruitmentDialog(_Origin)
AND
DB_OriginRecruitmentDialog(_Origin,_)
AND
NOT DB_Players(_Origin)
THEN
PROC_GLO_Origins_SetRecruitmentDialog_Internal(_Origin, 0);

PROC
PROC_KnockedOut_Ended(_Origin)
AND
NOT DB_GLO_PartyMembers_BlockRecruitmentDialog(_Origin)
AND
DB_OriginRecruitmentDialog(_Origin,_)
AND
NOT DB_Players(_Origin)
THEN
PROC_GLO_Origins_SetRecruitmentDialog_Internal(_Origin, 0);
//END_REGION

//REGION Add / Remove from Party
QRY
QRY_Origin_GetRecruitmentDialog((CHARACTER)_Origin, (INTEGER)_IgnoreInPartyDialog)
AND
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_Dialog)
THEN
NOT DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_Dialog);

// Override dialog for origin-as-NPC
QRY
QRY_Origin_GetRecruitmentDialog((CHARACTER)_Origin, (INTEGER)_IgnoreInPartyDialog)
AND
DB_GLO_PartyMembers_BlockRecruitmentDialog(_Origin)
THEN
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);

QRY
QRY_Origin_GetRecruitmentDialog((CHARACTER)_Origin, 0)
AND
NOT DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_)
AND
DB_PartOfTheTeam(_Origin)
AND
DB_OriginInPartyDialog(_Origin,_IPD) //Once they've been recruited once, origin characters move to the camp and their In Party Dialog is used as recruitment dialog.
THEN
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_IPD);

// Default dialog for origin-as-NPC
QRY
QRY_Origin_GetRecruitmentDialog((CHARACTER)_Origin, (INTEGER)_IgnoreInPartyDialog)
AND
NOT DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_)
AND
DB_OriginRecruitmentDialog(_Origin,_Dialog)
THEN
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_Dialog);

IF
FlagSet(OriginAddToParty_4870b2cd-210c-0fdc-9c58-4d0142bdae29, (CHARACTER)_Origin, _ID) // flagType: Object
AND
DB_DialogPlayers(_ID,_Player,_)
AND
NOT DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,_)
AND
DB_Avatars((CHARACTER)_Player)
THEN
DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,(CHARACTER)_Player);

IF
FlagSet(OriginAddToParty_4870b2cd-210c-0fdc-9c58-4d0142bdae29, (CHARACTER)_Origin, _ID) // flagType: Object
AND
DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,(CHARACTER)_Player)
AND
DB_DialogPlayers(_ID,_OtherPlayer,_)
AND
_OtherPlayer != _Player
AND
DB_Avatars((CHARACTER)_OtherPlayer)
THEN
DebugBreak("Multiple avatars in dialog when recruiting, first avatar selected as recruiter. Add a custom flag for this case to make it more explicit.");

IF
FlagSet(OriginAddToParty_4870b2cd-210c-0fdc-9c58-4d0142bdae29, (CHARACTER)_Origin, _ID) // flagType: Object
AND
NOT DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,_)
THEN
DebugBreak("Could not find avatar for recruitment");

IF
FlagSet(OriginAddToParty_4870b2cd-210c-0fdc-9c58-4d0142bdae29, (CHARACTER)_Origin, _ID) // flagType: Object
THEN
ClearFlag((FLAG)OriginAddToParty_4870b2cd-210c-0fdc-9c58-4d0142bdae29, _Origin, 0); // flagType: Object

// Post-Start Avatar Creation
IF
UserAvatarCreated(_UserID, _Avatar, _Daisy)
AND
GetHostCharacter(_Player)
THEN
TeleportTo(_Avatar,_Player);
SetOnStage(_Daisy, 0);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_Origin)
AND
DB_OriginNPCAlignment(_Origin,_)
AND
QRY_Origin_GetRecruitmentDialog(_Origin, 0)
AND
DB_QRYRTN_Origin_GetRecruitmentDialog(_Origin,_NewDialog)
THEN
PROC_GroupDiscussion_CancelForPlayer(_Origin); //restores the previous dialog, so only now cancel all existing dialogs
PROC_RemoveAllDialogEntriesForSpeaker(_Origin);
PROC_GLO_Origins_MaybeSetDefaultDialog(_Origin,_NewDialog);
SetHasDialog(_Origin,0); // Origin should not have dialog until AFTER they have returned to recruit position

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_Origin)
THEN
PROC_GLO_BreakConcentration(_Origin);	

//Ignore crimes while they are running away.
PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_PartyMember)
AND
CharacterIgnoreActiveCrimes(_PartyMember,_)
THEN
DB_NOOP(1);

PROC
PROC_GLO_Origins_MaybeSetDefaultDialog((CHARACTER)_Origin,(DIALOGRESOURCE)_NewDialog)
AND
NOT DB_Avatars(_Origin)
AND
NOT DB_DismissedAvatar(_Origin)
AND
_NewDialog != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_Dialogs(_Origin,_NewDialog);

PROC
PROC_GLO_Origins_RemoveRecruitmentDialogs((CHARACTER)_Origin)
AND
DB_OriginRecruitmentDialog(_Origin,_Dialog)
THEN
NOT DB_OriginRecruitmentDialog(_Origin,_Dialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_Origin)
AND
DB_OriginNPCAlignment(_Origin,_)
AND
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Origin)
AND
DB_PartOfTheTeam(_Origin)
AND
NOT DB_DismissedAvatar(_Origin)
THEN
PROC_DismissToCamp(_Origin);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTER)_Origin)
AND
DB_OriginInPartyGlobal(_Origin,(FLAG)_GlobalFlag)
THEN
ClearFlag((FLAG)_GlobalFlag, NULL_00000000-0000-0000-0000-000000000000, 0); // flagType: Global

//REGION Return to Recruitment Pos
PROC
PROC_DismissToCamp((CHARACTER)_Origin)
AND
QRY_Camp_GetCamperPos(_Origin)
AND
DB_QRYRTN_Camp_GetCamperPos(_Origin,(TRIGGER)_CampPos)
AND
GetDistanceTo(_Origin,_CampPos,_Dist)
AND
DB_InCamp(_Origin)
THEN
SetHasDialog(_Origin,1);

PROC
PROC_DismissToCamp((CHARACTER)_Origin)
AND
QRY_Camp_GetCamperPos(_Origin)
AND
DB_QRYRTN_Camp_GetCamperPos(_Origin,(TRIGGER)_CampPos)
AND
GetDistanceTo(_Origin,_CampPos,_Dist)
AND
NOT DB_InCamp(_Origin)
AND
_Dist > 18.0
THEN
PROC_DisappearOutOfSight(_Origin,"Walk",0,"Origin_RestoreDialog");
DB_CAMP_WalkingToCamp(_Origin);

PROC
PROC_DismissToCamp((CHARACTER)_Origin)
AND
QRY_Camp_GetCamperPos(_Origin)
AND
DB_QRYRTN_Camp_GetCamperPos(_Origin,(TRIGGER)_CampPos)
AND
GetDistanceTo(_Origin,_CampPos,_Dist)
AND
NOT DB_InCamp(_Origin)
AND
_Dist <= 18.0
THEN
PROC_CharacterMoveTo(_Origin,_CampPos,"Walk","Origin_RestoreDialog");

PROC
PROC_DismissToCamp((CHARACTER)_Origin)
THEN
RemoveSummons(_Origin, 1);

PROC
PROC_DisappearOutOfSightToCancelled(_Origin)
AND
DB_CAMP_WalkingToCamp(_Origin)
THEN
NOT DB_CAMP_WalkingToCamp(_Origin);
DB_Camp_WalkingToCampPaused(_Origin);

PROC	
PROC_StateCleared_CantMove(_Origin)
AND
DB_Camp_WalkingToCampPaused((CHARACTER)_Origin)
THEN
NOT DB_Camp_WalkingToCampPaused(_Origin);
PROC_DismissToCamp((CHARACTER)_Origin);

IF
EntityEvent((CHARACTER)_Origin,"Origin_RestoreDialog")
AND
QRY_Camp_GetCamperPos(_Origin)
AND
DB_QRYRTN_Camp_GetCamperPos(_Origin,(TRIGGER)_CampPos)
THEN
TeleportTo(_Origin,_CampPos);

IF
EntityEvent((CHARACTER)_Origin,"Origin_RestoreDialog")
THEN
SetOnStage(_Origin,1);
SetHasDialog(_Origin,1);

PROC
PROC_Camp_TeleportAllToCamp()
AND
DB_CAMP_WalkingToCamp(_Origin)
THEN
FlushOsirisQueue(_Origin);

IF
TeleportedToCamp(_Origin)
AND
DB_CAMP_WalkingToCamp(_Origin)
THEN
NOT DB_CAMP_WalkingToCamp(_Origin);
//END_REGION

PROC
PROC_AssignCharacterToPlayer((CHARACTER)_Char,(CHARACTER)_Player)
AND
GetReservedUserID(_Player,_User)
THEN
AssignToUser(_User,_Char);

//END_REGION

//REGION Find best Avatar for Companion
//This query returns the best avatar for a given companion.
//If the companion is in the party, it'll return an avatar assigned to the same user as the companion. In case of multiple available avatars, the one with the highest approval rating is chosen.
//If the companion is not in the party, it'll return the avatar with the highest approval rating.

//Normal Usage:
//QRY_GetBestAvatarForCompanion((CHARACTER)_Companion)
//AND
//DB_QRYRTN_GetBestAvatarForCompanion((CHARACTER)_Companion,(CHARACTER)_Avatar)

QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion)
AND
QRY_GetBestAvatarForCompanion(_Companion,0,0,0)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker)
AND
QRY_GetBestAvatarForCompanion(_Companion,_Nearby,_AvailableSpeaker,0)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck)
AND
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, 0)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat)
THEN
DB_NOOP(1);

//CLEAR OLD DATA
QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat)
AND
DB_QRYRTN_GetBestAvatarForCompanion(_Companion,(CHARACTER)_Avatar)
THEN
NOT DB_QRYRTN_GetBestAvatarForCompanion(_Companion,_Avatar);

QRY
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat)
AND
NOT DB_Avatars(_Companion)
AND
NOT DB_DismissedAvatar(_Companion)
AND
GetReservedUserID(_Companion,_CompanionUserID)
AND
NOT QRY_BestAvatarForCompanion_PartnerAvailable(_Companion,_Nearby,_AvailableSpeaker,_HideCheck, _IgnoreCombat)
AND
QRY_GetBestAvatarForCompanion_FindBestCandidates(_Companion,_CompanionUserID,_Nearby,_AvailableSpeaker,_HideCheck, (INTEGER)_IgnoreCombat)
THEN
DB_NOOP(1);

QRY
QRY_BestAvatarForCompanion_PartnerAvailable((CHARACTER)_Companion,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat)
AND
DB_ORI_Partnered(_Avatar,_Companion)
AND
NOT DB_DismissedAvatar(_Avatar)
AND
NOT QRY_PreventMPDialogue(_Avatar,_Companion)
AND
QRY_GetBestAvatarForCompanion_CheckNearby(_Nearby,_Companion,_Avatar, _IgnoreCombat)
AND
QRY_GetBestAvatarForCompanion_CheckAvailable(_AvailableSpeaker,_Avatar, _IgnoreCombat)
AND
QRY_Conditional_HideCheck(_HideCheck,_Avatar)
THEN
DB_QRYRTN_GetBestAvatarForCompanion(_Companion,_Avatar);

QRY
QRY_GetBestAvatarForCompanion_FindBestCandidates((CHARACTER)_Companion,-65536,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat) //Companion Not in Party -> Loop over all avatars
AND
DB_ApprovalRating(_Companion,_Avatar,_Rating)
AND
NOT DB_DismissedAvatar(_Avatar)
AND
QRY_GetBestAvatarForCompanion_CheckNearby(_Nearby,_Companion,_Avatar, _IgnoreCombat)
AND
QRY_GetBestAvatarForCompanion_CheckAvailable(_AvailableSpeaker,_Avatar, (INTEGER)_IgnoreCombat)
AND
QRY_Conditional_HideCheck(_HideCheck,_Avatar)
THEN
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_Avatar,_Rating);

QRY
QRY_GetBestAvatarForCompanion_FindBestCandidates((CHARACTER)_Companion,(INTEGER)_CompanionUserID,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat) //Companion in Party -> Loop over all user's avatars
AND
_CompanionUserID != -65536
AND
DB_ApprovalRating(_Companion,_Avatar,_Rating)
AND
NOT DB_DismissedAvatar(_Avatar)
AND
GetReservedUserID(_Avatar,_CompanionUserID) //Avatar has same user ID as companion
AND
QRY_GetBestAvatarForCompanion_CheckNearby(_Nearby,_Companion,_Avatar, _IgnoreCombat)
AND
QRY_GetBestAvatarForCompanion_CheckAvailable(_AvailableSpeaker,_Avatar, _IgnoreCombat)
AND
QRY_Conditional_HideCheck(_HideCheck,_Avatar)
THEN
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_Avatar,_Rating);

//Hirelings have no Approval Rating, just return any avatar
QRY
QRY_GetBestAvatarForCompanion_FindBestCandidates((CHARACTER)_Hireling,(INTEGER)_CompanionUserID,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat) //Companion in Party -> Loop over all user's avatars
AND
DB_Hirelings_Hired(_Hireling)
AND
DB_Avatars(_Avatar)
AND
NOT DB_DismissedAvatar(_Avatar)
AND
NOT QRY_PreventMPDialogue(_Avatar,_Hireling)
AND
QRY_GetBestAvatarForCompanion_CheckNearby(_Nearby,_Hireling,_Avatar, _IgnoreCombat)
AND
QRY_GetBestAvatarForCompanion_CheckAvailable(_AvailableSpeaker,_Avatar, _IgnoreCombat)
AND
QRY_Conditional_HideCheck(_HideCheck,_Avatar)
THEN
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Hireling,_Avatar,0);

QRY
QRY_GetBestAvatarForCompanion_CheckNearby(0,(CHARACTER)_Companion,(CHARACTER)_Avatar, _)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion_CheckNearby(1,(CHARACTER)_Companion,(CHARACTER)_Avatar, _)
AND
QRY_SpeakerIsInDialogRange(_Avatar,_Companion)
THEN
DB_NOOP(1);


QRY
QRY_GetBestAvatarForCompanion_CheckNearby(1,(CHARACTER)_Companion,(CHARACTER)_Avatar, 1)
AND
DB_Is_InCombat(_Companion, _Combat)
AND
DB_Is_InCombat(_Avatar, _Combat)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion_CheckAvailable(0,(CHARACTER)_Avatar, _)
THEN
DB_NOOP(1);

QRY
QRY_GetBestAvatarForCompanion_CheckAvailable(1,(CHARACTER)_Avatar, (INTEGER)_IgnoreCombat)
AND
QRY_SpeakerIsAvailable(_Avatar, _IgnoreCombat)
THEN
DB_NOOP(1);

//Only keep candidate with the highest rating
IF
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_NewCandidate,_NewCandidateRating)
THEN
PROC_QRYRTN_GetBestAvatarForCompanion_EvaluateNewCandidate(_Companion, _NewCandidate, _NewCandidateRating);

PROC
PROC_QRYRTN_GetBestAvatarForCompanion_EvaluateNewCandidate((CHARACTER)_Companion, (CHARACTER)_NewCandidate, (INTEGER)_NewCandidateRating)
AND
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_OriginalCandidate,_OriginalCandidateRating)
AND
_NewCandidate != _OriginalCandidate
AND
_NewCandidateRating <= _OriginalCandidateRating
THEN
NOT DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_NewCandidate,_NewCandidateRating);

PROC
PROC_QRYRTN_GetBestAvatarForCompanion_EvaluateNewCandidate((CHARACTER)_Companion, (CHARACTER)_NewCandidate, (INTEGER)_NewCandidateRating)
AND
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_OriginalCandidate,_OriginalCandidateRating)
AND
_NewCandidate != _OriginalCandidate
AND
_NewCandidateRating > _OriginalCandidateRating
THEN
NOT DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_OriginalCandidate,_OriginalCandidateRating);

//Rename and clean return param
QRY
QRY_GetBestAvatarForCompanion_FindBestCandidates((CHARACTER)_Companion,(INTEGER)_CompanionUserID,(INTEGER)_Nearby,(INTEGER)_AvailableSpeaker,(INTEGER)_HideCheck, (INTEGER)_IgnoreCombat)
AND
DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_Avatar,_Rating)
THEN
NOT DB_QRYRTN_GetBestAvatarForCompanion_Candidate(_Companion,_Avatar,_Rating);
DB_QRYRTN_GetBestAvatarForCompanion(_Companion,_Avatar);
//END_REGION

//REGION User Companion Differentiation
PROC
PROC_DialogFlagSetup(_Dialog,_OtherPlayer,_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_OtherPlayer)
AND
GetReservedUserID(_Player,_PID)
AND
GetReservedUserID(_OtherPlayer,_OPID)
AND
_PID == _OPID
THEN
DB_GLO_Shared_Origins_UserOwnedPlayerCharacterFlag(_Dialog, _OtherPlayer);
SetFlag((FLAG)UserOwnedPlayerCharacter_29e72419-7c09-4b79-be31-1acdc6293c17, _OtherPlayer); // flagType: Object

IF
DialogEnded(_Dialog,_ID)
AND
DB_GLO_Shared_Origins_UserOwnedPlayerCharacterFlag(_Dialog, _OtherPlayer)
AND
DB_DialogPlayers(_ID, _OtherPlayer, 1)
THEN
NOT DB_GLO_Shared_Origins_UserOwnedPlayerCharacterFlag(_Dialog, _OtherPlayer);
ClearFlag((FLAG)UserOwnedPlayerCharacter_29e72419-7c09-4b79-be31-1acdc6293c17, _OtherPlayer, 0); // flagType: Object

//END_REGION

//REGION Origin Hostility
IF 
FlagSet(SetOriginHostileAfterDialog_91659c6d-ed58-4b95-894b-763b69df824d, _UnRecruitedOrigin, _) // flagType: Object
THEN
DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin);
ClearFlag((FLAG)SetOriginHostileToOtherOrigins_8e8bb4ee-af06-4225-bed9-905b244f8780, _UnRecruitedOrigin, 0); // flagType: Object

IF
DialogEnded(_,_ID)
AND
DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin)
AND
DialogGetInvolvedNPC(_ID,1,(CHARACTER)_UnRecruitedOrigin)
AND
GetFaction(_UnRecruitedOrigin,_PreviousFaction)
THEN
NOT DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin);
PROC_SetRelationToPlayers(_PreviousFaction,0);
DB_ResetOriginAlignmentAfterCombat(_UnRecruitedOrigin,_PreviousFaction);

IF
LeftCombat(_UnRecruitedOrigin,_)
AND
DB_ResetOriginAlignmentAfterCombat((CHARACTER)_UnRecruitedOrigin,_PreviousFaction)
THEN
SetFaction(_UnRecruitedOrigin,_PreviousFaction);
NOT DB_ResetOriginAlignmentAfterCombat(_UnRecruitedOrigin,_PreviousFaction);

IF
FlagSet(FactionHostileToIndivPlayerAfterDialog_3a7747bd-004a-6e69-7ff5-4f4eb6c3c223, _, _ID) // flagType: Object
AND
DialogGetInvolvedNPC(_ID,1,(CHARACTER)_Origin)
AND
DB_GLO_PartyMembers_DefaultFaction(_Origin,_PlayerFaction)
THEN
SetFaction(_Origin,_PlayerFaction);
//END_REGION
 
//REGION Avatar Tracking
//Avatar DB_ to keep track of counts
IF
TagSet((CHARACTER)_Avatar,(TAG)AVATAR_306b9b05-1057-4770-aa17-01af21acd650)
AND
DB_Players(_Avatar)
AND
NOT DB_Avatars(_Avatar)
THEN
DB_Avatars(_Avatar);

//For Story Reloads
IF
DB_Players(_Avatar)
AND
IsTagged((CHARACTER)_Avatar,(TAG)AVATAR_306b9b05-1057-4770-aa17-01af21acd650,1)
AND
NOT DB_Avatars(_Avatar)
THEN
DB_Avatars(_Avatar);

IF
TagCleared((CHARACTER)_Avatar,(TAG)AVATAR_306b9b05-1057-4770-aa17-01af21acd650)
AND
DB_Avatars(_Avatar)
THEN
NOT DB_Avatars(_Avatar);

IF
DB_Avatars(_Avatar)
THEN
DB_PartOfTheTeam(_Avatar);
//END_REGION

//REGION Resurrection Blocking Spell
IF
UsingSpellOnTarget(_,(CHARACTER)_Origin,"Target_AntiResurrection",_,_,_)
THEN
SetTag(_Origin, (TAG)BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6);

IF
UsingSpellOnTarget(_,(CHARACTER)_Origin,"Target_AntiResurrection",_,_,_)
AND
IsTagged(_Origin,(TAG)AVATAR_306b9b05-1057-4770-aa17-01af21acd650,0)
THEN
DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Origin);
PROC_GLO_PartyMembers_Remove(_Origin,(CHARACTER)NULL_00000000-0000-0000-0000-000000000000,0);
PurgeOsirisQueue(_Origin);

//END_REGION

//REGION Relationship changes

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_ApprovalRating(_Companion,_Avatar,_Approval)
AND
RemoveApprovalRating(_Companion,_Avatar,_)
THEN
NOT DB_ApprovalRating(_Companion,_Avatar,_Approval);

IF
DB_Players(_Player)
AND
NOT DB_Avatars(_Player)
AND
NOT DB_DismissedAvatar(_Player)
AND
DB_Avatars(_Avatar)
AND
NOT DB_ApprovalRating(_Player,_Avatar,_)
THEN
DB_ApprovalRating(_Player,_Avatar,0);

IF
DB_InCamp(_Player)
AND
NOT DB_Avatars(_Player)
AND
NOT DB_DismissedAvatar(_Player)
AND
DB_Avatars(_Avatar)
AND
NOT DB_ApprovalRating(_Player,_Avatar,_)
THEN
DB_ApprovalRating(_Player,_Avatar,0);

IF
ApprovalRatingChangeAttempt(_From,_To,_AttemptedChange,_,_NewValue)
THEN
PROC_ApprovalRatingChanged(_From,_To,_AttemptedChange,_NewValue);

PROC
PROC_ApprovalRatingChanged((CHARACTER)_From,(CHARACTER)_To,(INTEGER)_AttemptedChange,(INTEGER)_NewValue)
AND
DB_Avatars(_To)
AND
NOT DB_Avatars(_From)
AND
DB_ApprovalRating(_From,_To,_OldValue)
THEN
PROC_OriginWarningBlockRemoval(_From,_AttemptedChange);
PROC_ApprovalRatingChanged_Apply(_From,_To,_AttemptedChange,_NewValue);

PROC
PROC_ApprovalRatingChanged_Apply((CHARACTER)_From,(CHARACTER)_To,(INTEGER)_AttemptedChange,(INTEGER)_NewValue)
AND
DB_ApprovalRating(_From,_To,_OldValue)
AND
_NewValue != _OldValue
THEN
DB_ApprovalRating_Updating(_From, _To);
DB_ApprovalRating(_From,_To,_NewValue);
NOT DB_ApprovalRating(_From,_To,_OldValue);
NOT DB_ApprovalRating_Updating(_From, _To);

//Every time a warning is given, a block is set on new warnings until a new drop in attitude occurs.
PROC
PROC_OriginWarningBlockRemoval((CHARACTER)_Companion,(INTEGER)_Delta)
AND
_Delta < 0
THEN
NOT DB_OriginWarningBlock(_Companion);

//Drop muting statusses for inparty dialogs due to cinematic reasons
IF
DB_OriginInPartyDialog(_Companion,_Dialog)
THEN
DB_DropMutingStatussesDialog(_Dialog);

IF
DB_OriginInPartyDialog(_Companion,_Dialog)
THEN
DB_OriginDialog((CHARACTER)_Companion,_Dialog);

PROC
PROC_RelationshipDialog((CHARACTER)_Companion,(DIALOGRESOURCE)_Dialog,(FLAG)_Flag,(GUIDSTRING)_Anchor,(INTEGER)_,(INTEGER)_)
THEN
DB_OriginDialog(_Companion,_Dialog);

PROC
PROC_CampRelationshipDialog((CHARACTER)_Camper,(DIALOGRESOURCE)_Dialog,(FLAG)_Flag,(INTEGER)_,(INTEGER)_)
THEN
DB_OriginDialog(_Camper,_Dialog);

IF
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -20
THEN
ObjectTimerLaunch(_Companion, "ORI_GiveLeaveWarning1", 3000);

IF
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -40
THEN
ObjectTimerLaunch(_Companion, "ORI_GiveLeaveWarning2", 3000);

IF
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -50
AND
GetFlag((FLAG)GLO_Companion_LeaveBlocked_4386e3a1-b16e-4331-92ec-29edbc359d51, _Companion, 0)
THEN
ObjectTimerLaunch(_Companion, "ORI_StartLeaveDialog", 3000);

// Start leave dialog once leaving is no longer blocked and the companion is eligible to leave the party
IF
FlagCleared((FLAG)GLO_Companion_LeaveBlocked_4386e3a1-b16e-4331-92ec-29edbc359d51, _Companion, _)
AND
DB_ApprovalRating((CHARACTER)_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -50
THEN
ObjectTimerLaunch(_Companion, "ORI_StartLeaveDialog", 3000);

IF
ObjectTimerFinished(_Companion, "ORI_GiveLeaveWarning1")
AND
NOT DB_OriginWarningBlock((CHARACTER)_Companion)
AND
DB_OriginWarning1Dialog(_Companion,(DIALOGRESOURCE)_Warning1Dialog)
AND
DB_Avatars(_Player)
AND
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -20
AND
NOT QRY_OriginAttemptLeaveWarning(_Companion, _Player, _Warning1Dialog)
AND
NOT DB_OriginRetryWarning(_Companion, _Warning1Dialog, _Player, "ORI_GiveLeaveWarning1")
THEN
DB_OriginRetryWarning(_Companion, _Warning1Dialog, _Player, "ORI_GiveLeaveWarning1");

IF
DialogEnded(_Warning1Dialog, _)
AND
DB_OriginWarning1Dialog(_Companion,(DIALOGRESOURCE)_Warning1Dialog)
THEN
NOT DB_OriginWarning1Dialog(_Companion,_Warning1Dialog);
DB_OriginWarningBlock(_Companion);

IF
ObjectTimerFinished(_Companion, "ORI_GiveLeaveWarning2")
AND
NOT DB_OriginWarningBlock((CHARACTER)_Companion)
AND
DB_OriginWarning2Dialog(_Companion,(DIALOGRESOURCE)_Warning2Dialog)
AND
DB_Avatars(_Player)
AND
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -40
AND
NOT QRY_OriginAttemptLeaveWarning(_Companion, _Player, _Warning2Dialog)
AND
NOT DB_OriginRetryWarning(_Companion, _Warning2Dialog, _Player, "ORI_GiveLeaveWarning2")
THEN
DB_OriginRetryWarning(_Companion, _Warning2Dialog, _Player, "ORI_GiveLeaveWarning2");

IF
DialogEnded(_Warning2Dialog, _)
AND
DB_OriginWarning2Dialog((CHARACTER)_Companion, _Warning2Dialog)
THEN
NOT DB_OriginWarning2Dialog(_Companion,_Warning2Dialog);
DB_OriginWarningBlock(_Companion);

IF
ObjectTimerFinished(_Companion, "ORI_StartLeaveDialog")
AND
NOT DB_OriginWarningBlock((CHARACTER)_Companion)
AND
DB_OriginLeavingDialog((CHARACTER)_Companion,_LeaveDialog)
AND
DB_Avatars(_Player)
AND
DB_ApprovalRating(_Companion,(CHARACTER)_Player,_Approval)
AND
_Approval <= -50
AND
NOT QRY_OriginAttemptLeaveWarning(_Companion, _Player, _LeaveDialog)
AND
NOT DB_OriginRetryWarning(_Companion, _LeaveDialog, _Player, "ORI_StartLeaveDialog")
THEN
DB_OriginRetryWarning(_Companion, _LeaveDialog, _Player, "ORI_StartLeaveDialog");

IF
DB_Sees(_Companion, _Player)
AND
DB_OriginRetryWarning(_Companion, _LeaveDialog, _Player, _Warning)
AND
NOT DB_CantTalk(_Player)
AND
NOT DB_CantTalk(_Companion)
THEN
ObjectTimerLaunch(_Companion, _Warning, 3000);

IF
DialogStarted(_LeaveDialog, _ID)
AND
DB_OriginRetryWarning(_Companion, _LeaveDialog, _Player, _Warning)
THEN
NOT DB_OriginRetryWarning(_Companion, _LeaveDialog, _Player, _Warning);

IF
DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
THEN
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog);
DB_OriginLeavingDependency(_Companion,_OriginLeavingDialog);

IF
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_OriginLeavingDependency(_Companion,_OriginLeavingDialog)
AND
NOT DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
THEN
NOT DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog);
NOT DB_OriginLeavingDependency(_Companion,_OriginLeavingDialog);

PROC
PROC_ClearOriginLeavingDialogs((CHARACTER)_Companion)
AND
DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
THEN
NOT DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog);

PROC
PROC_ClearOriginLeavingDialogs((CHARACTER)_Companion)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
THEN
NOT DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog);

PROC
PROC_Origins_CompanionLeaveTemporarily((CHARACTER)_Companion, (STRING)_Reason)
THEN
DB_Origin_TemporaryLeaveReason(_Companion, _Reason);
PROC_Origins_RemoveFromTeam((CHARACTER)_Companion, (STRING)_Reason);

PROC
PROC_Origins_CompanionLeaveTemporarily((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_QuestDef_State_CompanionLeft((TAG)_Tag,(STRING)_QuestName,(STRING)_Reason)
AND
IsTagged(_Companion,_Tag,1)
AND
DB_Avatars(_Char)
THEN
QuestUpdate(_Char, _QuestName, _Reason);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
THEN
PROC_Origins_RemoveFromTeam((CHARACTER)_Companion, (STRING)_Reason);

PROC
PROC_Origins_RemoveFromTeam((CHARACTER)_Companion, (STRING)_Reason)
THEN
DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Companion);
PROC_GLO_PartyMembers_MakeNPC(_Companion);
UnregisterAsCompanion(_Companion);
NOT DB_NoLowAttitudeDialog(_Companion);
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Companion);
SetTag(_Companion, BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6);
NOT DB_PartOfTheTeam(_Companion);
PROC_ExclamationMark_Hide(_Companion);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_Origin_TemporaryLeaveReason(_Companion, _OtherReason)
THEN
NOT DB_Origin_TemporaryLeaveReason(_Companion, _OtherReason);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
THEN
PROC_GLO_Origins_RemoveRecruitmentDialogs(_Companion);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_CompanionCanPartner(_Companion, _DatingFlag, _PartnerFlag, _, _, _, _)
THEN
PROC_PurgeLevelPartyFlag(_DatingFlag);
PROC_PurgeLevelPartyFlag(_PartnerFlag);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_OriginInPartyDialog(_Companion,_Dialog)
THEN
NOT DB_OriginInPartyDialog(_Companion,_Dialog);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_QuestDef_State_CompanionLeft((TAG)_Tag,(STRING)_QuestName,(STRING)_Reason)
AND
IsTagged(_Companion,_Tag,1)
AND
DB_Avatars(_Char)
THEN
QuestUpdate(_Char, _QuestName, _Reason);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, _Reason)
THEN
SetTag(_Companion,(TAG)DOWNED_DISABLED_7095912e-fcb9-41dd-aec3-3cf7803e4b22);

PROC
PROC_StateSet_PermaDefeated(_Companion)
AND
DB_Origins((CHARACTER)_Companion)
AND
NOT DB_Avatars(_Companion)
AND
DB_QuestDef_State_CompanionLeft(_Tag, _QuestName, _)
AND
IsTagged(_Companion, _Tag, 1)
AND
DB_Avatars(_Char)
THEN
QuestUpdate(_Char, _QuestName, "CompanionMurdered"); //Everyone but Lae'zel has these updates.

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_PartOfTheTeam(_Companion)
AND
QRY_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Inst)
AND
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Player)
AND
GetFlag((FLAG)GLO_Companion_Leave_363c71f4-8b46-c0c0-4bbb-0e5a85e4652d, _Companion, 1)
THEN
DB_CompanionLeaving(_Companion,_Player);
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, "CompanionLowRelation");
PROC_ClearOriginLeavingDialogs(_Companion);
PROC_DisappearOutOfSight(_Companion,"Run",1,"GLO_CompanionLeaves_LowRelation");

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_PartOfTheTeam(_Companion)
AND
GetFlag((FLAG)GLO_Companion_LeaveNoDisappear_5f7db208-df3c-8cf8-a397-1d188ed79523, _Companion, 1) // flagType: Object
AND
QRY_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Inst)
AND
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Player)
THEN
DB_CompanionLeaving(_Companion,_Player);
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion,"CompanionLowRelation");
PROC_ClearOriginLeavingDialogs(_Companion);
// TODO: apply default class preset to origin so they're not naked
// (once class presets are back in the game)

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_PartOfTheTeam(_Companion)
AND
GetFlag((FLAG)GLO_Companion_LeaveDisappearInstantly_8d15c1c9-fa85-4c67-8f85-c5c1bb672b28, _Companion, 1) // flagType: Object
AND
QRY_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Inst)
AND
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _Player)
THEN
DB_CompanionLeaving(_Companion,_Player);
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, "CompanionLowRelation");
PROC_ClearOriginLeavingDialogs(_Companion);
SetOnStage(_Companion, 0);
// TODO: apply default class preset to origin so they're not naked
// (once class presets are back in the game)

// select the best player to get the leaving companion's items
QRY
QRY_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (INTEGER)_Inst)
AND
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _OldData)
THEN
NOT DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _OldData);

// normal flow - avatar gets the items
QRY
QRY_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (INTEGER)_Inst)
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
DB_Avatars((CHARACTER)_Player)
AND
NOT DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _)
THEN
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (CHARACTER)_Player);

// edge-case - OOM and companion leaves, but other companions are in the dialog
QRY
QRY_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (INTEGER)_Inst)
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
_Player != _Companion
AND
NOT DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _)
THEN
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (CHARACTER)_Player);

// edge-case - OOM and companion leaves, no other player characters in the dialog
QRY
QRY_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (INTEGER)_Inst)
AND
NOT DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion(_Companion, _)
AND
QRY_GetBestAvatarForCompanion((CHARACTER)_Companion)
AND
DB_QRYRTN_GetBestAvatarForCompanion(_Companion, _Avatar)
THEN
DB_QRYRTN_Origins_PlayerForItemsOfLeavingCompanion((CHARACTER)_Companion, (CHARACTER)_Avatar);

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_PartOfTheTeam(_Companion)
AND
GetFlag((FLAG)GLO_Companion_Murder_2b416989-93e2-4853-b48a-7aeed3e69f7c, _Companion, 1) // flagType: Object
THEN
PROC_Origins_CompanionLeavePermanently(_Companion, "CompanionMurdered");
PROC_ClearOriginLeavingDialogs(_Companion);
PROC_DieImmediate(_Companion, DEATHTYPE.DoT, 1);

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginMayLeaveDialog(_Companion,_OriginLeavingDialog)
AND
DB_PartOfTheTeam(_Companion)
AND
GetFlag((FLAG)GLO_Companion_Combat_d8f0c309-193b-eaed-5aaa-812cd137caf2, _Companion, 1) // flagType: Object
AND
DB_GLO_PartyMembers_OriginalAlignment(_Companion,_NpcFaction)
THEN
PROC_Origins_CompanionLeavePermanently(_Companion, "CompanionHostile");
PROC_ClearOriginLeavingDialogs(_Companion);
PROC_SetRelationToPlayers(_NpcFaction,0);
DB_Origin_BecameHostile(_Companion);

PROC
PROC_Origins_CompanionLeavePermanently(_Companion, "CompanionMurdered")
THEN
DB_Origin_DontMakeCorpseOwned(_Companion);

PROC
PROC_Origins_CompanionLeavePermanently(_Companion, "CompanionHostile")
THEN
DB_Origin_DontMakeCorpseOwned(_Companion);

PROC
PROC_Origins_CompanionLeavePermanently(_Companion, "Killed")
THEN
DB_Origin_DontMakeCorpseOwned(_Companion);

QRY
QRY_CorpseLooting_BlockMakeOwned(_Companion)
AND
DB_Origin_DontMakeCorpseOwned(_Companion)
THEN
DB_NOOP(1);

IF
LongRestStarted()
AND
DB_Origin_BecameHostile(_Companion)
AND
NOT DB_CantMove(_Companion)
THEN
PROC_DisappearOutOfSight(_Companion, "Run", 0, "ORI_LeftAfterHostility");
NOT DB_Origin_BecameHostile(_Companion);

QRY
QRY_Origins_BlockTransferInventory((CHARACTER)_, (STRING)_Reason)
AND
DB_Origins_BlockTransferReasons(_Reason)
THEN
DB_NOOP(1);

PROC
PROC_Origins_CompanionLeaveTemporarily((CHARACTER)_Companion, (STRING)_Reason)
AND
NOT QRY_Origins_BlockTransferInventory(_Companion,_Reason)
THEN
PROC_Origins_TransferCompanionInventory(_Companion, _Reason);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_Reason)
AND
NOT QRY_Origins_BlockTransferInventory(_Companion,_Reason)
THEN
PROC_Origins_TransferCompanionInventory(_Companion, _Reason);

PROC
PROC_Origins_TransferCompanionInventory((CHARACTER)_Companion, (STRING)_Reason)
AND
NOT DB_CompanionLeaving(_Companion,_)
AND
QRY_GetBestAvatarForCompanion(_Companion)
AND
DB_QRYRTN_GetBestAvatarForCompanion(_Companion,_Player)
THEN
PROC_GLO_PartyMembers_TransferInventoryToPlayer(_Companion,_Player,_Reason);

PROC
PROC_Origins_TransferCompanionInventory((CHARACTER)_Companion, (STRING)_Reason)
AND
DB_CompanionLeaving(_Companion,(CHARACTER)_Player)
THEN
PROC_GLO_PartyMembers_TransferInventoryToPlayer(_Companion,_Player,_Reason);

PROC
PROC_Origins_CompanionLeaveTemporarily((CHARACTER)_Companion, (STRING)_)
AND
DB_CompanionLeaving(_Companion,_Player)
THEN
NOT DB_CompanionLeaving(_Companion,_Player);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTER)_Companion, (STRING)_)
AND
DB_CompanionLeaving(_Companion,_Player)
THEN
NOT DB_CompanionLeaving(_Companion,_Player);

IF
AddedTo(_Item,_BackPack, _)
AND
DB_CompanionLeavingBackPack((CHARACTER)_Companion,(CHARACTER)_Player,_BackPack)
AND
// Only items have an (original) owner
QRY_IsExistingItem(_Item,1)
AND
GetOriginalOwner((ITEM)_Item,_Companion)
THEN
SetOriginalOwner(_Item,_Player);

IF
ApprovalRatingChanged(_Companion,_Avatar,_)
AND
DB_DialogSpeakers(_Inst,_Companion,_)
AND
DB_DialogSpeakers(_Inst,_Avatar,_SpeakerIndex)
THEN
PROC_ApprovalRating_SetThresholdEvents(_Companion,_Avatar,_SpeakerIndex);

IF
DB_DialogSpeakers(_Inst,_Companion,_)
AND
DB_DialogSpeakers(_Inst,_Avatar,_SpeakerIndex)
AND
DB_ApprovalRating((CHARACTER)_Companion,(CHARACTER)_Avatar,_)
THEN
PROC_ApprovalRating_SetThresholdEvents(_Companion,_Avatar,_SpeakerIndex);

PROC
PROC_ApprovalRating_SetThresholdEvents((CHARACTER)_Companion,(CHARACTER)_Avatar,(INTEGER)_SpeakerIndex)
AND
DB_ApprovalRating(_Companion,_Avatar,_Approval)
AND
DB_OriginRelationThresholdEventsPerSpeaker(_SpeakerIndex,(FLAG)_Event,(INTEGER)_Threshold)
AND
_Approval >= _Threshold
THEN
SetFlag((FLAG)_Event, _Companion); // flagType: Object

PROC
PROC_ApprovalRating_SetThresholdEvents((CHARACTER)_Companion,(CHARACTER)_Avatar,(INTEGER)_SpeakerIndex)
AND
DB_ApprovalRating(_Companion,_Avatar,_Approval)
AND
DB_OriginRelationThresholdEventsPerSpeaker(_SpeakerIndex,(FLAG)_Event,(INTEGER)_Threshold)
AND
_Approval < _Threshold
THEN
ClearFlag((FLAG)_Event, _Companion); // flagType: Object

QRY
QRY_OriginAttemptLeaveWarning((CHARACTER)_Companion, (CHARACTER)_Player, (DIALOGRESOURCE)_Dialog)
AND
QRY_SpeakerIsInDialogRange(_Companion, _Player)
AND
NOT DB_Players(_Companion)
AND
QRY_StartDialog_Fixed(_Dialog,_Companion,_Player)
THEN
DB_NOOP(1);

QRY
QRY_OriginAttemptLeaveWarning((CHARACTER)_Companion, (CHARACTER)_Player, (DIALOGRESOURCE)_Dialog)
AND
QRY_SpeakerIsInDialogRange(_Companion, _Player)
AND
QRY_SameUser(_Companion, _Player)
AND
QRY_StartDialog_Fixed(_Dialog,_Companion,_Player)
THEN
DB_NOOP(1);

PROC
PROC_Origins_ForceLowApprovalLeavingDialog((CHARACTER)_Companion)
AND
DB_Origins(_Companion)
AND
NOT DB_Avatars(_Companion)
THEN
PROC_Origins_ForceLowApprovalLeavingDialog_Internal((CHARACTER)_Companion);

PROC
PROC_Origins_ForceLowApprovalLeavingDialog_Internal((CHARACTER)_Companion)
AND
DB_OriginWarning1Dialog(_Companion, _Warning1)
THEN
NOT DB_OriginWarning1Dialog(_Companion, _Warning1);

PROC
PROC_Origins_ForceLowApprovalLeavingDialog_Internal((CHARACTER)_Companion)
AND
DB_OriginWarning2Dialog(_Companion, _Warning2)
THEN
NOT DB_OriginWarning2Dialog(_Companion, _Warning2);

PROC
PROC_Origins_ForceLowApprovalLeavingDialog_Internal((CHARACTER)_Companion)
AND
DB_ApprovalRating(_Companion, _Avatar, _Rating)
AND
IntegerSum(_Rating, 100, _RatingToSubstract)
AND
IntegerProduct(_RatingToSubstract, -1, _NegativeRatingToSubstract)
AND
ChangeApprovalRating(_Companion, _Avatar, 0, _NegativeRatingToSubstract, _)
THEN
DB_NOOP(1);
//END_REGION

//REGION Relationship Changes : Origin Friendly Fire  
QRY
QRY_IsOriginPartOfTheTeam((CHARACTER)_NPC)
AND
DB_PartOfTheTeam(_NPC)
AND
DB_OriginNPCAlignment(_NPC,_)
THEN
DB_NOOP(1);

QRY
QRY_IsOriginPartOfTheTeam((CHARACTER)_NPC)
AND
// Sent to camp during initial recruitment dialog
// DB_PartOfTheTeam only gets set once they arrive in camp
DB_ORI_DisappearingToCamp(_NPC)
AND
DB_OriginNPCAlignment(_NPC,_)
THEN
DB_NOOP(1);


IF
AttackedBy((CHARACTER)_Origin,(CHARACTER)_Player,(CHARACTER)_Summon,_,_DamageAmount,_DamageSource,_StoryActionID)
AND
NOT DB_IgnoreAssault(_Origin)
AND
NOT DB_Avatars(_Origin)
AND
NOT DB_GLO_Mad((GUIDSTRING)_Origin)
AND
NOT DB_Dominated((CHARACTER)_Origin)
AND
QRY_CRIME_IsDamageAssault(_DamageSource,_DamageAmount)
AND
QRY_IsOriginPartOfTheTeam(_Origin)
AND
QRY_GetCharacterOwnerIfItemSummon(_Player,_Summon)
AND
DB_QRYRTN_GetCharacterOwnerIfItemSummon(_Attacker)
AND
DB_Players(_Attacker)
AND
NOT DB_GLO_Mad(_Attacker)
AND
NOT DB_Dominated(_Attacker)
AND
NOT QRY_IgnoreDamageSource(_DamageSource)
AND
NOT QRY_CRIME_StoryActionHandled(_Attacker,"Assault",_StoryActionID,NULL_00000000-0000-0000-0000-000000000000,_Origin,-1)
AND
NOT DB_IgnoreAssaultFor(_Attacker,_Origin)
AND
IsEnemy(_Attacker,_Origin,0) //for statuses that make them hostile
AND
HasActiveStatusWithGroup(_Origin,"SG_Confused",0)
AND
HasActiveStatusWithGroup(_Attacker,"SG_Confused",0)
THEN
PROC_ORI_FriendlyFire(_Attacker,_Origin);

//If a tracker already exists, reset the timer.
PROC
PROC_ORI_FriendlyFire((CHARACTER)_Attacker,(CHARACTER)_Origin)
AND
DB_ORI_FriendlyFire_Tracker(_Origin,_)
THEN
RealtimeObjectTimerCancel(_Origin,"ORI_FriendlyFireTimer");
RealtimeObjectTimerLaunch(_Origin,"ORI_FriendlyFireTimer",60000);

//Else start one
PROC
PROC_ORI_FriendlyFire((CHARACTER)_Attacker,(CHARACTER)_Origin)
AND
NOT DB_ORI_FriendlyFire_Tracker(_Origin,_)
THEN
RealtimeObjectTimerLaunch(_Origin,"ORI_FriendlyFireTimer",60000);
DB_ORI_FriendlyFire_Tracker(_Origin,0);

//Increase the friendly fire tracker
PROC
PROC_ORI_FriendlyFire((CHARACTER)_Attacker,(CHARACTER)_Origin)
AND
DB_ORI_FriendlyFire_Tracker(_Origin,_Count)
AND
IntegerSum(_Count,1,_NewCount)
THEN
NOT DB_ORI_FriendlyFire_Tracker(_Origin,_Count);
DB_ORI_FriendlyFire_Tracker(_Origin,_NewCount);

//If limit reached, React badly.
PROC
PROC_ORI_FriendlyFire((CHARACTER)_Attacker,(CHARACTER)_Origin)
AND
DB_ORI_FriendlyFire_Tracker(_Origin,_Count)
AND
_Count >= 3
THEN
NOT DB_ORI_FriendlyFire_Tracker(_Origin,_Count);
RealtimeObjectTimerCancel(_Origin,"ORI_FriendlyFireTimer");
PROC_ORI_FriendlyFire_React(_Attacker,_Origin);

//If timer reached before hit limit reached, remove tracker.
IF
ObjectTimerFinished((CHARACTER)_Origin,"ORI_FriendlyFireTimer")
AND
DB_ORI_FriendlyFire_Tracker(_Origin,_Count)
THEN
NOT DB_ORI_FriendlyFire_Tracker(_Origin,_Count);

//If relationship exists, reduce it.
PROC
PROC_ORI_FriendlyFire_React((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
DB_ApprovalRating(_Companion,_Avatar,_Approval)
AND
ChangeApprovalRating((CHARACTER)_Companion, (CHARACTER)_Avatar, 0, -10,_)
THEN
DB_NOOP(1);

//If no direct relationship exists, find a relationship with a character of the same user and reduce it.
PROC
PROC_ORI_FriendlyFire_React((CHARACTER)_Player,(CHARACTER)_Companion)
AND
NOT DB_ApprovalRating(_Companion,_Player,_)
AND
QRY_OnlyOnce_Reset("ORI_FriendlyFire_React_OnlyOncePerRule")
AND
DB_ApprovalRating(_Companion,_Avatar,_Approval)
AND
QRY_SameUser(_Player,_Avatar)
AND
ChangeApprovalRating((CHARACTER)_Companion, (CHARACTER)_Avatar, 0, -10,_)
AND
QRY_OnlyOnce("ORI_FriendlyFire_React_OnlyOncePerRule")
THEN
DB_NOOP(1);



//END_REGION

//REGION Companions cant recruit companions
//Companion in party with initiates conversation with unhired companion.
QRY
QRY_StartOriginOverrideDialog((DIALOGRESOURCE)_RecruitmentDialog, (GUIDSTRING)_UnhiredCompanion,(GUIDSTRING)_NonAvatar)
AND
DB_OriginRecruitmentDialog((CHARACTER)_UnhiredCompanion,_RecruitmentDialog)
AND
NOT DB_Avatars((CHARACTER)_NonAvatar)
AND
QRY_GetBestAvatarForCompanion(_NonAvatar,1,1)
AND
DB_QRYRTN_GetBestAvatarForCompanion((CHARACTER)_NonAvatar,(CHARACTER)_Avatar)
AND
QRY_StartDialog_Fixed(_RecruitmentDialog,_UnhiredCompanion,_Avatar)
THEN
MakePlayerActive(_Avatar);

QRY
QRY_StartOriginOverrideDialog((DIALOGRESOURCE)_InPartyDialog, (GUIDSTRING)_UnhiredCompanion,(GUIDSTRING)_NonAvatar)
AND
DB_OriginInPartyDialog((CHARACTER)_UnhiredCompanion,_InPartyDialog)
AND
NOT DB_Avatars((CHARACTER)_NonAvatar)
AND
QRY_GetBestAvatarForCompanion(_NonAvatar,1,1)
AND
DB_QRYRTN_GetBestAvatarForCompanion((CHARACTER)_NonAvatar,(CHARACTER)_Avatar)
AND
QRY_StartDialog_Fixed(_InPartyDialog,_UnhiredCompanion,_Avatar)
THEN
MakePlayerActive(_Avatar);
//END_REGION


//REGION Companion-to-companion dialog request fallbacks
//Can't talk to another user's companions
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_PartyMembers((CHARACTER)_Companion)
AND
GetReservedUserID(_Player,_PID)
AND
GetReservedUserID(_Companion,_OPID)
AND
_PID != _OPID
THEN
DB_SelectedDialog(DIALOGRESOURCEGUID_GLO_AD_CompanionCantTalk_5b47f078-c7c2-3f21-d96f-93c0652aa2f2,_Companion);
//Check easily in our other overloads whether we found something (use _Player instead
// of "1", because we can call ourselves recursively)
DB_SelectCompanionFallback_Found(_Player);

//Can't talk to a companion in a suppression zone - specific companion dialog defined
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_PartyMembers((CHARACTER)_Companion)
AND
QRY_PartyDialogSuppressed(_Companion)
AND
DB_PartyDialogSuppressed(_Companion,_SuppressionZone)
AND
DB_PartyDialogSuppression_CustomDialogForCompanion(_SuppressionZone,_CustomSuppressionDialog, _Companion)
THEN
DB_SelectedDialog(_CustomSuppressionDialog,_Companion);
DB_SelectCompanionFallback_Found(_Player);

//Can't talk to a companion in a suppression zone - party wide dialog change
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_PartyMembers((CHARACTER)_Companion)
AND
QRY_PartyDialogSuppressed(_Companion)
AND
DB_PartyDialogSuppressed(_Companion,_SuppressionZone)
AND
DB_PartyDialogSuppression_CustomDialogForParty(_SuppressionZone,_CustomSuppressionDialog)
THEN
DB_SelectedDialog(_CustomSuppressionDialog,_Companion);
DB_SelectCompanionFallback_Found(_Player);

QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_PartyMembers((CHARACTER)_Companion)
AND
QRY_PartyDialogSuppressed(_Companion)
THEN
DB_SelectedDialog(DIALOGRESOURCEGUID_GLO_AD_CompanionCantTalk_5b47f078-c7c2-3f21-d96f-93c0652aa2f2,_Companion);
DB_SelectCompanionFallback_Found(_Player);

//If you try to talk to a recruited companion try to switch to the bonded avatar (if same user)
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Companion)
AND
NOT DB_Avatars(_Player)
AND
QRY_SameUser(_Player,_Companion)
AND
QRY_GetBestAvatarForCompanion(_Companion,1,1)
AND
DB_QRYRTN_GetBestAvatarForCompanion(_Companion,_Avatar)
AND
QRY_SelectDialog(_Companion,_Avatar)
THEN
MakePlayerActive(_Avatar);
DB_SelectCompanionFallback_Found(_Player);

//If you try to talk to an avatar as a companion, try to switch to a different avatar (if same user)
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Avatar, (GUIDSTRING)_Companion)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Companion)
AND
DB_Players((CHARACTER)_Companion)
AND
DB_Avatars((CHARACTER)_Avatar)
AND
NOT DB_Avatars(_Companion)
AND
QRY_SameUser(_Avatar,_Companion)
AND
DB_Avatars((CHARACTER)_Avatar2)
AND
_Avatar != _Avatar2
AND
QRY_SameUser(_Companion,_Avatar2)
AND
QRY_SpeakerIsAvailableAndInDialogRange(_Avatar2,_Avatar)
AND
QRY_SelectDialog(_Avatar,_Avatar2)
THEN
MakePlayerActive(_Avatar2);
DB_SelectCompanionFallback_Found(_Companion);

//Else don't
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Avatar, (GUIDSTRING)_Companion)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Companion)
AND
DB_Players((CHARACTER)_Companion)
AND
DB_Avatars((CHARACTER)_Avatar)
AND
NOT DB_Avatars(_Companion)
AND
QRY_SameUser(_Avatar,_Companion)
THEN
DB_SelectCompanionFallback_Found(_Companion);
DB_SelectedDialog(DIALOGRESOURCEGUID_GLO_AD_NonBondedCompanionDialog_62ba7c46-8d22-c591-f04c-2e99441cd02a,_Companion);


//Companions can't talk to each other
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Player)
AND
DB_Players((CHARACTER)_Companion)
AND
NOT DB_Avatars(_Player)
AND
NOT DB_Avatars(_Companion)
THEN
DB_SelectedDialog(DIALOGRESOURCEGUID_GLO_AD_CompanionCantTalk_5b47f078-c7c2-3f21-d96f-93c0652aa2f2,_Companion);
DB_SelectCompanionFallback_Found(_Player);

//You cannot speak to another avatar's companion
QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
NOT DB_SelectCompanionFallback_Found((CHARACTER)_Player)
AND
QRY_PreventMPDialogue(_Player,(CHARACTER)_Companion)
THEN
DB_SelectedDialog(DIALOGRESOURCEGUID_GLO_AD_NonBondedCompanionDialog_62ba7c46-8d22-c591-f04c-2e99441cd02a,_Companion);
DB_SelectCompanionFallback_Found(_Player);

QRY
QRY_SelectCompanionFallback((GUIDSTRING)_Companion, (GUIDSTRING)_Player)
AND
DB_SelectCompanionFallback_Found((CHARACTER)_Player)
THEN
NOT DB_SelectCompanionFallback_Found(_Player);
//END_REGION

//REGION To camp helper
IF
FlagSet(GLO_ORI_Event_InvitedToCamp_Run_07c4d37e-fc82-4055-b768-167650be9956, (CHARACTER)_Origin, _ID)
THEN
DB_ORI_ToCampAfterDialog(_Origin, _ID, "Run");
ClearFlag(GLO_ORI_Event_InvitedToCamp_Run_07c4d37e-fc82-4055-b768-167650be9956, _Origin, _ID);

IF
FlagSet(GLO_ORI_Event_InvitedToCamp_Walk_6dfae0e0-e6c4-4d4f-8979-df320356ea03, (CHARACTER)_Origin, _ID)
THEN
DB_ORI_ToCampAfterDialog(_Origin, _ID, "Walk");
ClearFlag(GLO_ORI_Event_InvitedToCamp_Walk_6dfae0e0-e6c4-4d4f-8979-df320356ea03, _Origin, _ID);

IF
DialogEnded(_, _ID)
AND
DB_ORI_ToCampAfterDialog(_Origin, _ID, _Run)
AND
DB_DialogPlayers(_ID, _Player, 1)
THEN
NOT DB_ORI_ToCampAfterDialog(_Origin, _ID, _Run);
PROC_ORI_SendToCampAfterDialog(_Origin, _ID, _Run, (CHARACTER)_Player);

PROC
PROC_ORI_SendToCampAfterDialog((CHARACTER)_Origin, (INTEGER) _ID, (STRING)_Run, (CHARACTER)_Player)
THEN
DB_ORI_DisappearingToCamp(_Origin);
PROC_CheckFirstTimeRecruited(_Origin);
RegisterAsCompanion(_Origin, _Player);
PROC_DisappearOutOfSight(_Origin, _Run, 0, "ORI_ToCamp");

IF
EntityEvent(_Origin, "ORI_ToCamp")
THEN
NOT DB_ORI_DisappearingToCamp((CHARACTER)_Origin);
PROC_ORI_SetupCamp(_Origin);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin)
THEN
PROC_ORI_SetupCamp((CHARACTER)_Origin, 1);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin, _)
THEN
DB_PartOfTheTeam(_Origin); //This character has been recruited to the camp or is part of the party. This will make them return to camp if dismissed and ignore World Recruitment Position changes.
SetOnStage(_Origin,1);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin, _)
AND
DB_Origin_TemporaryLeaveReason(_Origin, _Reason)
THEN
NOT DB_Origin_TemporaryLeaveReason(_Origin, _Reason);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin, _)
AND
IsTagged(_Origin,(TAG)DOWNED_DISABLED_7095912e-fcb9-41dd-aec3-3cf7803e4b22,1)
THEN
ClearTag(_Origin,DOWNED_DISABLED_7095912e-fcb9-41dd-aec3-3cf7803e4b22);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin, 1)
AND
QRY_Camp_GetCamperPos(_Origin)
AND
DB_QRYRTN_Camp_GetCamperPos(_Origin,(TRIGGER)_CampPos)
THEN
TeleportTo(_Origin,_CampPos);

PROC
PROC_ORI_SetupCamp((CHARACTER)_Origin, 1)
THEN
PROC_GLO_Origins_SetRecruitmentDialog_Internal(_Origin, 0);


//END_REGION

//REGION Origins ignore their own murders
// Origins can be resurrected, so they could react to the crime scene of their own murder afterwards.
// We don't want this, as their recruitment dialogs have custom branches to deal with this situation.
PROC
PROC_CharacterRegisterCrime_Success((CHARACTER)_Char,(STRING)_CrimeType,(INTEGER)_StoryActionID,(GUIDSTRING)_Evidence,(CHARACTER)_Victim,(INTEGER)_CrimeID)
AND
DB_Origins(_Victim)
AND
QRY_CRIME_IsCrimeFamilyMember(_CrimeType, "Murder")
THEN
CrimeIgnoreCrime(_CrimeID,_Victim);
//END_REGION

//REGION Self-healing behaviour
IF
DB_PartOfTheTeam(_Char)
THEN
DB_Origins_SelfHealing_Disabled(_Char);
PROC_SelfHealing_Disable(_Char);

IF
DB_Origins_SelfHealing_Disabled(_Char)
AND
NOT DB_PartOfTheTeam(_Char)
THEN
NOT DB_Origins_SelfHealing_Disabled(_Char);
PROC_SelfHealing_Enable(_Char);
//END_REGION

//REGION Dating (partially exclusive - can partner with up to two characters)
IF
FlagSet(_DatingFlag,_Avatar,_ID)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _DatingFlag, _, _, _, _, _)
AND
NOT DB_Avatars(_Companion)
AND
DB_Avatars((CHARACTER)_Avatar)
AND
NOT DB_ORI_Dating(_, _Companion)
THEN
DB_ORI_Dating(_Avatar, _Companion);
SetFlag((FLAG)ORI_State_Dating_a3346d5b-c54b-4c73-bf18-0a2bf90c35da, _Avatar, _ID);
SetFlag((FLAG)ORI_State_Dating_a3346d5b-c54b-4c73-bf18-0a2bf90c35da, _Companion, _ID);

IF
FlagCleared(_DatingFlag, _Avatar, _ID)
AND
DB_CompanionCanPartner(_Companion, _DatingFlag, _, _, _, _, _)
AND
DB_ORI_Dating((CHARACTER)_Avatar, _Companion)
THEN
NOT DB_ORI_Dating(_Avatar, _Companion);
DB_ORI_WasDating((CHARACTER)_Avatar, (CHARACTER)_Companion);
ClearFlag((FLAG)ORI_State_Dating_a3346d5b-c54b-4c73-bf18-0a2bf90c35da, _Companion, _ID);
PROC_ORI_Partnered_Clear_DatingFlag(_Avatar, _ID);

IF
DB_ORI_WasDating(_Avatar, _Companion)
AND
DB_ORI_WasDatingFlag(_Companion, _Flag)
THEN
SetFlag(_Flag, _Avatar, 0);

PROC
PROC_ORI_Partnered_Clear_DatingFlag((CHARACTER)_Avatar, (INTEGER)_DialogID)
AND
NOT DB_ORI_Dating(_Avatar, _)
THEN
ClearFlag((FLAG)ORI_State_Dating_a3346d5b-c54b-4c73-bf18-0a2bf90c35da, _Avatar, _DialogID);

QRY
QRY_ORI_GetPartnerOrDatingAvatar((CHARACTER)_Companion)
AND
DB_QRYRTN_ORI_PartnerOrDatingAvatar(_PrevCompanion, _Avatar)
THEN
NOT DB_QRYRTN_ORI_PartnerOrDatingAvatar(_PrevCompanion, _Avatar);

QRY
QRY_ORI_GetPartnerOrDatingAvatar((CHARACTER)_Companion)
AND
DB_ORI_Dating(_Avatar, _Companion)
THEN
DB_QRYRTN_ORI_PartnerOrDatingAvatar(_Companion, _Avatar);

QRY
QRY_ORI_GetPartnerOrDatingAvatar((CHARACTER)_Companion)
AND
DB_ORI_Partnered(_Avatar, _Companion)
THEN
DB_QRYRTN_ORI_PartnerOrDatingAvatar(_Companion, _Avatar);


//Limited pre-partnering
IF
DB_ORI_Dating((CHARACTER)_Avatar, _Companion1)
AND
DB_ORI_Dating((CHARACTER)_Avatar, _Companion2)
AND
_Companion1 != _Companion2
AND
NOT DB_ORI_FreeDating(_Companion1)
AND
NOT DB_ORI_FreeDating(_Companion2)
THEN
SetFlag(ORI_State_DoubleDating_41320aeb-8e1a-433d-a82e-3d78aff578da, _Avatar, 0);

IF
FlagCleared(_DatingFlag, _Avatar, _ID)
AND
DB_CompanionCanPartner(_Companion, _DatingFlag, _, _, _, _, _)
AND
NOT DB_ORI_FreeDating(_Companion)
THEN
ClearFlag(ORI_State_DoubleDating_41320aeb-8e1a-433d-a82e-3d78aff578da, _Avatar, 0);


//END_REGION

//REGION Partnering ( = in an exclusive relationship)
IF
FlagSet(_DateFlag,_Avatar,_ID)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _, _DateFlag, _, _, _, _)
AND
NOT DB_Avatars(_Companion)
AND
DB_Avatars((CHARACTER)_Avatar)
AND
NOT DB_ORI_Partnered(_Avatar,_)
AND
NOT DB_ORI_Partnered(_,_Companion)
THEN
DB_ORI_Partnered(_Avatar,_Companion);
SetFlag((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74,_Avatar);
SetFlag((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74,_Companion);

IF
FlagCleared(_PartnerFlag,_Avatar,_ID)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _DateFlag, _PartnerFlag, _ExFlag, _, _, _)
AND
DB_ORI_Partnered((CHARACTER)_Avatar,_Companion)
THEN
NOT DB_ORI_Partnered(_Avatar,_Companion);
PROC_ORI_Partnered_Clear_PartneredFlag(_Avatar);
SetFlag(_ExFlag, _Avatar, _ID);
ClearFlag((FLAG)_DateFlag, _Avatar, 0);
ClearFlag((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74,_Companion);

IF
FlagCleared(_PartnerFlag, _Avatar, _ID)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _, _PartnerFlag, _, _HandledBreakupFlag, _, _)
AND
DB_DialogSpeakers(_ID, _Companion, 1)
THEN
SetFlag(_HandledBreakupFlag, _Avatar, _ID);

IF
DB_ORI_Partnered(_Avatar, _Companion)
AND
NOT DB_PartOfTheTeam(_Companion)
AND
NOT DB_Origin_TemporaryLeaveReason(_Companion, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _, _DateFlag, _, _, _, _)
THEN
ClearFlag(_DateFlag, _Avatar);

//Avatar could have been in multiple relationships, only delete his partnered flag is his last partnering stops.
PROC
PROC_ORI_Partnered_Clear_PartneredFlag((CHARACTER)_Avatar)
AND
NOT DB_ORI_Partnered(_Avatar,_)
THEN
ClearFlag((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74,_Avatar);

//Widow flag for avatars
//Avatar has no living partners, and is widowed
IF
FlagSet(_PartneredFlag, _Avatar, _)
AND
DB_CompanionCanPartner(_Companion, _, _PartneredFlag, _, _, _, _)
AND
QRY_ORI_HasOnlyDeadPartners((CHARACTER)_Avatar)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_PermaDefeated(_Companion)
AND
DB_ORI_Partnered(_Avatar,(CHARACTER)_Companion)
AND
QRY_ORI_HasOnlyDeadPartners((CHARACTER)_Avatar)
THEN
DB_NOOP(1);

// Edge case: Lose partnered status with dead companion will cause avatar to lose widow status
IF
FlagSet(_WasPartneredFlag, _Avatar, _)
AND
DB_CompanionCanPartner(_Companion, _, _, _WasPartneredFlag, _, _, _)
AND
QRY_ORI_HasOnlyDeadPartners((CHARACTER)_Avatar) // QRY will reset the flag
THEN
DB_NOOP(1);

QRY
QRY_ORI_HasOnlyDeadPartners((CHARACTER)_Avatar)
AND
NOT QRY_ORI_HasLivingPartner(_Avatar)
AND
NOT QRY_ORI_HasNoPartners(_Avatar)
THEN
SetFlag((FLAG)ORI_State_Widowed_62ea5b8c-5ef6-4c68-99a6-5b503d4d0eec, _Avatar);

QRY
QRY_ORI_HasNoPartners((CHARACTER)_Avatar)
AND
NOT DB_ORI_Partnered(_Avatar, _)
THEN
ClearFlag((FLAG)ORI_State_Widowed_62ea5b8c-5ef6-4c68-99a6-5b503d4d0eec, _Avatar);

QRY
QRY_ORI_HasLivingPartner((CHARACTER)_Avatar)
AND
DB_ORI_Partnered(_Avatar, _Companion)
AND
NOT DB_PermaDefeated(_Companion)
AND
NOT QRY_ORI_IsOtherPermaDefeated(_Companion) // any other reason to exclude the companion
THEN
ClearFlag((FLAG)ORI_State_Widowed_62ea5b8c-5ef6-4c68-99a6-5b503d4d0eec, _Avatar);

QRY
QRY_ORI_IsOtherPermaDefeated((CHARACTER)_Companion)
AND
1 == 0
THEN
DB_NOOP(1);

// Partnered character in a dialog


// partnered companion added to a dialog
IF
DB_DialogSpeakers(_Inst, _Avatar, _)
AND
DB_ORI_Partnered((CHARACTER)_Avatar, _Companion)
AND
DB_DialogSpeakers(_Inst, _Companion, _)
AND
NOT DB_ORI_PartneredInDialog(_Avatar, _Companion, _Inst)
THEN
DB_ORI_PartneredInDialog((CHARACTER)_Avatar, (CHARACTER)_Companion, _Inst);
SetFlag(ORI_State_PartneredCompanionIncluded_c401d64f-025e-433d-911d-1e32d0da37fa, _Avatar, _Inst);

// ...secondary-partnered
IF
DB_DialogSpeakers(_Inst, _Avatar, _)
AND
DB_ORI_Partnered_Secondary((CHARACTER)_Avatar, _Companion)
AND
DB_DialogSpeakers(_Inst, _Companion, _)
AND
NOT DB_ORI_Partnered((CHARACTER)_Avatar, _Companion)
AND
NOT DB_ORI_PartneredInDialog(_Avatar, _Companion, _Inst)
THEN
DB_ORI_PartneredInDialog((CHARACTER)_Avatar, (CHARACTER)_Companion, _Inst);
SetFlag(ORI_State_PartneredCompanionIncluded_c401d64f-025e-433d-911d-1e32d0da37fa, _Avatar, _Inst);

// companion in dialog no longer partnered
IF
DB_ORI_PartneredInDialog((CHARACTER)_Avatar, (CHARACTER)_Companion, (INTEGER)_Inst)
AND
NOT DB_ORI_Partnered(_Avatar, _Companion)
AND
NOT DB_ORI_Partnered_Secondary(_Avatar, _Companion)
THEN
NOT DB_ORI_PartneredInDialog(_Avatar, _Companion, _Inst);
PROC_ORI_PartneredInDialog_RecheckFlag(_Avatar, _Inst);

// partnered companion leaves dialog
IF
DB_ORI_PartneredInDialog((CHARACTER)_Avatar, (CHARACTER)_Companion, (INTEGER)_Inst)
AND
DB_ORI_Partnered(_Avatar, _Companion)
AND
NOT DB_DialogSpeakers(_Inst, _Companion, _)
THEN
NOT DB_ORI_PartneredInDialog(_Avatar, _Companion, _Inst);
PROC_ORI_PartneredInDialog_RecheckFlag(_Avatar, _Inst);

// ...secondary
IF
DB_ORI_PartneredInDialog((CHARACTER)_Avatar, (CHARACTER)_Companion, (INTEGER)_Inst)
AND
DB_ORI_Partnered_Secondary((CHARACTER)_Avatar, _Companion)
AND
NOT DB_ORI_Partnered((CHARACTER)_Avatar, _Companion)
AND
NOT DB_DialogSpeakers(_Inst, _Companion, _)
THEN
NOT DB_ORI_PartneredInDialog(_Avatar, _Companion, _Inst);
PROC_ORI_PartneredInDialog_RecheckFlag(_Avatar, _Inst);

// clearing flag if no other partnered companions left in the dialog
PROC
PROC_ORI_PartneredInDialog_RecheckFlag((CHARACTER)_Avatar, (INTEGER)_Inst)
AND
NOT DB_ORI_PartneredInDialog((CHARACTER)_Avatar, _, (INTEGER)_Inst)
THEN
ClearFlag(ORI_State_PartneredCompanionIncluded_c401d64f-025e-433d-911d-1e32d0da37fa, _Avatar, _Inst);



// If the companion is in a relationship for a while, set a flag so pre-partnered companions move on and stop bringing it up.
IF
FlagCleared((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74, _Character, _)
THEN
PROC_ORI_ResetStableRelationshipCounter(_Character);

IF
FlagSet((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74, _Character, _)
THEN
PROC_ORI_ResetStableRelationshipCounter(_Character);

PROC
PROC_ORI_ResetStableRelationshipCounter((GUIDSTRING)_Character)
THEN
ClearFlag(ORI_State_StableRelationship_d904563d-2660-4b0c-8ac8-748bbe3c3095, _Character, 0);

PROC
PROC_ORI_ResetStableRelationshipCounter((CHARACTER)_Character)
AND
DB_ORI_StableRelationshipCounter(_Character, _Num)
THEN
NOT DB_ORI_StableRelationshipCounter(_Character, _Num);

PROC
PROC_ORI_ResetStableRelationshipCounter((CHARACTER)_Character)
THEN
DB_ORI_StableRelationshipCounter(_Character, 0);

PROC
PROC_LongRest()
AND
DB_ORI_StableRelationshipCounter(_Character, _Count)
AND
IntegerSum(_Count, 1, _NewCount)
THEN
NOT DB_ORI_StableRelationshipCounter(_Character, _Count);
DB_ORI_StableRelationshipCounter(_Character, _Count);

IF
DB_ORI_StableRelationshipCounter(_Character, 3)
THEN
NOT DB_ORI_StableRelationshipCounter(_Character, 3);
SetFlag(ORI_State_StableRelationship_d904563d-2660-4b0c-8ac8-748bbe3c3095, _Character, 0);

IF
FlagCleared(_DateFlag, _Avatar, _ID)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _Dateflag, _, _, _, _ChosePartner, _)
AND
DB_OriginInPartyDialog(_Companion, _Dialog)
AND
DB_DialogName(_Dialog, _ID)
AND
DB_ORI_Partnered((CHARACTER)_Avatar, _Companion2)
AND
_Companion != _Companion2
THEN
SetFlag(_ChosePartner, _Avatar, _ID);

//If the player leaves their current relationship, or enters a new one, trying to track whose pre-partnered state was dropped in favour of their partnership
//becomes unreliable - drop it.
IF
FlagSet(_Dateflag, _Avatar, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _, _Dateflag, _, _, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_AnyCompanion, _, _, _, _, _DumpedForRomanticPartnerFlag, _)
AND
_DumpedForRomanticPartnerFlag != NULL_00000000-0000-0000-0000-000000000000
AND
GetFlag(_DumpedForRomanticPartnerFlag, _Avatar, 1)
THEN
ClearFlag(_DumpedForRomanticPartnerFlag, _Avatar, 0);

IF
FlagCleared(_Dateflag, _Avatar, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _,  _Dateflag, _, _, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_AnyCompanion, _, _, _, _, _DumpedForRomanticPartnerFlag, _)
AND
_DumpedForRomanticPartnerFlag != NULL_00000000-0000-0000-0000-000000000000
AND
GetFlag(_DumpedForRomanticPartnerFlag, _Avatar, 1)
THEN
ClearFlag(_DumpedForRomanticPartnerFlag, _Avatar, 0);

//Companion is Dating
IF
FlagCleared(_Dateflag, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _,  _Dateflag, _, _, _, _)
AND
DB_CompanionIsDating((CHARACTER)_Companion, _IsDating)
THEN
PROC_GlobalClearFlagAndCache(_IsDating);

IF
FlagCleared(_PreDateFlag, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _PreDateFlag,  _DateFlag, _, _, _, _)
AND
GetFlag((FLAG)ORI_State_Partnered_6c1a31e8-1d3d-42a5-af4f-72ef7a798f74, _Companion, 0)
AND
DB_CompanionIsDating((CHARACTER)_Companion, _IsDating)
THEN
PROC_GlobalClearFlagAndCache(_IsDating);

IF
FlagSet(_Dateflag, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _,  _Dateflag, _, _, _, _)
AND
DB_CompanionIsDating((CHARACTER)_Companion, _IsDating)
AND
NOT DB_GlobalFlag(_IsDating)
THEN
PROC_GlobalSetFlagAndCache(_IsDating);

IF
FlagSet(_PreDateFlag, _, _)
AND
DB_CompanionCanPartner((CHARACTER)_Companion, _PreDateFlag,  _, _, _, _, _)
AND
DB_CompanionIsDating((CHARACTER)_Companion, _IsDating)
THEN
PROC_GlobalSetFlagAndCache(_IsDating);

//Debug Commands

//oe date lists all possible commands to start dating
IF
TextEvent("date")
THEN
DB_ORI_DateCommands_DumpString("To date someone, select the avatar and use one of the following commands: oe stopdate");

IF
TextEvent("date")
AND
DB_CompanionCanPartner(_, _, _, _, _, _, _DateCommand)
THEN
PROC_ORI_DateCommands_FillDumpString(_DateCommand);

PROC
PROC_ORI_DateCommands_FillDumpString((STRING)_DateCommand)
AND
DB_ORI_DateCommands_DumpString(_DumpString)
AND
Concatenate(_DumpString,", oe ",_DumpString2)
AND
Concatenate(_DumpString2,_DateCommand,_DumpString3)
THEN
NOT DB_ORI_DateCommands_DumpString(_DumpString);
DB_ORI_DateCommands_DumpString(_DumpString3);

IF
TextEvent("date")
AND
DB_ORI_DateCommands_DumpString(_DumpString)
AND
GetHostCharacter(_Player)
THEN
NOT DB_ORI_DateCommands_DumpString(_DumpString);
DebugText(_Player,_DumpString);

IF
TextEvent(_DateCommand)
AND
DB_CompanionCanPartner(_Companion, _, _PartneredFlag, _, _, _, _DateCommand)
AND
GetHostCharacter(_Avatar)
AND
NOT QRY_ORI_Partner_DebugCheck(_Avatar,_Companion)
THEN
SetFlag(_PartneredFlag,_Avatar);

IF
TextEvent("stopdate")
AND
GetHostCharacter(_Avatar)
AND
NOT DB_Avatars(_Avatar)
THEN
DebugText(_Avatar,"Please select an avatar to end a relationship");

IF
TextEvent("stopdate")
AND
GetHostCharacter(_Avatar)
AND
DB_ORI_Partnered(_Avatar,_Companion)
AND
DB_CompanionCanPartner(_Companion, _, _PartneredFlag, _, _, _, _DateCommand)
THEN
ClearFlag(_PartneredFlag,_Avatar);

QRY
QRY_ORI_Partner_DebugCheck((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
NOT DB_Avatars(_Avatar)
THEN
DebugText(_Avatar,"Can't start relationship: Selected character is not an avatar");

QRY
QRY_ORI_Partner_DebugCheck((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
DB_Avatars(_Companion)
THEN
DebugText(_Avatar,"Can't start relationship: Target character is an avatar");

QRY
QRY_ORI_Partner_DebugCheck((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
DB_ORI_Partnered(_Avatar,_)
THEN
DebugText(_Avatar,"Can't start relationship: Avatar is already in a relationship. Use 'oe stopdate' to clear relationships on target.");

QRY
QRY_ORI_Partner_DebugCheck((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
DB_ORI_Partnered(_,_Companion)
THEN
DebugText(_Avatar,"Can't start relationship: Companion is already in a relationship. Use 'oe stopdate' to clear relationships on target.");

QRY
QRY_ORI_Partner_DebugCheck((CHARACTER)_Avatar,(CHARACTER)_Companion)
AND
NOT DB_PartOfTheTeam(_Companion)
THEN
DebugText(_Avatar, "Can't start relationship: Companion is not in the party.");
//END_REGION

//REGION PartOfTheTeam flags
IF
DB_PartOfTheTeam(_Origin)
AND
DB_OriginPartOfTheTeamFlag(_Origin, _Flag, _, _)
AND
_Flag != NULL_00000000-0000-0000-0000-000000000000
THEN
SetFlag(_Flag);

IF
DB_OriginPartOfTheTeamFlag(_Origin, _Flag, _, _)
AND
NOT DB_PartOfTheTeam(_Origin)
AND
_Flag != NULL_00000000-0000-0000-0000-000000000000
THEN
ClearFlag(_Flag);

IF
DB_PartOfTheTeam(_Origin)
AND
DB_OriginPartOfTheTeamFlag(_Origin, _, _AvatarFlag, _)
AND
DB_Avatars(_Origin)
AND
_AvatarFlag != NULL_00000000-0000-0000-0000-000000000000
THEN
SetFlag(_AvatarFlag);

IF
DB_OriginPartOfTheTeamFlag(_Origin, _, _AvatarFlag, _)
AND
NOT DB_PartOfTheTeam(_Origin)
AND
DB_Avatars(_Origin)
AND
_AvatarFlag != NULL_00000000-0000-0000-0000-000000000000
THEN
ClearFlag(_AvatarFlag);

IF
CharacterReservedUserIDChanged(_Character, _OldID, _NewID)
THEN
PROC_ORI_UpdateCharacterControlledFlags(_Character);
PROC_ORI_ClearUserControlledFlags(_OldID, _Character);
PROC_ORI_SetUserControlledFlags(_NewID, _Character);

PROC
PROC_ORI_UpdateCharacterControlledFlags((CHARACTER)_Character)
AND
DB_Players(_OtherCharacter)
AND
DB_OriginPartOfTheTeamFlag(_OtherCharacter, _, _, _ControlledFlag)
AND
_ControlledFlag != NULL_00000000-0000-0000-0000-000000000000
AND
QRY_SameUser(_OtherCharacter, _Character)
THEN
SetFlag(_ControlledFlag, _Character);

PROC
PROC_ORI_UpdateCharacterControlledFlags((CHARACTER)_Character)
AND
DB_Players(_OtherCharacter)
AND
DB_OriginPartOfTheTeamFlag(_OtherCharacter, _, _, _ControlledFlag)
AND
_ControlledFlag != NULL_00000000-0000-0000-0000-000000000000
AND
NOT QRY_SameUser(_OtherCharacter, _Character)
THEN
ClearFlag(_ControlledFlag, _Character);

PROC
PROC_ORI_ClearUserControlledFlags((INTEGER)_ID, (CHARACTER)_Character)
AND
DB_OriginPartOfTheTeamFlag(_Character, _, _, _ControlledFlag)
AND
DB_Players(_OtherCharacter)
AND
GetReservedUserID(_OtherCharacter, _ID)
THEN
ClearFlag(_ControlledFlag, _OtherCharacter);

PROC
PROC_ORI_SetUserControlledFlags((INTEGER)_ID, (CHARACTER)_Character)
AND
DB_OriginPartOfTheTeamFlag(_Character, _, _, _ControlledFlag)
AND
DB_Players(_OtherCharacter)
AND
GetReservedUserID(_OtherCharacter, _ID)
THEN
SetFlag(_ControlledFlag, _OtherCharacter);

//END_REGION

//REGION DB_OriginKickFromPartyFlags

QRY
QRY_InNoDialogOrInSameDialogAs((CHARACTER)_Character, (CHARACTER)_Character2)
AND
NOT DB_InteractiveDialogSpeaker(_, _Character)
THEN
DB_NOOP(1);

QRY
QRY_InNoDialogOrInSameDialogAs((CHARACTER)_Character, (CHARACTER)_Character2)
AND
DB_InteractiveDialogSpeaker(_ID, _Character)
AND
DB_InteractiveDialogSpeaker(_ID, _Character2)
THEN
DB_NOOP(1);

PROC
PROC_DialogStarted(_Dialog, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Dialog)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID);

IF
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
DB_BlockDismissable_IgnoreDialog(_Character)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID, _Character, _CanBeKickedFlag);

IF
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
NOT DB_BlockDismissable_IgnoreDialog(_Character)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID, _Character, _CanBeKickedFlag);

IF
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
DB_InteractiveDialogSpeaker(_, _Character)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID, _Character, _CanBeKickedFlag);

IF
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
NOT DB_InteractiveDialogSpeaker(_, _Character)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID, _Character, _CanBeKickedFlag);

IF
DB_Avatars(_Avatar)
AND
DB_InteractiveDialogSpeaker(_, _Avatar)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID);

IF
DB_Avatars(_Avatar)
AND
NOT DB_InteractiveDialogSpeaker(_, _Avatar)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID);

IF
CharacterReservedUserIDChanged(_Character, _, _)
AND
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update(_ID, (CHARACTER)_Character, (FLAG)_CanBeKickedFlag);

PROC
PROC_CheckDismissableAvatars()
AND
DB_Avatars(_Avatar)
AND
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
AND
DB_DialogName(_Name, _ID)
AND
DB_GLO_CompanionSwapDialogue(_Name)
THEN
PROC_PartyMemberKickFromPartyFlags_Update((INTEGER)_ID, (CHARACTER)_Character, (FLAG)_CanBeKickedFlag);

PROC
PROC_PartyMemberKickFromPartyFlags_Update((INTEGER)_ID)
AND
DB_OriginKickFromPartyFlags(_Character, _, _CanBeKickedFlag)
THEN
PROC_PartyMemberKickFromPartyFlags_Update((INTEGER)_ID, (CHARACTER)_Character, (FLAG)_CanBeKickedFlag);

PROC
PROC_PartyMemberKickFromPartyFlags_Update((INTEGER)_ID, (CHARACTER)_Character, (FLAG)_Flag)
AND
DB_Avatars(_Avatar)
AND
NOT QRY_OriginKickFromPartyFlags(_Character, _Avatar)
THEN
ClearFlag(_Flag, _Avatar);

//Avatars
QRY
QRY_OriginKickFromPartyFlags((CHARACTER)_Character, (CHARACTER)_Avatar)
AND
DB_Players(_Avatar)
AND
QRY_SameUser(_Avatar, _Character)
AND
DB_Avatars(_Character)
AND
QRY_GLO_AvatarCanBeDismissed(_Character, 1)
AND
QRY_InNoDialogOrInSameDialogAs(_Character, _Avatar)
AND
DB_OriginKickFromPartyFlags(_Character, _, _Flag)
AND
_Character != _Avatar //A character should never be able to kick themselves.
THEN
SetFlag(_Flag, _Avatar);

//Companions
QRY
QRY_OriginKickFromPartyFlags((CHARACTER)_Character, (CHARACTER)_Avatar)
AND
DB_Players(_Avatar)
AND
QRY_SameUser(_Avatar, _Character)
AND
NOT DB_Avatars(_Character)
AND
NOT DB_Hirelings_Hired(_Character)
AND
NOT DB_BlockDismissable_IgnoreDialog(_Character)
AND
QRY_InNoDialogOrInSameDialogAs(_Character, _Avatar)
AND
DB_OriginKickFromPartyFlags(_Character, _, _Flag)
AND
_Character != _Avatar //A character should never be able to kick themselves.
THEN
SetFlag(_Flag, _Avatar);

//Hirelings are updated in their own goal.

IF
FlagSet(_KickFlag, NULL_00000000-0000-0000-0000-000000000000, _ID)
AND
DB_OriginKickFromPartyFlags((CHARACTER)_Character, _KickFlag, _)
AND
DialogGetInvolvedPlayer(_ID,1,_Player)
THEN
PROC_GLO_PartyMembers_Remove(_Character,(CHARACTER)_Player,1);

IF
FlagSet(_KickFlag, NULL_00000000-0000-0000-0000-000000000000, _ID)
AND
DB_OriginKickFromPartyFlags((CHARACTER)_Character, _KickFlag, _)
THEN
ClearFlag(_KickFlag, _Character, 0);

//END_REGION

//REGION Killing NPCs that the Origins care about
IF
KilledBy(_NPC, (CHARACTER)_Player, _, _)
AND
DB_Players(_Player)
AND
DB_CompanionCaredFaction(_Companion, _CaredFaction, _ApprovalChange, _IncludeChildFactions, _OnlyOnce)
AND
DB_PartOfTheTeam(_Companion)
AND
NOT DB_Avatars(_Companion) // avatars can kill whoever they want
AND
NOT DB_CompanionCaredFaction_IgnoredNPC(_Companion, _NPC)
AND
QRY_CompanionCanReactToFactionMemberBeingKilled(_Companion, _CaredFaction, _OnlyOnce)
AND
GetBaseFaction(_NPC, _NpcFaction)
AND
QRY_CompanionNeedToReactToFactionMemberDeath(_CaredFaction, _NpcFaction, _IncludeChildFactions)
THEN
DB_CompanionReactedToFactionMemberDeath(_Companion, _CaredFaction);
PROC_ChangeApprovalRatingForAllAvatars(_Companion, _ApprovalChange);

PROC
PROC_ChangeApprovalRatingForAllAvatars((CHARACTER)_Companion, (INTEGER)_ApprovalChange)
AND
DB_Avatars(_Avatar)
AND
ChangeApprovalRating(_Companion, _Avatar, 0, _ApprovalChange, _)
THEN
DB_NOOP(1);

// _Companion, _CaredFaction, _OnlyOnce
QRY
QRY_CompanionCanReactToFactionMemberBeingKilled((CHARACTER)_Companion, (FACTION)_CaredFaction, 0)
THEN
DB_NOOP(1);

QRY
QRY_CompanionCanReactToFactionMemberBeingKilled((CHARACTER)_Companion, (FACTION)_CaredFaction, 1)
AND
NOT DB_CompanionReactedToFactionMemberDeath(_Companion, _CaredFaction)
THEN
DB_NOOP(1);

// _CaredFaction, _NpcFaction, _IncludeChildFactions
QRY
QRY_CompanionNeedToReactToFactionMemberDeath((FACTION)_CaredFaction, (FACTION)_NpcFaction, 0)
AND
_CaredFaction == _NpcFaction
THEN
DB_NOOP(1);

// Recursively check all the children
QRY
QRY_CompanionNeedToReactToFactionMemberDeath((FACTION)_CaredFaction, (FACTION)_NpcFaction, 1)
AND
QRY_CompanionNeedToReactToFactionMemberDeath_CheckWithChildren(_CaredFaction, _NpcFaction)
THEN
DB_NOOP(1);

QRY
QRY_CompanionNeedToReactToFactionMemberDeath_CheckWithChildren((FACTION)_CaredFaction, (FACTION)_NpcFaction)
AND
_CaredFaction == _NpcFaction
THEN
DB_NOOP(1);

QRY
QRY_CompanionNeedToReactToFactionMemberDeath_CheckWithChildren((FACTION)_CaredFaction, (FACTION)_NpcFaction)
AND
_CaredFaction != _NpcFaction
AND
FactionGetParentFaction(_NpcFaction, 1, _ParentFaction)
AND
QRY_CompanionNeedToReactToFactionMemberDeath_CheckWithChildren(_CaredFaction, _ParentFaction)
THEN
DB_NOOP(1);
//END_REGION

//REGION Blocking WaitAtCamp options while in FastTravelBlocked or WaypointBlocked zones
//DangerZone
IF
DB_Players(_Companion)
AND
NOT DB_Avatars(_Companion)
AND
NOT DB_DismissedAvatar(_Companion)
AND
NOT DB_BlockWaitInCampOption(_Companion)
AND
DB_InDangerZone(_Companion,_)
THEN
DB_BlockWaitInCampOption(_Companion);

//Suppression Zone
IF
DB_Players(_Companion)
AND
NOT DB_Avatars(_Companion)
AND
NOT DB_DismissedAvatar(_Companion)
AND
NOT DB_BlockWaitInCampOption(_Companion)
AND
DB_PartyDialogSuppressed(_Companion,(TRIGGER)_)
THEN
DB_BlockWaitInCampOption(_Companion);

//FastTravelBlock_BlockedZone
IF
DB_Players(_Companion)
AND
NOT DB_Avatars(_Companion)
AND
NOT DB_DismissedAvatar(_Companion)
AND
NOT DB_BlockWaitInCampOption(_Companion)
AND
DB_FastTravelBlock_BlockedZone_StatusSet(_Companion)
THEN
DB_BlockWaitInCampOption(_Companion);

//FastTravelBlock_Arrested
IF
DB_Players(_Companion)
AND
NOT DB_Avatars(_Companion)
AND
NOT DB_DismissedAvatar(_Companion)
AND
NOT DB_BlockWaitInCampOption(_Companion)
AND
DB_FastTravelBlock_Arrested_StatusSet(_Companion)
THEN
DB_BlockWaitInCampOption(_Companion);

//Unblock Wait at Camp options
IF
DB_BlockWaitInCampOption(_Companion)
AND
NOT DB_InDangerZone(_Companion,_)
AND
NOT DB_PartyDialogSuppressed(_Companion,_)
AND
NOT DB_FastTravelBlock_BlockedZone_StatusSet(_Companion)
AND
NOT DB_FastTravelBlock_Arrested_StatusSet(_Companion)
THEN
NOT DB_BlockWaitInCampOption(_Companion);

IF
DB_BlockWaitInCampOption((CHARACTER)_Companion)
THEN
SetFlag((FLAG)GLO_Origin_BlockWaitInCampOption_a2cd0f8e-67c2-4294-8f5d-2d30f1acde38, _Companion);
DB_Origin_BlockWaitInCampOptionFlagSet((CHARACTER)_Companion);

IF
DB_Origin_BlockWaitInCampOptionFlagSet((CHARACTER)_Companion)
AND
NOT DB_BlockWaitInCampOption((CHARACTER)_Companion)
THEN
NOT DB_Origin_BlockWaitInCampOptionFlagSet((CHARACTER)_Companion);
ClearFlag((FLAG)GLO_Origin_BlockWaitInCampOption_a2cd0f8e-67c2-4294-8f5d-2d30f1acde38, _Companion);

//END_REGION

//REGION Clean up lingering Nesting Flags
IF
FlagSet(_NestedFlag,_Character,_)
AND
DB_Origins_NestedFlags(_NestedFlag)
THEN
DB_Origins_NestedFlagSet(_NestedFlag,_Character);

IF
FlagCleared(_NestedFlag,_Character,_)
AND
DB_Origins_NestedFlagSet(_NestedFlag,_Character)
THEN
NOT DB_Origins_NestedFlagSet(_NestedFlag,_Character);

IF
DB_Origins_NestedFlagSet(_NestedFlag,_Character)
AND
NOT DB_DialogSpeakers(_,_Character,_)
THEN
ClearFlag(_NestedFlag,_Character,0,0);
NOT DB_Origins_NestedFlagSet(_NestedFlag,_Character);

//END_REGION


//REGION Origin Variable Kiss Selector

IF
FlagSet(ORI_Kiss_EndRandom_f13348d0-34bf-4328-80a5-29dd8a7b0aef, _Companion, _ID)
AND
DB_ORI_KissFlagTracker(_PickedFlag, _Companion, _ID)
THEN
ClearFlag(ORI_Kiss_EndRandom_f13348d0-34bf-4328-80a5-29dd8a7b0aef, _Companion);
ClearFlag(_PickedFlag, _Companion);
NOT DB_ORI_KissFlagTracker(_PickedFlag, _Companion, _ID);

IF
FlagSet(ORI_Kiss_StartRandom_2a98bc41-f6b7-4277-a282-1a91c4ef8a9b, _Companion, _ID)
AND
QRY_GetRandom("DB_ORI_RandomKissFlag", 1, "DB_ORI_SelectedKissFlag")
AND
DB_ORI_SelectedKissFlag((FLAG)_PickedFlag)
THEN
SetFlag(_PickedFlag,_Companion, 0);
ClearFlag(ORI_Kiss_StartRandom_2a98bc41-f6b7-4277-a282-1a91c4ef8a9b, _Companion);
DB_ORI_KissFlagTracker(_PickedFlag, _Companion, _ID);
NOT DB_ORI_SelectedKissFlag(_PickedFlag);
NOT DB_ORI_RandomKissFlag(_PickedFlag);
PROC_ORI_KissTrackerRestore();

//We cycle through all the kiss permutations before any repeats
PROC
PROC_ORI_KissTrackerRestore()
AND
DB_ORI_RandomKissCount(_Count)
AND
_Count < 4
AND
IntegerSum(_Count, 1, _NewCount)
THEN
DB_ORI_RandomKissCount(_NewCount);
NOT DB_ORI_RandomKissCount(_Count);

PROC
PROC_ORI_KissTrackerRestore()
AND
DB_ORI_RandomKissCount(4)
THEN
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionA_6061dd44-55fe-41b0-a79c-fc696073de0a);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionB_8da83898-1476-43e7-ab38-314c61b1ff74);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionC_98e473ed-0144-482c-853a-e4fc739646f5);
DB_ORI_RandomKissFlag((FLAG)ORI_Kiss_VersionD_0bdf3afd-1997-4c9e-82f3-b1365a47034c);
DB_ORI_RandomKissCount(0);
NOT DB_ORI_RandomKissCount(4);

IF
DB_ORI_RandomKissFlag(_)
THEN
DB_NOOP(1);


//In case the dialog is interrupted before the End flag can set
IF
DialogEnded(_, _ID)
AND
DB_ORI_KissFlagTracker(_PickedFlag, _Companion, _ID)
THEN
ClearFlag(_PickedFlag, _Companion);
NOT DB_ORI_KissFlagTracker(_PickedFlag, _Companion, _ID);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Shared_Campaign"
