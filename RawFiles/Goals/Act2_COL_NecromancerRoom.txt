Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_COL_NecromancerLab_Start((TRIGGER)S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333);
DB_COL_NecromancerLab_Start(S_COL_NecromancerLab_Start2_8b027d15-87b2-40a8-9c07-e21625649b1d);
DB_COL_NecromancerLab_Start(S_COL_NecromancerLab_Start3_75b3b1ae-da29-4a49-853a-8e650a2503bb);
DB_COL_NecromancerLab_Start(S_COL_NecromancerLab_Start4_a268a2c9-063a-49bd-9bac-1752dd6bb836);
DB_COL_NecromancerLab_Start(S_COL_NecromancerLab_Start5_d25b1d01-3768-4043-b929-a314362cc950);
DB_COL_NecromancerLab_Start(S_COL_NecromancerLab_Start6_f998703a-edd2-4168-b5f0-de775063d051);

//_Zombie,_SwarmGroupID,_AnubisConfig
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead1_dbdabc8b-afe2-470c-aaf6-b4d8b20248fc,"COL_NecroLab_ZombiesDefault01","COL_NecromancerLab_Undead1");
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead2_7e522c85-8768-40c1-8cf4-71ac9bdf8ac0,"COL_NecroLab_ZombiesDefault01","COL_NecromancerLab_Undead2");
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead3_af7d7501-4054-4ef9-98d1-0f4c3c1e4a1e,"COL_NecroLab_ZombiesDefault01","COL_NecromancerLab_Undead3");
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead4_38db884e-3817-48bb-a7ae-c066cb6176f9,"COL_NecroLab_ZombiesDefault02","COL_NecromancerLab_Undead4");
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead5_28c8a569-740b-4963-9edb-b900e6af15ae,"COL_NecroLab_ZombiesDefault02","COL_NecromancerLab_Undead5");
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)S_COL_NecromancerRoom_Undead6_746f16c5-59bd-4b88-b250-64448fc4c05f,"COL_NecroLab_ZombiesDefault02","COL_NecromancerLab_Undead6");

DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_Wulbren_2d70edbf-1a70-4047-8099-48f3e75d93bf, (TRIGGER)S_COL_NecromancerLab_ZombiePoint_Wulbren_c85ab9a1-f9fb-4f9a-8622-b43a026572d7,"COL_NecroLab_ZombieCandidates01","COL_NecroLab_ZombieName_Wulbren");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_GnomePrisoner_001_4fbd62e8-a486-471e-8a65-00966b058dd5, S_COL_NecromancerLab_ZombiePoint_GnomePrisoner_001_ca932e0f-8cb4-4ccb-a01e-4b6850b36743,"COL_NecroLab_ZombieCandidates01","COL_NecroLab_ZombieName_GnomePrisoner_001");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_GnomePrisoner_002_c9a7d921-bef0-4829-8792-d48c529daee5, S_COL_NecromancerLab_ZombiePoint_GnomePrisoner_002_e8bdacdb-a2f4-4fca-bc96-31faedbfa200,"COL_NecroLab_ZombieCandidates01","COL_NecroLab_ZombieName_GnomePrisoner_002");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b, S_COL_NecromancerLab_ZombiePoint_DrowCommander_64eff4fd-6679-4db4-93f2-5b5fa8df6190,"COL_NecroLab_ZombieCandidates01","COL_NecroLab_ZombieName_DrowCommander");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GOB_GoblinKing_11337af0-6a57-426b-a820-c4b00923dd54, S_COL_NecromancerLab_ZombiePoint_GoblinKing_7e78c743-1594-42cf-a5d8-a02ab71c8547,"COL_NecroLab_ZombieCandidates01","COL_NecroLab_ZombieName_GoblinKing");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_ProdigySister_44d09b0b-0568-456c-b18d-559a0a3f981d, S_COL_NecromancerLab_ZombiePoint_ProdigySister_7f9f6eb3-c190-4ff9-9677-2255fee5df7e,"COL_NecroLab_ZombieCandidates02","COL_NecroLab_ZombieName_ProdigySister");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_ProdigyBrother_d0187724-c0e2-4019-a01d-a03ee8153f1b, S_COL_NecromancerLab_ZombiePoint_ProdigyBrother_979489c3-c452-4272-9a6a-351ff4f1af9d,"COL_NecroLab_ZombieCandidates02","COL_NecroLab_ZombieName_ProdigyBrother");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_GLO_YoungLover_01_dd9178e7-1e3f-43bc-8a38-666dfcac7d0c, S_COL_NecromancerLab_ZombiePoint_YoungLover_37715e15-c055-4678-b993-1c220af03c88,"COL_NecroLab_ZombieCandidates02","COL_NecroLab_ZombieName_YoungLover_01");
DB_COL_NecromancerLab_Candidates((CHARACTER)S_DEN_Tiefling_010_23129d6c-8d39-4a4c-a4f6-cfc6637b597c, S_COL_NecromancerLab_ZombiePoint_Tiefling_010_9c8c4c79-f4be-450d-9885-64d71ccec9bd,"COL_NecroLab_ZombieCandidates02","COL_NecroLab_ZombieName_Tiefling_010");

DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_Wulbren_2d70edbf-1a70-4047-8099-48f3e75d93bf,(ROOT)COL_Zombie_Custom_Wulbren_8398e3ff-92cd-43e9-8c59-a4a737910f04);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_GnomePrisoner_001_4fbd62e8-a486-471e-8a65-00966b058dd5,(ROOT)COL_Zombie_Custom_GnomePrisoner_001_4d492b56-b7f3-4993-a851-756f40223727);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_GnomePrisoner_002_c9a7d921-bef0-4829-8792-d48c529daee5,(ROOT)COL_Zombie_Custom_GnomePrisoner_002_4db567a6-c040-4d68-b8e1-3f042cda29b6);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b,(ROOT)COL_Zombie_Custom_DrowCommander_c936979c-0bcb-4fe2-9bc8-a9531ea6ef3b);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GOB_GoblinKing_11337af0-6a57-426b-a820-c4b00923dd54,(ROOT)COL_Zombie_Custom_GoblinKing_06f7326b-9356-4f4e-97de-6628e1761a42);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_ProdigySister_44d09b0b-0568-456c-b18d-559a0a3f981d,(ROOT)COL_Zombie_Custom_ProdigySister_2f1a738e-1401-4529-afb1-b3376cd06b0e);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_ProdigyBrother_d0187724-c0e2-4019-a01d-a03ee8153f1b,(ROOT)COL_Zombie_Custom_ProdigyBrother_b3b8f414-0cc2-4a0c-adbd-5114916d047f);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_GLO_YoungLover_01_dd9178e7-1e3f-43bc-8a38-666dfcac7d0c,(ROOT)COL_Zombie_Custom_YoungLover_00fcfa6d-3551-464f-9822-0c545f85508b);
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)S_DEN_Tiefling_010_23129d6c-8d39-4a4c-a4f6-cfc6637b597c,(ROOT)COL_Zombie_Custom_Tiefling_010_8bcc2e65-c9e1-4e2e-a760-9967e045c547);

DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger1_fb947e08-973c-49fb-9ccb-f27a9e541dc2, (ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353);
DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger2_a6500c38-cd1a-4afb-8cc8-0d0a9ae80cb7, (ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35);
DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger3_dddf5af8-a6c6-4953-a5f6-0ec270b0df0a, (ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e);
DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger4_6a1ce6d5-101a-4b98-8e29-3881df68b8ff, (ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8);
DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger5_ab950dbf-c207-470c-b30e-908dea47f2c1, (ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26);
DB_COL_NecromancerLab_CageTrigger((TRIGGER)S_COL_NecromancerRoom_CageTrigger6_4b6f1fa2-d724-4e1f-bd87-c7cdc04b76fa, (ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall1_bda760b5-6bab-45ac-9d75-62f66170717d);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall2_a88f9119-4dc8-4d65-8699-1809d1c48b2b);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall3_103a5186-9c81-4f0e-947e-927bcca810c2);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall4_bedc2dc4-dda3-44b5-81ef-4503ca53382b);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall5_322c9603-e914-4ce0-87a1-f4e2d828e34f);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, S_COL_NecromancerLab_Cage1_Wall6_f400492d-dc23-4703-97fc-e2d3a1c7e601);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall1_365fa76e-4b99-4ad9-87da-f1a6bdce383b);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall2_83efa1fd-017b-498b-838e-38af544ca3b5);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall3_4277d6f9-b59f-41cc-8c21-2d83dbed3dbe);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall4_dc49ae54-835f-499c-b8ad-9da58c9ad030);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall5_ea81e2bc-340d-4a8b-902d-83c122b13d01);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, S_COL_NecromancerLab_Cage2_Wall6_90e931a7-95d2-42e1-8a07-3f948e3f07f6);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall1_22e4fbc7-c42b-4219-af98-491ae72be8aa);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall2_fec35fa2-c24f-40e6-9ecd-3b04d17bf723);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall3_ecc83fa1-ce52-4aab-ad05-4b5601b58688);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall4_64e4f65b-6be5-4e0a-aefa-0e86b1fee635);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall5_d3861556-7ed2-46c2-b168-d7a5d915cb81);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, S_COL_NecromancerLab_Cage3_Wall6_f9e4e8d0-431f-49b3-9905-4cd4f107660e);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall1_39b4c0ff-b1c3-4750-b9e3-eb5882f50ccc);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall2_950c057f-f8c4-4aaa-bbb1-2fec268b362e);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall3_2ee76561-9744-4675-aa3c-340d224e5caf);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall4_d2a8d1f4-3e62-4bb9-9285-e9482cf04a39);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall5_e8453635-c827-47c3-a328-6600dd5ac185);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, S_COL_NecromancerLab_Cage4_Wall6_26c4b71a-10e8-4ed9-a214-3160b337fbdf);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall1_a64b5a52-4b78-4a1e-89f0-3ade1cfaadb3);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall2_71e1581e-7a50-419e-a7c4-33463bc4fbc4);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall3_a2c00b97-4132-40c5-9955-56d515dbced4);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall4_f8056866-b5b6-49f5-8f66-070f3b9ed8d0);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall5_a321fe48-4b63-4d2e-b89f-5163bcdb07dc);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, S_COL_NecromancerLab_Cage5_Wall6_4464a350-3f0c-4499-b608-656042cac898);

DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall1_36911800-88b0-4a9f-a9b1-56ba7d3e0220);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall2_c6fb434f-1a9b-4d74-9afc-4b080a0c5973);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall3_e7eb6c2f-4ad4-4155-ac78-2d3a8997285b);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall4_664fdc00-fa1e-4a68-b360-c0d32f3b0169);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall5_67fdc7af-90b7-4bfb-b083-381f31ac7f93);
DB_COL_NecromancerLab_CageWalls((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, S_COL_NecromancerLab_Cage6_Wall6_6b13e738-3797-4b6d-bd9c-f1175d6347bd);

DB_COL_NecromancerLab_Skeletons((CHARACTER)S_COL_NecromancerRoom_TadpoledSkeleton_Melee_001_bf5c1d26-2f4f-4b09-9e24-0252d9b19f68);
DB_COL_NecromancerLab_Skeletons((CHARACTER)S_COL_NecromancerRoom_TadpoledSkeleton_Melee_002_4f59c867-b2b6-4b2f-affa-15553f045177);
DB_COL_NecromancerLab_Skeletons((CHARACTER)S_COL_NecromancerRoom_TadpoledSkeleton_Caster_001_eedd14fd-3cd9-4adc-b31d-a4932c56e601);
DB_COL_NecromancerLab_Skeletons((CHARACTER)S_COL_NecromancerRoom_TadpoledSkeleton_Ranger_001_ccd58ccd-b49b-4934-9e09-3705d2866f6f);

DB_COL_NecromancerLab_Candle(S_COL_NecromancerLab_Candle1_1f26256e-2cb9-45b4-ac80-dfd313081681);
DB_COL_NecromancerLab_Candle(S_COL_NecromancerLab_Candle2_996f27d7-4072-4729-a433-38dec4cfdbe5);
DB_COL_NecromancerLab_Candle(S_COL_NecromancerLab_Candle3_ab318017-e124-4cc7-a51b-85e9bb1a40b0);

DB_COL_NecromancerLab_AssaultZombies((CHARACTER)S_COL_NecromancerRoom_Undead_AssaultCage1_d0ed1b4b-e97c-4759-b287-d01cc8e5050d);
DB_COL_NecromancerLab_AssaultZombies((CHARACTER)S_COL_NecromancerRoom_Undead_AssaultCage2_1dcec472-c7f0-49df-9a33-9c0d278ab4fa);

DB_HasItemEvent((ITEM)S_COL_NecromancerLab_MolEyepatch_fa9baba1-f855-449c-8327-9728a493b193, (FLAG)COL_NecromancerLab_HasItem_MolEyepatch_46133bb6-6a7f-38cd-df32-d8f596a1cd7c);
DB_PlayerHasTemplateItem((ITEMROOT)UNI_LOOT_GEN_Bloody_Eyepatch_A_86b7cbe1-c6b9-48d8-b53e-c750c031d7ae, (FLAG)COL_NecromancerLab_HasItem_MolEyepatch_46133bb6-6a7f-38cd-df32-d8f596a1cd7c);

PROC_DeclareCounter("COL_NecromancerLab_Candles");

PROC_TriggerRegisterForPlayers(S_COL_NecromancerRoom_Area_Box_1118fd06-0ad4-4214-a378-29c6188030f1);

DB_HostileToPlayerGroupCancelFlag(COL_NecromancerLab_State_PretendedToBeThralls_1bf3844f-74be-431b-a01e-d22d2a4f4285,(FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a);

NOT DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerDead",(CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

// DB of characters that will be exluded depending on the different permutations of this combat
// Balthazar is killed in SHA
//DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerDead",(CHARACTER)_Character);

// Balthazar is in COL, players enter COL by themselves
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerAlive",(CHARACTER)S_COL_NecromancerRoom_DeathShepherd_000_1627bff7-5674-45f6-9da5-582521ce9296);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerAlive",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_000_f0f1733e-e265-4922-9ca5-978e161f296f);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerAlive",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_001_1b4bc2b2-deff-45ac-bcfe-b11994ed45c0);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerAlive",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_002_436bd7da-b0e9-4661-bce9-f53b674c1a08);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Assault_NecromancerAlive",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_003_783e0bd7-5e0e-47e6-b02b-7d06f4bc9f62);

// Balthazar is in COL, players get caught and sent to COL (Necrowombs)
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_DeathShepherd_000_1627bff7-5674-45f6-9da5-582521ce9296);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_000_c3a7c696-9f82-4c0d-aedf-734bd2595060);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_001_26463a1d-8df2-4da8-81c2-7735548a70f2);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_002_9e08f2fd-2e03-4716-9d61-26db0df96235);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_003_98900d1a-e7e3-430e-9fd4-d16096222df4);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_000_f0f1733e-e265-4922-9ca5-978e161f296f);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_001_1b4bc2b2-deff-45ac-bcfe-b11994ed45c0);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_002_436bd7da-b0e9-4661-bce9-f53b674c1a08);
DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",(CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_003_783e0bd7-5e0e-47e6-b02b-7d06f4bc9f62);

// Extra minions for the non-audience combat permutations
DB_COL_NecromancerLab_AllMinions((CHARACTER)S_COL_NecromancerRoom_DeathShepherd_000_1627bff7-5674-45f6-9da5-582521ce9296);
DB_COL_NecromancerLab_AllMinions((CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_000_c3a7c696-9f82-4c0d-aedf-734bd2595060);
DB_COL_NecromancerLab_AllMinions((CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_001_26463a1d-8df2-4da8-81c2-7735548a70f2);
DB_COL_NecromancerLab_AllMinions((CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_002_9e08f2fd-2e03-4716-9d61-26db0df96235);
DB_COL_NecromancerLab_AllMinions((CHARACTER)S_COL_NecromancerRoom_Ghoul_Flying_003_98900d1a-e7e3-430e-9fd4-d16096222df4);
DB_COL_NecromancerLab_AllZombies((CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_000_f0f1733e-e265-4922-9ca5-978e161f296f);
DB_COL_NecromancerLab_AllZombies((CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_001_1b4bc2b2-deff-45ac-bcfe-b11994ed45c0);
DB_COL_NecromancerLab_AllZombies((CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_002_436bd7da-b0e9-4661-bce9-f53b674c1a08);
DB_COL_NecromancerLab_AllZombies((CHARACTER)S_COL_NecromancerRoom_Zombie_Greater_003_783e0bd7-5e0e-47e6-b02b-7d06f4bc9f62);

// Tactician: The Necrowombs have 20% more HP
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage1_a69359df-f551-4e12-9665-c905004bc353, "COL_NECROWOMB_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage2_5607107a-0a47-4591-9d7f-8e535fa11a35, "COL_NECROWOMB_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage3_35b58c59-c8ca-4e1b-9d6c-d0718aed8c9e, "COL_NECROWOMB_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage4_57ba5a61-e161-42c7-a2e0-384f2f9915e8, "COL_NECROWOMB_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage5_912dd3ee-51cb-4d82-b225-cf85eeb81d26, "COL_NECROWOMB_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Cage6_878f4593-25e1-4abc-8965-d4e6f9c21a73, "COL_NECROWOMB_HARDCORE", "HARD");

DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Candle1_1f26256e-2cb9-45b4-ac80-dfd313081681 , "COL_RITUALCANDLE_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Candle2_996f27d7-4072-4729-a433-38dec4cfdbe5 , "COL_RITUALCANDLE_HARDCORE", "HARD");
DB_Combat_DifficultyItems((ITEM)S_COL_NecromancerLab_Candle3_ab318017-e124-4cc7-a51b-85e9bb1a40b0 , "COL_RITUALCANDLE_HARDCORE", "HARD");
KBSECTION
//REGION Debug Setup / Hooks

IF
TextEvent("Necromancer_AllCandidates")
THEN
DB_COL_NecromancerLab_DEBUG_AllCandidates(1);

IF
TextEvent("Necromancer_Audience")
AND
GetHostCharacter(_Player)
THEN
PROC_COL_NecromancerLab_DEBUG_Audience(_Player);

PROC
PROC_COL_NecromancerLab_DEBUG_Audience((CHARACTER)_Player)
//AND
//QRY_StartDialog((DIALOGRESOURCE)MOO_Audience_Altar_ffc48fe4-842d-489b-adb3-03e7b6cedde5, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player)
THEN
PROC_COL_TeleportPartiesToColony(1);
NOT DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

IF
TextEvent("Necromancer_Assault")
AND
GetHostCharacter(_Player)
THEN
PROC_COL_NecromancerLab_DEBUG_Assault(_Player);

PROC
PROC_COL_NecromancerLab_DEBUG_Assault((CHARACTER)_Player)
AND
IsDead(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,1)
THEN
Resurrect(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

PROC
PROC_COL_NecromancerLab_DEBUG_Assault((CHARACTER)_Player)
AND
GetHostCharacter(_Player)
THEN
PROC_SceneOver("SHA_Necromancer_MeetingNecromancer"); //This is for debug purposes. Normally, he should be down when the dialogue starts.
PROC_State_Progress(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise");
PROC_COL_TeleportPartiesToColony(0);
PROC_TeleportPartiesTo(S_COL_EntranceDoor2_Trigger2_a0060b5b-68f2-4b4f-afe4-f7f83524ca69,"");
NOT DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

IF
TextEvent("Necromancer_AssaultDead")
AND
GetHostCharacter(_Player)
THEN
NOT DB_OnlyOnce("COL_NecromancerLab_AssaultSetup");
Die(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,DEATHTYPE.DoT,NULL_00000000-0000-0000-0000-000000000000,1,1);
DB_Dead(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
SetOnStage(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,0);
PROC_State_Progress(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise");
PROC_COL_TeleportPartiesToColony(0);
PROC_TeleportPartiesTo(S_COL_EntranceDoor2_Trigger2_a0060b5b-68f2-4b4f-afe4-f7f83524ca69,"");

IF
TextEvent("Necromancer_AssaultDead")
AND
DB_COL_NecromancerLab_Candidates(_Zombie,_,_,_)
THEN
SetOnStage(_Zombie,0);

IF
TextEvent("Necromancer_PlayerZombies")
AND
DB_COL_NecromancerLab_Candle(_Candle)
THEN
ApplyStatus(_Candle,"BURNING",-1.0,1,_Candle);

IF
TextEvent("Necromancer_PlayerZombies")
AND
DB_COL_NecromancerLab_AliveInCage(_Character,_Cage)
THEN
SetHitpoints(_Character,0);

PROC
PROC_COL_CheckDebugSetup()
AND
DB_Players(_Player)
AND
GetFlag(Debug_Teleport_COL_Colony_WithNecromancer_7cfae272-5f13-de8a-8cb1-51cc3905bee8, _Player, 1)
THEN
ClearFlag(Debug_Teleport_COL_Colony_WithNecromancer_7cfae272-5f13-de8a-8cb1-51cc3905bee8, _Player, 0);
PROC_COL_NecromancerLab_DEBUG_Audience((CHARACTER)_Player);

IF
DialogEnded((DIALOGRESOURCE)DebugBook_3af7dec4-4c08-9e44-9064-ec038ebad0ea, _ID)
AND
DB_DialogPlayers(_ID, _Player, 1)
AND
GetFlag(Debug_Teleport_COL_Colony_WithNecromancer_7cfae272-5f13-de8a-8cb1-51cc3905bee8, _Player, 1)
AND
DB_CurrentLevel("SCL_Main_A")
AND
QRY_StartDialog((DIALOGRESOURCE)MOO_Audience_Altar_ffc48fe4-842d-489b-adb3-03e7b6cedde5, NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player)
THEN
ClearFlag(Debug_Teleport_COL_Colony_WithNecromancer_7cfae272-5f13-de8a-8cb1-51cc3905bee8, _Player, 0);
PROC_COL_NecromancerLab_DEBUG_Audience((CHARACTER)_Player);

IF
FlagSet((FLAG)COL_NecromancerLab_Debug_AudienceRoute_ea66ebbd-eadc-5061-8bc1-a75ecff4a4c1,_,_)
AND
GetHostCharacter(_Player)
THEN
PROC_ForceStopDialog(_Player);
ClearFlag((FLAG)COL_NecromancerLab_Debug_AudienceRoute_ea66ebbd-eadc-5061-8bc1-a75ecff4a4c1);
PROC_COL_NecromancerLab_DEBUG_Audience((CHARACTER)_Player);

IF
FlagSet((FLAG)COL_NecromancerLab_Debug_AssaultRoute_d59dc6f3-a65b-768c-ad7a-d46fc0e671b0,_,_)
AND
GetHostCharacter(_Player)
THEN
PROC_ForceStopDialog(_Player);
ClearFlag((FLAG)COL_NecromancerLab_Debug_AssaultRoute_d59dc6f3-a65b-768c-ad7a-d46fc0e671b0);
PROC_COL_NecromancerLab_DEBUG_Assault((CHARACTER)_Player);

//END_REGION

//GENERAL
//REGION General Necromancer setup

PROC
PROC_State_Changed(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise")
AND
NOT DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
THEN
SetFlag((FLAG)COL_State_InColony_d9869d23-bc7d-49f0-9bea-66a24f65e98a, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
PROC_RemoveAllDialogEntriesForSpeaker(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
SetEntityEvent(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,"ClearPeaceReturn", 1);
SetFaction(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a);
SetCombatGroupID(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "COL_NecromancerRoom");
TeleportTo(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, S_COL_NecromancerPoint_0fd04a45-97ab-407e-88a8-99e8b17e1b15, "SHA_NightsongPrison_NecromancerToMoonrise");
SetOnStage(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, 1);

PROC
PROC_State_Changed(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise")
THEN
NOT DB_CombatReact_AD_OnHPPercentage(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_LowHP_61c73f5e-d04f-294b-0fa9-f16e0488a94b, 30);
NOT DB_CombatReact_AD_OnDeath(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_Death_505b3097-a88a-d9f4-d384-04c09cffe735);
NOT DB_CombatReact_AD_OnDeathOther(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, (DIALOGRESOURCE)SHA_Necromancer_AD_GolemDead_4df33ad7-b58f-f6d6-c75f-5bfa4b060543);
NOT DB_CombatReact_AD_OnCast(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_DominateGolem_2984b261-5ca1-bd59-beaa-21a96793316c, "Target_SHA_Necromancer_DarkDominance");
NOT DB_CombatReact_AD_OnCastOther(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (CHARACTER)S_SHA_Necromancer_FleshGolem_5d25116f-4e25-4f9f-bb7a-1d1fdfa8fd4f, (DIALOGRESOURCE)SHA_Necromancer_AD_GolemGoesBerserk_28d38449-c90a-ff8c-c470-fbb840fe8c91, "Shout_Berserk_FleshGolem");
NOT DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_StartTurn_0461405a-32c5-b848-f991-9c8067b8e748, 1);
NOT DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_StartTurn_0461405a-32c5-b848-f991-9c8067b8e748, 2);
NOT DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_StartTurn_0461405a-32c5-b848-f991-9c8067b8e748, 3);
NOT DB_CombatReact_AD_OnTurn(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, (DIALOGRESOURCE)SHA_Necromancer_AD_StartTurn_0461405a-32c5-b848-f991-9c8067b8e748, 4);

IF
DB_COL_NecromancerLab_ReplaceableZombies(_Character,_,_)
THEN
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character);

PROC
PROC_COL_OnFirstEntry()
THEN
DB_COL_NecroLab_PartyEnteredColony(1);
//This makes it so the Necromancer combat flags only get set once you entered Colony

//END_REGION

//REGION Set up dead NPCs

//Also called from Act2_MOO_Assault

PROC
PROC_COL_NecromancerLab_SetupCandidates()
AND
DB_COL_NecromancerLab_Candidates(_Character,_Trigger,_SwarmGroupID,_DisplayName)
AND
NOT QRY_COL_NecromancerLab_CandidateInvalid(_Character)
THEN
PROC_COL_NecromancerLab_RecoverCandidate(_Character);
SetStoryDisplayName(_Character,_DisplayName);
PROC_RemoveAllDialogEntriesForSpeaker(_Character);
TeleportTo(_Character, _Trigger);
DB_COL_NecromancerLab_AllZombies(_Character);
NOT DB_COL_NecromancerLab_Candidates(_Character,_Trigger,_SwarmGroupID,_DisplayName);

IF
DB_COL_NecromancerLab_AllMinions(_Character)
THEN
SetFaction(_Character,(FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a);
SetCombatGroupID(_Character, "COL_NecromancerRoom");

PROC
PROC_COL_NecromancerLab_SetupCandidates()
THEN
PROC_SceneOver("MOO_Execution");

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
DB_Dead(_Character)
THEN
Resurrect(_Character, NULL_00000000-0000-0000-0000-000000000000, 1);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
IsOnStage(_Character, 0)
THEN
SetOnStage(_Character, 1);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
DB_KnockedOut(_Character)
THEN
RemoveStatus(_Character, "KNOCKED_OUT", NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
DB_FeignDeath(_Character)
THEN
RemoveStatus(_Character, "FEIGN_DEATH", NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
THEN
ApplyStatus(_Character, "COL_ZOMBIE", -1.0, 1, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
ApplyStatus(_Character, "BLOOD_COVERED_FULL", -1.0, 1, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);
AddPassive(_Character,"UndeadFortitude");
SetTag(_Character,(TAG)IGNORE_COMBAT_LATE_JOIN_PENALTY_6d60bed7-10cc-4b52-8fb7-baa75181cd49);
SetLevel(_Character, 3);
PROC_GLO_DeleteAllWeapons((CHARACTER)_Character);
PROC_CombatReact_RemoveCombatADs((CHARACTER)_Character);
SetIsBoss(_Character, 0);

//Custom visuals
PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Candidate)
AND
DB_COL_NecromancerLab_Candidates_CustomVisuals((CHARACTER)_Candidate,(ROOT)_Visual)
THEN
Transform((CHARACTER)_Candidate,_Visual,(SHAPESHIFTRULE)DisguiseKeepName_c7c3381e-b901-416e-a0c4-bc745e1ff54a);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
DB_GLO_LevelTraveler(_Character,"SCL_Main_A",_Config)
THEN
NOT DB_GLO_LevelTraveler(_Character,"SCL_Main_A",_Config);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
NOT DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)_,_,_)
THEN
DEV_EnableAnubis(_Character,"COL_NecromancerLab_Zombie");

//For each added NPC candidate, remove one generic zombie (if possible)
//PROC/DB workaround to circumvent needless SysFactAtIndex call
PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_Character)
AND
DB_COL_NecromancerLab_ReplaceableZombies((CHARACTER)_Zombie,_SwarmGroupID,_AnubisConfig)
AND
NOT DB_COL_NecromancerLab_RemovedZombie(1)
THEN
SetOnStage(_Zombie,0);
DEV_EnableAnubis(_Character,_AnubisConfig);
NOT DB_COL_NecromancerLab_ReplaceableZombies(_Zombie,_SwarmGroupID,_AnubisConfig);
NOT DB_COL_NecromancerLab_AllZombies(_Zombie);
DB_COL_NecromancerLab_RemovedZombie(1);

PROC
PROC_COL_NecromancerLab_RecoverCandidate((CHARACTER)_)
AND
DB_COL_NecromancerLab_RemovedZombie(1)
THEN
NOT DB_COL_NecromancerLab_RemovedZombie(1);

//Generic invalidation rules: character is in the shadow curse, in a camp, or in Haven.

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
IsInTrigger(_Character, (TRIGGER)S_HAV_Haven_SUB_6ac001f4-9c56-4a1b-963d-a509e158ffab, 1)
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
IsInTrigger(_Character, (TRIGGER)S_HAV_Haven_SUB_Cellar_eee18cb6-443a-4b8f-ad19-58dff3d731d8, 1)
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
DB_SCL_Shadowcurse_Area(_Area)
AND
IsInTrigger(_Character, _Area, 1)
AND
IsInTrigger(_Character, S_ShadowCurse_SafeZone_MoonriseTower_b0b0721f-2a4f-4530-85cf-c67c0db25f92, 0) //Shadowcurse area covers Moonrise
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
DB_Camp(_, _, _Trigger, _)
AND
IsInTrigger(_Character, _Trigger, 1)
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
DB_IronFlasked(_Character)
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
IsInInventory(_Character, 1)
THEN
DB_NOOP(1);

//Specific validity checks
QRY
QRY_COL_NecromancerLab_CandidateInvalid((CHARACTER)S_GOB_GoblinKing_11337af0-6a57-426b-a820-c4b00923dd54)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
NOT DB_Dead((CHARACTER)S_GOB_GoblinKing_11337af0-6a57-426b-a820-c4b00923dd54) //Explicitly check for dead, he doesn't get turned into a zombie from being incapacitated or petrified
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid((CHARACTER)S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
DB_PartOfTheTeam((CHARACTER)S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b)
THEN
DB_NOOP(1);

QRY
QRY_COL_NecromancerLab_CandidateInvalid(_Character)
AND
NOT DB_COL_NecromancerLab_DEBUG_AllCandidates(1)
AND
_Character != S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b
AND
_Character != S_GOB_GoblinKing_11337af0-6a57-426b-a820-c4b00923dd54
AND
NOT DB_MOO_Jailbreak_Prisoner(_Character, _)
AND
NOT DB_MOO_Jailbreak_KilledPrisoner(_Character)
THEN
DB_NOOP(1);

//END_REGION

//REGION Haruspicy

IF
FlagSet((FLAG)COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07,_,_)
THEN
PROC_LoopEffect(VFX_Script_SCL_Haruspicy_Ritual_01_257f311e-baaf-06fe-b51c-88b998db8741,S_COL_NecromancerLab_Ritual_Effect_b21dc15b-103f-499b-bcdd-ccd76cced1b2,"COL_NecromancerLab_Haruspicy","SCL_Main_A","",0.7);

IF
FlagCleared((FLAG)COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07,_,_)
THEN
PROC_StopLoopEffect(S_COL_NecromancerLab_Ritual_Effect_b21dc15b-103f-499b-bcdd-ccd76cced1b2,"COL_NecromancerLab_Haruspicy");

PROC
PROC_StateSet_PermaDefeated((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
AND
DB_GlobalFlag(COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07)
THEN
ClearFlag(COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07);

IF
DB_Is_InCombat((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,_)
AND
DB_GlobalFlag(COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07)
THEN
ClearFlag(COL_NecromancerLab_State_PerformingHaruspicy_64e8563f-feb4-4c85-ac47-4a58e62bda07);

//END_REGION

//REGION General combat

PROC
PROC_COL_NecromancerLab_SetCombatState((STRING)_State)
AND
DB_COL_NecromancerLab_CombatState_ExcludeCharacters(_State,_Character)
AND
DB_COL_NecromancerLab_AllZombies(_Character)
THEN
NOT DB_COL_NecromancerLab_AllZombies(_Character);

PROC
PROC_COL_NecromancerLab_SetCombatState((STRING)_State)
AND
DB_COL_NecromancerLab_CombatState_ExcludeCharacters(_State,_Character)
AND
DB_COL_NecromancerLab_Skeletons(_Character)
THEN
NOT DB_COL_NecromancerLab_Skeletons(_Character);

PROC
PROC_COL_NecromancerLab_SetCombatState((STRING)_State)
AND
DB_COL_NecromancerLab_CombatState_ExcludeCharacters(_State,_Character)
AND
DB_COL_NecromancerLab_AllMinions(_Character)
THEN
NOT DB_COL_NecromancerLab_AllMinions(_Character);

PROC
PROC_COL_NecromancerLab_SetCombatState((STRING)_State)
AND
DB_COL_NecromancerLab_CombatState_ExcludeCharacters(_State,_Character)
THEN
SetOnStage(_Character,0);

IF
DB_Dead((CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
AND
DB_COL_NecromancerLab_Skeletons(_Skeleton)
THEN
Die(_Skeleton,DEATHTYPE.DoT,S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,1,0,0.0);

//END_REGION

//AUDIENCE ROUTE
//REGION Audience Route setup

PROC
PROC_COL_TeleportPartiesToColony(1)
THEN
PROC_COL_NecromancerLab_SetAudienceRoute();
PROC_GlobalSetFlagAndCache(COL_NecromancerLab_State_Entered_97730e26-60b8-4956-a2f2-2d0fa80443d8);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
THEN
PROC_SceneOver("SHA_Necromancer_MeetingNecromancer"); //This is for debug purposes. Normally, he should be down when the dialogue starts.
PROC_State_Progress(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise");
PROC_COL_NecromancerLab_SetupCandidates();
PROC_COL_NecromancerLab_SetCombatState("Audience");

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_PartyMembers(_Member)
AND
IsSummon(_Member, 1)
THEN
Die(_Member, DEATHTYPE.DoT, NULL_00000000-0000-0000-0000-000000000000, 0, 1, 0.0);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
THEN
PROC_SetRelationToPlayers((FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a,0);

//Remove polymorphs
PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_Players(_Player)
AND
HasAppliedStatusWithGroup(_Player,"SG_Polymorph",1)
THEN
DB_COL_NecromancerLab_DelayTeleportPolymorphed(_Player);
PROC_RemoveAllPolymorphs(_Player);

IF
StatusRemoved(_Player,_Status,_,_)
AND
DB_COL_NecromancerLab_DelayTeleportPolymorphed((CHARACTER)_Player)
AND
IsStatusFromGroup(_Status,"SG_Polymorph",1)
THEN
NOT DB_COL_NecromancerLab_DelayTeleportPolymorphed(_Player);

//Determine teleport targets
PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_COL_NecromancerLab_Start(_Trigger)
THEN
DB_COL_NecromancerLab_StartOptions(_Trigger);

//Ensure MOO_Audience_Altar player speaker is in cinematic cage if possible
PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_DialogName((DIALOGRESOURCE)MOO_Audience_Altar_ffc48fe4-842d-489b-adb3-03e7b6cedde5,_DialogId)
AND
DB_DialogPlayers(_DialogId,_Player,_)
AND
DB_COL_NecromancerLab_StartOptions(S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333)
THEN
NOT DB_COL_NecromancerLab_StartOptions(S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333);
DB_COL_NecromancerLab_TeleportTarget((CHARACTER)_Player,S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333);

//If the above fails, use the first player in DB_Players
PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_Players(_Player)
AND
DB_COL_NecromancerLab_StartOptions(S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333)
THEN
NOT DB_COL_NecromancerLab_StartOptions(S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333);
DB_COL_NecromancerLab_TeleportTarget(_Player,S_COL_NecromancerLab_Start1_9d16f2ad-cbe3-4f1e-980e-050dc3a5e333);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_Players(_Player)
AND
NOT DB_COL_NecromancerLab_TeleportTarget(_Player,_)
AND
QRY_GetRandom("DB_COL_NecromancerLab_StartOptions",1,"DB_COL_NecromancerLab_StartTarget")
AND
DB_COL_NecromancerLab_StartTarget(_Trigger)
THEN
NOT DB_COL_NecromancerLab_StartOptions(_Trigger);
NOT DB_COL_NecromancerLab_StartTarget(_Trigger);
DB_COL_NecromancerLab_TeleportTarget(_Player,_Trigger);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
THEN
DB_COL_NecromancerLab_StartTargetsSelected(1);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_COL_NecromancerLab_StartOptions(_Trigger)
THEN
NOT DB_COL_NecromancerLab_StartOptions(_Trigger);

PROC
PROC_COL_NecromancerLab_SetAudienceRoute()
AND
DB_COL_NecromancerLab_Candle(_Candle)
THEN
ApplyStatus(_Candle, "COL_RITUALCANDLE_VFX", -1.0);

//Do teleport if not blocked
IF
DB_COL_NecromancerLab_TeleportTarget(_Player,_Trigger)
AND
DB_COL_NecromancerLab_StartTargetsSelected(1)
AND
NOT DB_COL_NecromancerLab_DelayTeleportPolymorphed(_Player)
THEN
TeleportTo(_Player, _Trigger, "MOO_KethericShowdown_TeleportedDown", 0, 0, 0, 1, 1);
NOT DB_COL_NecromancerLab_TeleportTarget(_Player,_Trigger);

IF
EntityEvent(_Player,"MOO_KethericShowdown_TeleportedDown")
THEN
PROC_EnterCombat(_Player,S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

IF
DB_COL_NecromancerLab_StartTargetsSelected(1)
AND
NOT DB_COL_NecromancerLab_TeleportTarget(_,_)
THEN
NOT DB_COL_NecromancerLab_StartTargetsSelected(1);

//END_REGION

//REGION Necromantic Cages

IF
StatusApplied(_Candle, "BURNING", _, _)
AND
DB_COL_NecromancerLab_Candle(_Candle)
THEN
PROC_IncreaseCounter("COL_NecromancerLab_Candles");

IF
StatusRemoved(_Candle, "BURNING", _, _)
AND
DB_COL_NecromancerLab_Candle(_Candle)
THEN
SetFlag(COL_NecromancerLab_State_CandleExtinguished_b449cb50-9e79-45a9-8663-df74b9964358, NULL_00000000-0000-0000-0000-000000000000, 0);
PROC_DecreaseCounter("COL_NecromancerLab_Candles");

IF
DestroyedBy(_Candle,_,_,_)
AND
DB_COL_NecromancerLab_Candle(_Candle)
AND
NOT DB_GlobalFlag(COL_NecromancerLab_State_CandleDestroyed_53ec8d43-1833-4fb1-96bb-dda26c674635)
THEN
PROC_GlobalSetFlagAndCache(COL_NecromancerLab_State_CandleDestroyed_53ec8d43-1833-4fb1-96bb-dda26c674635);

IF
FlagSet(COL_NecromancerLab_State_CandleDestroyed_53ec8d43-1833-4fb1-96bb-dda26c674635,_,_)
AND
DB_GlobalFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2)
THEN
ClearFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2, NULL_00000000-0000-0000-0000-000000000000, 0);

IF
FlagSet(COL_NecromancerLab_State_CandleDestroyed_53ec8d43-1833-4fb1-96bb-dda26c674635,_,_)
AND
DB_COL_NecromancerLab_CandleLighter(_Lighter)
THEN
NOT DB_COL_NecromancerLab_CandleLighter(_Lighter);
ClearFlag(COL_NecromancerLab_State_CandleLighter_91a2d6db-c58c-4b3d-94c6-99d39279133c, _Lighter, 0);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89);

PROC
PROC_CounterIncreased("COL_NecromancerLab_Candles", 3)
THEN
SetFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2, NULL_00000000-0000-0000-0000-000000000000, 0);

PROC
PROC_CounterDecreased("COL_NecromancerLab_Candles", _)
THEN
ClearFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2, NULL_00000000-0000-0000-0000-000000000000, 0);

//REGION Zombification

IF
Dying(_Character)
AND
DB_InRegion(_Character, _Trigger)
AND
DB_COL_NecromancerLab_CageTrigger(_Trigger, _Cage)
AND
NOT DB_Destroyed(_Cage)
AND
IsTagged(_Character, (TAG)UNDEAD_33c625aa-6982-4c27-904f-e47029a9b140, 0)
AND
_Character != S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255 //TODO: remove once Astarion gets UNDEAD tag
AND
IsTagged(_Character, (TAG)HUMANOID_7fbed0d4-cabc-4a9d-804e-12ca6088a0a8, 1)
THEN
PlayEffect(_Character,VFX_Script_Necromancer_Zombification_Overlay_02_d5b9add8-e26a-a966-41af-df9326ce9099,"",1.0);
DB_COL_NecromancerLab_TurningIntoZombie((CHARACTER)_Character);

IF
Dying(_Character)
AND
DB_COL_NecromancerLab_TurningIntoZombie(_Character)
AND
GetPosition(_Character, _X, _Y, _Z)
AND
QRY_COL_NecroLab_CreateZombie((CHARACTER)_Character)
AND
CreateAtObject(CONT_GEN_Exploded_Corpse_Medium_A_aa4f61e6-1267-43b1-a428-555317b0b188, _Character, 0, 1, "", 1, _Viscera)
THEN
PlayEffectAtPosition(VFX_Script_Necromancer_Zombification_Smoke_73ea61d8-077a-0ae6-e4ff-ac81d992e2e4,_X,_Y,_Z,1.0);
NOT DB_COL_NecromancerLab_TurningIntoZombie((CHARACTER)_Character);

IF
TextEvent("Necromancer_CagesInvisible")
AND
DB_COL_NecromancerLab_CageTrigger(_,_Cage)
THEN
SetVisible(_Cage,0);

IF
TextEvent("Necromancer_CagesVisible")
AND
DB_COL_NecromancerLab_CageTrigger(_,_Cage)
THEN
SetVisible(_Cage,1);

//Create full size zombie
QRY
QRY_COL_NecroLab_CreateZombie((CHARACTER)_Character)
AND
NOT QRY_COL_NecroLab_IsHalfZombie(_Character)
AND
CreateAtObject(Undead_Zombie_Melee_5b2827cb-1cf9-4cd5-9b58-0f7eb4657f0c, _Character, 0, 1, "", 1, _Zombie)
THEN
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Character);

//Create half-sized zombie
PROC
PROC_COL_NecroLab_CreateHalfZombie((CHARACTER)_Character)
AND
CreateAtObject(Undead_Zombie_Dwarf_f7be698d-6c7e-4e22-a592-62217ec7a6b3, _Character, 0, 1, "", 1, _Zombie)
THEN
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Character);

//Check race tags whether to appear as a full size or half size zombie
QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
IsTagged(_Character,(TAG)REALLY_DWARF_ad129444-0f41-4114-9ee5-2b9902d7ca8d,1)
THEN
DB_COL_NecroLab_HalfZombieCheckSuccess(1);

QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
NOT DB_COL_NecroLab_HalfZombieCheckSuccess(1) //avoid further code calls/tag checks if qry succeeded
AND
IsTagged(_Character,(TAG)REALLY_DUERGARDWARF_45b007f7-f4f6-46e2-9480-395a49b87ef3,1)
THEN
DB_COL_NecroLab_HalfZombieCheckSuccess(1);

QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
NOT DB_COL_NecroLab_HalfZombieCheckSuccess(1)
AND
IsTagged(_Character,(TAG)REALLY_GNOME_42483542-7915-4de5-a7d9-ac0d15fe301c,1)
THEN
DB_COL_NecroLab_HalfZombieCheckSuccess(1);

QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
NOT DB_COL_NecroLab_HalfZombieCheckSuccess(1)
AND
IsTagged(_Character,(TAG)REALLY_DEEPGNOME_17d29357-beba-4096-accc-c28bdea88fda,1)
THEN
DB_COL_NecroLab_HalfZombieCheckSuccess(1);

QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
NOT DB_COL_NecroLab_HalfZombieCheckSuccess(1)
AND
IsTagged(_Character,(TAG)REALLY_HALFLING_2b40a033-7a5c-47e9-92f0-7de9b5cd3a42,1)
THEN
DB_COL_NecroLab_HalfZombieCheckSuccess(1);

QRY
QRY_COL_NecroLab_IsHalfZombie((CHARACTER)_Character)
AND
DB_COL_NecroLab_HalfZombieCheckSuccess(1)
THEN
NOT DB_COL_NecroLab_HalfZombieCheckSuccess(1);
PROC_COL_NecroLab_CreateHalfZombie(_Character);

IF
EnteredLevel(_Zombie,_,_)
AND
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_)
THEN
PlayEffect(_Zombie,VFX_Script_Necromancer_Zombification_Overlay_01_62eb9cb2-9dfb-7ca3-f659-35ff036e123b,"",1.0);
PlayEffect(_Zombie,VFX_Script_Necromancer_Zombification_BodyFX_01_825d33cf-b2d7-58e1-f33a-1a939a2c880e,"Dummy_BodyFX",1.0);

IF
EnteredLevel(_Zombie,_,_)
AND
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Character)
THEN
Transform(_Zombie,_Character,NameOnly_772c7fe3-797a-4774-986e-dbde38efd1ed);

IF
EnteredLevel(_Zombie,_,_)
AND
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Player)
AND
DB_Players(_Player)
THEN
DB_COL_NecroLab_PlayerZombie(_Zombie,_Player);
DB_PreventPermaDefeated(_Player);
SetTag(_Player,(TAG)BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6);
ApplyStatus(_Player,"DEAD_WILL_O_WISP",-1.0,1,NULL_00000000-0000-0000-0000-000000000000);

IF
EnteredLevel(_Zombie,_,_)
AND
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Character)
AND
NOT DB_Players(_Character)
THEN
PROC_Poof(_Character);
MoveAllItemsTo(_Character,_Zombie,1,1,1);

IF
EnteredLevel(_Zombie,_,_)
AND
DB_COL_NecroLab_HandleCharacterZombie((CHARACTER)_Zombie,(CHARACTER)_Character)
THEN
SetFaction(_Zombie,(FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a);
SetCombatGroupID(_Zombie, "COL_NecromancerRoom");
NOT DB_COL_NecroLab_HandleCharacterZombie(_Zombie,_Character);

IF
Dying(_Zombie)
AND
DB_COL_NecroLab_PlayerZombie(_Zombie,_Player)
THEN
ClearTag(_Player,(TAG)BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6);

IF
Resurrected(_Player)
AND
DB_COL_NecroLab_PlayerZombie(_Zombie,_Player)
THEN
PROC_Poof(_Zombie);
MoveAllItemsTo(_Zombie,_Player,1,1,1);
NOT DB_COL_NecroLab_PlayerZombie(_Zombie,_Player);

PROC
PROC_COL_OnLastLeave()
AND
DB_COL_NecroLab_PlayerZombie(_Zombie,_Player)
AND
IsTagged(_Player,(TAG)BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6,1)
THEN
NOT DB_PreventPermaDefeated(_Player);
PROC_Origins_CompanionLeavePermanently(_Player,"Killed");

IF
StatusApplied(_Player,"COL_NECROMANCERCAGE_DRAIN",_,_)
AND
DB_Players((CHARACTER)_Player)
THEN
DB_PreventPermaDefeated(_Player);

IF
StatusRemoved(_Player,"COL_NECROMANCERCAGE_DRAIN",_,_)
AND
DB_Players((CHARACTER)_Player)
AND
NOT DB_Dead(_Player)
THEN
NOT DB_PreventPermaDefeated(_Player);

//END_REGION

IF
DB_InRegion(_Character, _Trigger)
AND
DB_COL_NecromancerLab_CageTrigger(_Trigger, _Cage)
AND
NOT DB_Destroyed(_Cage)
THEN
DB_COL_NecromancerLab_InCage(_Character, _Cage);
SetTag(_Character,ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995);

IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
AND
DB_Destroyed(_Cage)
THEN
NOT DB_COL_NecromancerLab_InCage(_Character, _Cage);
ClearTag(_Character,ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995);

IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
AND
DB_COL_NecromancerLab_CageTrigger(_Trigger, _Cage)
AND
NOT DB_InRegion(_Character, _Trigger)
THEN
NOT DB_COL_NecromancerLab_InCage(_Character, _Cage);
ClearTag(_Character,ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995);

//Different rules for Players and non-Players because the 
//Defeated rules are different for Players and non-Players.
IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
/*AND
IsTagged(_Character, (TAG)UNDEAD_33c625aa-6982-4c27-904f-e47029a9b140, 0)
AND
_Character != S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255 //TODO: remove once Astarion gets UNDEAD tag*/
AND
NOT DB_PermaDefeated(_Character)
AND
NOT DB_Players(_Character)
THEN
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);

IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
AND
/*IsTagged(_Character, (TAG)UNDEAD_33c625aa-6982-4c27-904f-e47029a9b140, 0)
AND
_Character != S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255 //TODO: remove once Astarion gets UNDEAD tag
AND*/
NOT DB_Defeated(_Character)
AND
DB_Players(_Character)
THEN
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);

/*IF
TagSet(_Character, (TAG)UNDEAD_33c625aa-6982-4c27-904f-e47029a9b140)
AND
DB_COL_NecromancerLab_AliveInCage((CHARACTER)_Character, _Cage)
THEN
NOT DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);*/

IF
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage)
AND
DB_PermaDefeated(_Character)
AND
NOT DB_Players(_Character)
THEN
NOT DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);

IF
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage)
AND
DB_Dead(_Character)
AND
NOT DB_Players(_Character)
THEN
NOT DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);


IF
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage)
AND
NOT DB_COL_NecromancerLab_InCage(_Character, _Cage)
THEN
NOT DB_COL_NecromancerLab_AliveInCage(_Character, _Cage);

IF
DB_COL_NecromancerLab_AliveInCage(_Character, _Cage)
AND
NOT DB_COL_NecromancerLab_BeingDrained(_Character)
AND
DB_GlobalFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2)
AND
IsTagged(_Character,(TAG)UNDEAD_33c625aa-6982-4c27-904f-e47029a9b140,0)
AND
_Character != S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255 //TODO: remove once Astarion gets UNDEAD tag
THEN
ApplyStatus(_Character, "COL_NECROMANCERCAGE_DRAIN", -1.0, 0, NULL_00000000-0000-0000-0000-000000000000);

IF
TurnStarted(S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255)
AND
DB_COL_NecromancerLab_InCage((CHARACTER)S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255, _)
AND
DB_GlobalFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2)
AND
NOT DB_OnlyOnce("COL_NecromancerLab_AD_AstarionImmune")
AND
QRY_StartDialog_Fixed((DIALOGRESOURCE)COL_NecromancerLab_AD_AstarionImmune_907a89ff-db32-0dfa-01fd-6b1dd361e75e, S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255)
THEN
DB_OnlyOnce("COL_NecromancerLab_AD_AstarionImmune");

IF
StatusApplied(_Character, "COL_NECROMANCERCAGE_DRAIN", _, _)
THEN
PROC_KnowledgeCheck_Clear(S_COL_NecromancerLab_PAD_RitualArea_c16720bf-5746-4f13-aa04-f683ee970393);
DB_COL_NecromancerLab_BeingDrained((CHARACTER)_Character);

IF
StatusRemoved(_Character, "COL_NECROMANCERCAGE_DRAIN", _, _)
THEN
NOT DB_COL_NecromancerLab_BeingDrained((CHARACTER)_Character);

IF
DB_COL_NecromancerLab_BeingDrained((CHARACTER)_Character)
AND
NOT DB_COL_NecromancerLab_AliveInCage(_Character, _)
THEN
RemoveStatus(_Character, "COL_NECROMANCERCAGE_DRAIN", NULL_00000000-0000-0000-0000-000000000000);

IF
DB_COL_NecromancerLab_BeingDrained(_Character)
AND
NOT DB_GlobalFlag(COL_NecromancerLab_State_CagesActive_ea613939-1e70-4641-b575-5287ce5209e2)
THEN
RemoveStatus(_Character, "COL_NECROMANCERCAGE_DRAIN", NULL_00000000-0000-0000-0000-000000000000);

IF
DestroyedBy(_Cage, _, _, _)
AND
DB_COL_NecromancerLab_CageWalls(_Cage, _Wall)
THEN
SetOnStage(_Wall, 0);

IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
AND
QRY_IsLargerThan((CHARACTER)_Character, (TAG)WEIGHT_MEDIUM_653cb906-38d1-4b80-b598-00b064efff3d)
THEN
Die(_Cage, DEATHTYPE.Physical, _Character, 0, 0, 10.0);

IF
TagSet(_Character, _Tag)
AND
DB_GLO_Sizes(_, _Tag)
AND
DB_COL_NecromancerLab_InCage((CHARACTER)_Character, _Cage)
AND
QRY_IsLargerThan((CHARACTER)_Character, (TAG)WEIGHT_MEDIUM_653cb906-38d1-4b80-b598-00b064efff3d)
THEN
Die(_Cage, DEATHTYPE.Physical, _Character, 0, 0, 10.0);

//Make any that contain players attackable by default

IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
THEN
SetFaction(_Cage, (FACTION)Act2_COL_GlassCages_53a14c15-3176-4642-9a84-eee4f4829048);

//END_REGION

//REGION Party State flags

// Keep track of whether any party members are in any cages at all.
IF
DB_COL_NecromancerLab_InCage(_Character, _Cage)
AND
DB_PartyMembers(_Character)
THEN
DB_COL_NecromancerLab_PartyMemberInCage(_Character, _Cage);

IF
DB_COL_NecromancerLab_PartyMemberInCage(_Character, _Cage)
AND
NOT DB_GlobalFlag(COL_NecromancerLab_State_SomeoneInCage_ef2db432-354a-4c81-8c8d-7a400473d638)
THEN
SetFlag(COL_NecromancerLab_State_PartyMemberInCage_ef2db432-354a-4c81-8c8d-7a400473d638, NULL_00000000-0000-0000-0000-000000000000, 0);

IF
DB_GlobalFlag(COL_NecromancerLab_State_PartyMemberInCage_ef2db432-354a-4c81-8c8d-7a400473d638)
AND
NOT DB_COL_NecromancerLab_PartyMemberInCage(_, _)
THEN
ClearFlag(COL_NecromancerLab_State_PartyMemberInCage_ef2db432-354a-4c81-8c8d-7a400473d638, NULL_00000000-0000-0000-0000-000000000000, 0);

//If there are any party members in cages, check if any of them are alive.
IF
DB_COL_NecromancerLab_PartyMemberInCage(_Character, _)
AND
DB_COL_NecromancerLab_AliveInCage(_Character,_)
THEN
DB_COL_NecromancerLab_PartyMemberAliveInCage(_Character);
SetFlag(COL_NecromancerLab_State_PartyMemberAliveInCage_e9ac1d5c-f4d2-4e3d-88f7-9e6d6230499f, NULL_00000000-0000-0000-0000-000000000000, 0);

IF
DB_COL_NecromancerLab_PartyMemberAliveInCage(_Character)
AND
NOT DB_COL_NecromancerLab_AliveInCage(_Character,_)
THEN
NOT DB_COL_NecromancerLab_PartyMemberAliveInCage(_Character);

IF
DB_GlobalFlag(COL_NecromancerLab_State_SomeoneAliveInCage_e9ac1d5c-f4d2-4e3d-88f7-9e6d6230499f)
AND
NOT DB_COL_NecromancerLab_PartyMemberAliveInCage(_)
THEN
ClearFlag(COL_NecromancerLab_State_PartyMemberAliveInCage_e9ac1d5c-f4d2-4e3d-88f7-9e6d6230499f, NULL_00000000-0000-0000-0000-000000000000, 0);


//Also check if there are any outside of cages.
//Really only relevant if the players were in the cages to begin with though.
IF
DB_COL_NecroLab_PartyEnteredColony(1)
AND
DB_PartyMembers(_Character)
AND
NOT DB_Defeated(_Character)
AND
NOT DB_COL_NecromancerLab_InCage(_Character, _)
THEN
SetFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103);

IF
DB_GlobalFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103)
AND
DB_Defeated(_Character)
AND
DB_PartyMembers((CHARACTER)_Character)
AND
NOT DB_COL_NecromancerLab_InCage(_Character, _)
AND
NOT QRY_COL_NecromancerLab_UndefeatedPartyMemberOutsideOfCage()
THEN
ClearFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103);

IF
DB_GlobalFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103)
AND
DB_PartyMembers((CHARACTER)_Character)
AND
DB_COL_NecromancerLab_InCage(_Character, _)
AND
NOT QRY_COL_NecromancerLab_UndefeatedPartyMemberOutsideOfCage()
THEN
ClearFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103);

QRY
QRY_COL_NecromancerLab_UndefeatedPartyMemberOutsideOfCage()
AND
DB_PartyMembers(_Character)
AND
NOT DB_Defeated(_Character)
AND
NOT DB_COL_NecromancerLab_InCage(_Character, _)
THEN
DB_NOOP(1);

//END_REGION

//REGION Behaviour
IF
FlagSet(COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89, NULL_00000000-0000-0000-0000-000000000000, _)
THEN
PROC_COL_NecromancerLab_FindLighter();

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_AllZombies(_Zombie)
AND
NOT DB_Defeated(_Zombie)
AND
NOT DB_CantMove(_Zombie)
AND
NOT DB_COL_NecromancerLab_InCage(_Zombie,_)
AND
NOT DB_COL_NecromancerLab_CombatState_ExcludeCharacters("Audience",_Zombie)
AND
IsOnStage(_Zombie,1)
THEN
DB_COL_NecromancerLab_AvailableZombies(_Zombie);

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_Candle(_Candle)
AND
NOT DB_COL_NecromancerLab_CandleToLight(_)
AND
HasAppliedStatus(_Candle,"BURNING",0)
THEN
DB_COL_NecromancerLab_CandleToLight(_Candle);

//Normally a new candle lighter shouldn't be looked for if all candles are lit
//but if something goes wrong we'll select a candle lighter anyway just so Balthazar
//doesn't get stuck in his "candle lighter selection" behaviour
PROC
PROC_COL_NecromancerLab_FindLighter()
AND
NOT DB_COL_NecromancerLab_CandleToLight(_)
THEN
DB_COL_NecromancerLab_CandleToLight(S_COL_NecromancerLab_Candle1_1f26256e-2cb9-45b4-ac80-dfd313081681);

//Get zombie closest to the next candle to be lit in the sequence
PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_CandleToLight(_Candle)
AND
DB_COL_NecromancerLab_AvailableZombies(_Zombie)
AND
GetDistanceTo(_Zombie,_Candle,_Distance)
THEN
DB_COL_NecromancerLab_ClosestZombie(_Zombie,_Distance);

IF
DB_COL_NecromancerLab_ClosestZombie(_ZombieA,_DistanceA)
AND
DB_COL_NecromancerLab_ClosestZombie(_ZombieB,_DistanceB)
AND
_DistanceA < _DistanceB
THEN
NOT DB_COL_NecromancerLab_ClosestZombie(_ZombieB,_DistanceB);

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_ClosestZombie(_Zombie,_Distance)
THEN
DB_COL_NecromancerLab_CandleLighter(_Zombie);
NOT DB_COL_NecromancerLab_ClosestZombie(_Zombie,_Distance);
SetFlag(COL_NecromancerLab_State_CandleLighter_91a2d6db-c58c-4b3d-94c6-99d39279133c, _Zombie, 0);
RequestSetSwarmGroup(_Zombie,"");

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_AvailableZombies(_Zombie)
THEN
NOT DB_COL_NecromancerLab_AvailableZombies(_Zombie);

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
DB_COL_NecromancerLab_CandleToLight(_Candle)
THEN
NOT DB_COL_NecromancerLab_CandleToLight(_Candle);

PROC
PROC_COL_NecromancerLab_FindLighter()
AND
NOT DB_COL_NecromancerLab_CandleLighter(_)
AND
DB_GlobalFlag(COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89)
THEN
ClearFlag(COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89);

PROC
PROC_StateSet_Defeated(_Lighter)
AND
DB_COL_NecromancerLab_CandleLighter((CHARACTER)_Lighter)
THEN
NOT DB_COL_NecromancerLab_CandleLighter(_Lighter);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighter_91a2d6db-c58c-4b3d-94c6-99d39279133c, _Lighter, 0);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89);

PROC
PROC_StateSet_CantMove(_Lighter)
AND
DB_COL_NecromancerLab_CandleLighter((CHARACTER)_Lighter)
THEN
NOT DB_COL_NecromancerLab_CandleLighter(_Lighter);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighter_91a2d6db-c58c-4b3d-94c6-99d39279133c, _Lighter, 0);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89);

IF
TagSet(_Character,(TAG)ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995)
AND
DB_COL_NecromancerLab_CandleLighter((CHARACTER)_Lighter)
THEN
NOT DB_COL_NecromancerLab_CandleLighter(_Lighter);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighter_91a2d6db-c58c-4b3d-94c6-99d39279133c, _Lighter, 0);
ClearFlag((FLAG)COL_NecromancerLab_State_CandleLighterChosen_de4d131d-72b4-4781-b077-4a7931409c89);

//Check whether any zombies or available for candle lighter selection (not dead - not in cage)
IF
TagSet(_Character,(TAG)ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

IF
TagCleared(_Character,(TAG)ACT2_COL_INNECROMANCERCAGE_eb6f9627-3093-497b-8d6b-d5b2f6fd8995)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

PROC
PROC_StateSet_Defeated(_Character)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

PROC
PROC_StateCleared_Defeated(_Character)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

PROC
PROC_StateSet_CantMove(_Character)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

PROC
PROC_StateCleared_CantMove(_Character)
AND
DB_COL_NecromancerLab_AllZombies((CHARACTER)_Character)
THEN
PROC_COL_NecromancerLab_CheckAvailableZombies();

PROC
PROC_COL_NecromancerLab_CheckAvailableZombies()
AND
NOT DB_GlobalFlag(COL_NecromancerLab_State_OutOfZombies_fed2eb36-1a0d-4f46-b58f-dceaa4990600)
AND
NOT QRY_COL_NecromancerLab_AnyAvailableZombie()
THEN
PROC_GlobalSetFlagAndCache(COL_NecromancerLab_State_OutOfZombies_fed2eb36-1a0d-4f46-b58f-dceaa4990600);

PROC
PROC_COL_NecromancerLab_CheckAvailableZombies()
AND
DB_GlobalFlag(COL_NecromancerLab_State_OutOfZombies_fed2eb36-1a0d-4f46-b58f-dceaa4990600)
AND
QRY_COL_NecromancerLab_AnyAvailableZombie()
THEN
PROC_GlobalClearFlagAndCache(COL_NecromancerLab_State_OutOfZombies_fed2eb36-1a0d-4f46-b58f-dceaa4990600);

QRY
QRY_COL_NecromancerLab_AnyAvailableZombie()
AND
DB_COL_NecromancerLab_AllZombies(_Character)
AND
NOT DB_Defeated(_Character)
AND
NOT DB_CantMove(_Character)
AND
NOT DB_COL_NecromancerLab_InCage(_Character,_)
THEN
DB_NOOP(1);

//END_REGION

//REGION Zombie idle swarm groups

PROC
PROC_COL_NecromancerLab_ResetZombieSwarmGroup((CHARACTER)_Zombie)
AND
DB_COL_NecromancerLab_Candidates(_Zombie,_,_SwarmGroupID,_)
THEN
RequestSetSwarmGroup(_Zombie,_SwarmGroupID);

PROC
PROC_COL_NecromancerLab_ResetZombieSwarmGroup((CHARACTER)_Zombie)
AND
DB_COL_NecromancerLab_ReplaceableZombies(_Zombie,_SwarmGroupID,_)
THEN
RequestSetSwarmGroup(_Zombie,_SwarmGroupID);

PROC
PROC_COL_NecromancerLab_ResetZombieSwarmGroup((CHARACTER)_Zombie)
AND
NOT DB_COL_NecromancerLab_Candidates(_Zombie,_,_,_)
AND
NOT DB_COL_NecromancerLab_ReplaceableZombies(_Zombie,_,_)
THEN
RequestSetSwarmGroup(_Zombie,"COL_NecroLab_Zombies");

IF
DB_COL_NecromancerLab_AllZombies(_Zombie)
AND
NOT DB_COL_NecromancerLab_CandleLighter(_Zombie)
THEN
PROC_COL_NecromancerLab_ResetZombieSwarmGroup(_Zombie);

IF
DB_COL_NecromancerLab_CandleLighter(_Zombie)
AND
DB_GlobalFlag(COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103)
AND
NOT DB_GlobalFlag(COL_NecromancerLab_State_PartyMemberAliveInCage_e9ac1d5c-f4d2-4e3d-88f7-9e6d6230499f)
THEN
PROC_COL_NecromancerLab_ResetZombieSwarmGroup((CHARACTER)_Zombie);

//END_REGION

//REGION Minions can fight

IF
DB_COL_NecromancerLab_Skeletons(_Character)
THEN
DB_COL_NecromancerLab_AllMinions(_Character);

IF
DB_COL_NecromancerLab_AllZombies(_Character)
THEN
DB_AD_Dialog(_Character,(DIALOGRESOURCE)COL_NecromancerLab_AD_Zombie_2d7fb091-4301-9fab-832e-596ba0db13b0);
DB_COL_NecromancerLab_AllMinions(_Character);

//Can fight if candle lighter and character is not in cage
IF
DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character)
AND
DB_COL_NecromancerLab_CandleLighter(_Character)
AND
NOT DB_COL_NecromancerLab_InCage(_Character,_)
THEN
NOT DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character);
PROC_SetCanFight(_Character,1);
SetCanJoinCombat(_Character,1);

//Can fight if any party member out of cage and character is not in cage
IF
DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character)
AND
DB_GlobalFlag((FLAG)COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103)
AND
NOT DB_COL_NecromancerLab_InCage(_Character,_)
THEN
NOT DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character);
PROC_SetCanFight(_Character,1);
SetCanJoinCombat(_Character,1);

//Can no longer fight if in cage
IF
DB_COL_NecromancerLab_AllMinions(_Character)
AND
DB_COL_NecromancerLab_InCage(_Character,_)
AND
NOT DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character)
THEN
DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character);
PROC_SetCanFight(_Character,0);
SetCanJoinCombat(_Character,0);

//Can no longer fight if all party members in cage and not the candle lighter
IF
DB_COL_NecromancerLab_AllMinions(_Character)
AND
NOT DB_GlobalFlag((FLAG)COL_NecromancerLab_State_PartyMemberOutsideOfCage_92a091f7-905c-4ee2-9b24-81bef628f103)
AND
NOT DB_COL_NecromancerLab_CandleLighter(_Character)
AND
NOT DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character)
THEN
DB_COL_NecromancerLab_MinionCantFight((CHARACTER)_Character);
PROC_SetCanFight(_Character,0);
SetCanJoinCombat(_Character,0);

//END_REGION

//ASSAULT ROUTE
//REGION Assault Route setup

//Assault route, but Balthazar died
PROC
PROC_COL_TeleportPartiesToColony(0)
AND
DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
THEN
PROC_COL_NecromancerLab_SetCombatState("Assault_NecromancerDead");

PROC
PROC_COL_TeleportPartiesToColony(0)
AND
DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
AND
DB_COL_NecromancerLab_AllZombies(_Zombie) //only three original zombies at this point
AND
DB_Dead(_Zombie)
THEN
Resurrect(_Zombie, NULL_00000000-0000-0000-0000-000000000000, 1);

PROC
PROC_COL_TeleportPartiesToColony(0)
AND
DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
THEN
PROC_SetRelationToPlayers((FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a,0);

//Only set if Balthazar is alive
PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
AND
QRY_OnlyOnce("COL_NecromancerLab_AssaultSetup")
THEN
PROC_COL_NecromancerLab_SetupCandidates();
DB_Dialogs(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d,COL_Necromancer_EnterRoom_4a0dac77-7353-2b21-bfa8-2968bb43d702);

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
AND
DB_COL_NecromancerLab_CageTrigger(_,_Cage)
THEN
SetOwner(_Cage,(CHARACTER)S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
THEN
PROC_COL_NecromancerLab_SetCombatState("Assault_NecromancerAlive");
PROC_SetRelationToPlayers((FACTION)Act2_COL_NecromancerRoom_266191d5-8366-45d4-baed-57e6913cbb8a,50);

//Skill check on ritual if you haven't seen it from the inside.

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
THEN
DB_KnowledgeCheckTrigger_AD("COL_NecromancerLab_PAD_RitualArea", S_COL_NecromancerLab_PAD_RitualArea_c16720bf-5746-4f13-aa04-f683ee970393, "Arcana", (DIFFICULTYCLASS)HiddenPerception_Hard_33cb7d74-7b51-4e5c-91ed-ff18cb8553bc, (DIALOGRESOURCE)COL_NecromancerLab_PAD_RitualArea_db70daaf-ccb6-4be4-d464-7f2f42eaf7de, (FLAG)COL_NecromancerLab_State_PassedRitualArcana_6a732d07-36fd-9d78-9f09-14227c10625b);

IF
DB_COL_NecromancerLab_AssaultZombies(_Zombie)
THEN
SetOnStage(_Zombie,0);

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
AND
DB_COL_NecromancerLab_AssaultZombies(_Zombie)
THEN
SetOnStage(_Zombie,1);
DB_COL_NecromancerLab_AllZombies(_Zombie);
NOT DB_COL_NecromancerLab_AssaultZombies(_Zombie);

//END_REGION

//REGION Set up dialogue if player came from the other side (waking up dialogue can be done in the arrival one).

PROC
PROC_COL_TeleportPartiesToColony(0)
AND
NOT DB_Defeated(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d)
THEN
PROC_SceneOver("SHA_Necromancer_MeetingNecromancer");
PROC_State_Progress(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "SHA_Necromancer", "SHA_Necromancer_State_AtMoonrise");
PROC_COL_NecromancerLab_SetAssaultRoute();

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
THEN
DB_TrespassTrigger(S_COL_NecromancerRoom_TrespassTrigger_869e7367-c355-4e1c-9132-afc6d1d071c1, NULL_00000000-0000-0000-0000-000000000000, "COL_NecromancerRoom_Trespass");
DB_SpotPlayers(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "COL_NecromancerLab", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
DB_SpotPlayers_SpotTrigger(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, "COL_NecromancerLab", S_COL_NecromancerRoom_SpotTrigger_5f8bfda3-ec18-45cc-8c79-0a380713012c);

IF
FlagSet((FLAG)COL_NecromancerLab_State_PretendedToBeThralls_1bf3844f-74be-431b-a01e-d22d2a4f4285,_,_)
THEN
PROC_RemoveDBTrespassTrigger(S_COL_NecromancerRoom_TrespassTrigger_869e7367-c355-4e1c-9132-afc6d1d071c1);

//Peaceful resolution XP
IF
FlagSet((FLAG)COL_NecromancerLab_State_PretendedToBeThralls_1bf3844f-74be-431b-a01e-d22d2a4f4285,_,_)
THEN
PROC_PeacefulResolve(S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d);

IF
FlagSet((FLAG)COL_NecromancerLab_State_PretendedToBeThralls_1bf3844f-74be-431b-a01e-d22d2a4f4285,_,_)
AND
DB_COL_NecromancerLab_AllMinions(_Character)
AND
NOT DB_PermaDefeated(_Character)
AND
IsOnStage(_Character,1)
THEN
PROC_PeacefulResolve(_Character);

PROC
PROC_COL_NecromancerLab_SetAssaultRoute()
AND
DB_COL_NecromancerLab_AllZombies(_NPC)
THEN
DB_SpotPlayers(_NPC, "COL_NecromancerLab", NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000);
DB_SpotPlayers_SpotTrigger(_NPC, "COL_NecromancerLab", S_COL_NecromancerRoom_SpotTrigger_5f8bfda3-ec18-45cc-8c79-0a380713012c);

PROC
PROC_SpotPlayers_Spotted(_NPC, "COL_NecromancerLab", _Player)
AND
NOT DB_DialogName((DIALOGRESOURCE)COL_Necromancer_EnterRoom_4a0dac77-7353-2b21-bfa8-2968bb43d702, _)
AND
NOT DB_COL_NecromancerLab_StartingDialog(1)
AND
QRY_StartDialog((DIALOGRESOURCE)COL_Necromancer_EnterRoom_4a0dac77-7353-2b21-bfa8-2968bb43d702, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player)
THEN
PROC_SpotPlayers_StopSpotting("COL_NecromancerLab");

PROC
PROC_DialogFlagSetup((DIALOGRESOURCE)COL_Necromancer_EnterRoom_4a0dac77-7353-2b21-bfa8-2968bb43d702, S_SHA_Necromancer_53651a9f-7ea8-444f-ba2d-224390b72f7d, _Player)
THEN
DB_COL_NecromancerLab_StartingDialog(1);

IF
DB_DialogName((DIALOGRESOURCE)COL_Necromancer_EnterRoom_4a0dac77-7353-2b21-bfa8-2968bb43d702, _)
AND
DB_COL_NecromancerLab_StartingDialog(1)
THEN
NOT DB_COL_NecromancerLab_StartingDialog(1);

//END_REGION

//OTHER
//REGION Mol's Eyepatch
IF
AddedTo(S_COL_NecromancerLab_MolEyepatch_fa9baba1-f855-449c-8327-9728a493b193, (CHARACTER)_Player,_)
AND
DB_Players(_Player)
AND
NOT DB_Is_InCombat(_Player,_)
AND
NOT DB_OnlyOnce("COL_NecromancerLab_PAD_MolEyepatch")
AND
QRY_StartDialog_Fixed(COL_Necromancer_PAD_MolEyepatch_4a3dcc65-95be-8f37-0e4e-12a54d6b09e4,_Player)
THEN
DB_OnlyOnce("COL_NecromancerLab_PAD_MolEyepatch");

PROC
PROC_COL_TeleportPartiesToColony(_)
AND
DB_PermaDefeated(S_DEN_ThiefHideoutLeader_c8ab1ca6-96bb-467e-91c9-af87bc4d3925)
THEN
SetOnStage(S_COL_NecromancerLab_MolEyepatch_fa9baba1-f855-449c-8327-9728a493b193,0);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act2"
