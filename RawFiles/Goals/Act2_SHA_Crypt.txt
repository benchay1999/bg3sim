Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_000_7d771e1b-1af2-47c8-990d-068b2ad2306c);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_003_4eeecd3b-3b89-4cd4-afa9-40f6938030d2); 
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_001_191f7674-fdc4-4ff0-aba8-11580dbdeaa7);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_002_112df3ce-c723-4ca0-9db7-3dd9965e0457);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_004_1a44c72a-28d1-4b1a-863a-494305e2effe);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_005_336fc292-489d-4e3c-a5f1-82ae94e88f22);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_006_fb58a37e-5b52-431d-a9de-928f5a6cb43b);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_008_d30918bb-059a-4a8d-bdb7-2c12a1745dba);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_009_84869eeb-bf98-4345-af18-0a857dbfe4cd);
DB_SHA_Crypt_FireTrapPoint((ITEM)S_SHA_Crypt_FireGasPit_010_cadf8a0b-0250-4d1c-b65e-7922bcb4bc52);

DB_SHA_Crypt_Door((ITEM)S_SHA_Crypt_DoorToChurch_6c50da0e-9302-4be5-8ca8-43679c4fdd91);
DB_SHA_Crypt_Door((ITEM)S_SHA_Crypt_DoorToWestCrypt_220e44f0-85df-40d1-9519-404837d84ce8);
DB_SHA_Crypt_Door((ITEM)S_SHA_Crypt_DoorToEntrance_3d4acec6-19bb-4861-8eb1-969ed2a8b7a6);

PROC_TriggerRegisterForPlayers((TRIGGER)S_SHA_Crypt_TrapArea_8beb2e82-4b55-4f31-a8cd-31552cf45dd0);


//REGION Rings puzzle
// Outer ring
DB_SHA_Crypt_Rings((TRIGGER)S_SHA_EntrancePuzzle_OuterRing_Danger_223e669e-e9f6-4df4-8dec-3b0a8705c829);
// Inner ring
DB_SHA_Crypt_Rings((TRIGGER)S_SHA_EntrancePuzzle_InnerRing_Danger_2f063d51-9528-40da-be8d-55e16746e129);

DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_000_58c09ab7-9432-4f1a-b726-2aceee9cb889);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_005_f7f55fcd-1652-41cf-9839-be71d6629824);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_001_81c03bd9-cd59-41a6-bed4-3cfc80bb55df);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_007_fd3092a7-afc5-4c19-82ff-cda76768c7aa);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_004_17f6b99f-c035-468c-a588-213f0d907ae7);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_006_a214118f-11d8-467a-9b33-dbef575cff92);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_003_27ec8d95-d780-4245-b346-b0d4ebda6f3f);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_InnerRing",(ITEM) S_SHA_Crypt_InnerLightDetector_002_0a99cd21-6313-4744-8664-fcfc760c79cf);
DB_SHA_EntrancePuzzle_RingVisible("SHA_InnerRing", 1);

DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_000_22da5b91-df46-4c4b-a28d-ef14c14bfd7c);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_001_3866247e-3e33-4f14-abe9-7ea5363e15a6);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_002_30a94eaa-357f-46f2-9ec7-525975936909);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_003_1de7078e-6e3c-4ad0-879b-c17ff5cb66cf);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_004_922fafbc-e197-400d-b943-66b44853e115);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_005_9d47effb-75c3-4ebf-9408-6f1c3ffcacef);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_006_ad2b4d59-48ba-4cf9-be35-5b5767e12583);
DB_SHA_EntrancePuzzle_LightDetectors("SHA_OuterRing",(ITEM) S_SHA_Crypt_OuterLightDetector_007_81d4a911-95c3-4aea-bff0-c47a28ec6973);
DB_SHA_EntrancePuzzle_RingVisible("SHA_OuterRing", 0);

DB_SHA_EntrancePuzzle_RingsVFX("SHA_InnerRing", (EFFECTRESOURCE)VFX_Script_SHA_Forcefield_Inner_01_59f36fd7-fdbe-e30d-b4c0-47f8560abd02, (FLAG)SHA_Crypt_State_InnerRingVisible_0b05bc9e-c819-4a79-93d9-1d9fbe89616b);
DB_SHA_EntrancePuzzle_RingsVFX("SHA_OuterRing", (EFFECTRESOURCE)VFX_Script_SHA_Forcefield_Outer_01_d550c5d2-6a3e-6a98-0094-d64d9f81b719, (FLAG)SHA_Crypt_State_OuterRingVisible_62901c14-3de5-4fb0-8892-b495c5de3ffe);

ApplyStatus(S_SHA_Crypt_DoorToChurch_6c50da0e-9302-4be5-8ca8-43679c4fdd91, "ARCANE_LOCK", -1.0, 1);

//DB_SHA_EntrancePuzzle_Braziers(_Corner, _Brazier, _UpPos, _DownPos);
DB_SHA_EntrancePuzzle_Braziers("SW", (ITEM)S_SHA_EntranceBrazier_000_442eae3d-938b-4a0f-a5b4-cc7105d9196f, (TRIGGER)S_SHA_EntranceBrazier_000_Up_f80e166c-6d52-4b2f-83d5-388dcc4759bf, (TRIGGER)S_SHA_EntranceBrazier_000_Down_11658557-1995-4387-8e83-8937904ef98a);
DB_SHA_EntrancePuzzle_Braziers("SW", (ITEM)S_SHA_EntranceBrazier_001_85693e75-167d-4bf0-a239-2bd3a9e53086, (TRIGGER)S_SHA_EntranceBrazier_001_Up_b4df95a4-a7f1-4ecd-a426-8f264382fa3a, (TRIGGER)S_SHA_EntranceBrazier_001_Down_effe0def-6794-48fd-9803-272d278a078e);
DB_SHA_EntrancePuzzle_Braziers("NW", (ITEM)S_SHA_EntranceBrazier_002_81be976e-f569-4dee-a2ce-22688d3efc5b, (TRIGGER)S_SHA_EntranceBrazier_002_Up_2ac0c276-a670-4e03-a394-0961df5c8de1, (TRIGGER)S_SHA_EntranceBrazier_002_Down_4f11db50-5560-4539-915a-da2f4b5f0438);
DB_SHA_EntrancePuzzle_Braziers("NW", (ITEM)S_SHA_EntranceBrazier_003_66eb598a-86c3-4b9f-858f-9dc20119b6c8, (TRIGGER)S_SHA_EntranceBrazier_003_Up_fb8d4d17-0e9d-495d-8da7-ce3201401fbf, (TRIGGER)S_SHA_EntranceBrazier_003_Down_87f75ae2-0007-4578-9a0c-36e7fd69c408);
DB_SHA_EntrancePuzzle_Braziers("NE", (ITEM)S_SHA_EntranceBrazier_004_ce619660-f7f1-4dbc-9210-2f54fe67c836, (TRIGGER)S_SHA_EntranceBrazier_004_Up_c455fc62-71c6-4779-8765-cdf3ec3b0c3c, (TRIGGER)S_SHA_EntranceBrazier_004_Down_7e316a18-b8c8-49da-8eca-973ee78c212f);
DB_SHA_EntrancePuzzle_Braziers("NE", (ITEM)S_SHA_EntranceBrazier_005_3a50229c-e549-4620-be2e-dc2b2318cb28, (TRIGGER)S_SHA_EntranceBrazier_005_Up_d833d13b-3349-4a1f-b050-4d8613fac016, (TRIGGER)S_SHA_EntranceBrazier_005_Down_2e9fba1b-26cc-4782-8303-0d357c7feb59);
DB_SHA_EntrancePuzzle_Braziers("SE", (ITEM)S_SHA_EntranceBrazier_006_704acdde-4b9d-4ba2-9de6-f41c0e5c2dc3, (TRIGGER)S_SHA_EntranceBrazier_006_Up_53453a93-ad51-4f39-9f63-5ee9348f9671, (TRIGGER)S_SHA_EntranceBrazier_006_Down_2f8a458d-5f94-493f-aa55-0cf2c960f5f8);
DB_SHA_EntrancePuzzle_Braziers("SE", (ITEM)S_SHA_EntranceBrazier_007_2731e0a1-9386-49a4-9593-3b7599185db4, (TRIGGER)S_SHA_EntranceBrazier_007_Up_c678fabf-388a-47fe-b8b3-c32b3b5a9873, (TRIGGER)S_SHA_EntranceBrazier_007_Down_cee915c7-6f80-4fde-a9fb-8cde8274723f);

// DB_SHA_EntrancePuzzle_BrazierEvents(_UpEvent, _DownEvent, _Corner);
DB_SHA_EntrancePuzzle_BrazierEvents("SHA_Braziers_Up_SW", "SHA_Braziers_Down_SW", "SW");
DB_SHA_EntrancePuzzle_BrazierEvents("SHA_Braziers_Up_NW", "SHA_Braziers_Down_NW", "NW");
DB_SHA_EntrancePuzzle_BrazierEvents("SHA_Braziers_Up_NE", "SHA_Braziers_Down_NE", "NE");
DB_SHA_EntrancePuzzle_BrazierEvents("SHA_Braziers_Up_SE", "SHA_Braziers_Down_SE", "SE");

//END_REGION Rings puzzle

DB_OneShotPlayerTrigger((TRIGGER)S_SHA_Crypt_StatueReaction_341e6e88-a97b-484f-bc8c-2963adcfe13a);

DB_ItemDialog_NarratorAD((ITEM)S_SHA_Entrance_KethericPlaque_000_6dbdde85-3d70-4d51-95e4-9d3649712798,SHA_AD_OathPlaque2_95476455-8175-2560-a648-baee9027e405);
DB_ItemDialog_NarratorAD((ITEM)S_SHA_Entrance_KethericPlaque_fa15b25e-6c61-4aa2-85a9-117bcc1e34a2,SHA_AD_OathPlaque_c585b939-a93b-b36a-d273-cc6b7387876b);
DB_ItemDialog_NarratorAD((ITEM)S_SHA_Entrance_SharPlaque_5c2be9ee-7fce-47c9-a5ab-03a2adf6c50d,SHA_AD_EntranceSharPlaque_3b7c296e-d165-6f52-1d11-b1e927451495);
KBSECTION
//REGION Debug Events
IF
TextEvent("cryptfire")
AND
DB_SHA_Crypt_FireTrapPoint(_GasPit)
THEN
SetDualEntityEvent(NULL_00000000-0000-0000-0000-000000000000, _GasPit, "SHA_CryptTrap_On");

IF
TextEvent("cryptfireremove1")
AND
DB_SHA_Crypt_FireTrapPoint(_GasPit)
THEN
SetDualEntityEvent(NULL_00000000-0000-0000-0000-000000000000, _GasPit, "SHA_CryptTrap_Off");

//END_REGION

//REGION Statue reaction

PROC
PROC_OneShotTriggerEntered(_Player,S_SHA_Crypt_StatueReaction_341e6e88-a97b-484f-bc8c-2963adcfe13a)
THEN
PROC_TryStartAD((DIALOGRESOURCE)SHA_TrapJunction_AD_AlarmStatues_74b4194c-6ca1-6668-a946-1caf39cfc34b,(ITEM)S_SHA_VoiceOfShar_EntranceVoice_a386e1ac-3650-4460-8c29-c910218e4ac4);

//END_REGION

//REGION Trap Trigger
IF
DualEntityEvent(_EntityTrigger, _, "SHA_Crypt_Switch1_On")
AND
NOT DB_SHA_Crypt_BlockFireTrap(1)
THEN
PROC_SHA_Crypt_TriggerTrap(_EntityTrigger);

PROC
PROC_SHA_Crypt_TriggerTrap((GUIDSTRING)_EntityTrigger)
AND
NOT DB_SHA_Crypt_TrapStarted(1)
AND
QRY_SHA_Crypt_TryStartTrapFTB(_EntityTrigger)
THEN
PROC_SHA_Crypt_LockDoors();
PROC_SHA_Crypt_FloodWithFire();
ObjectTimerLaunch(S_SHA_Crypt_TrapDefuser_03ba50b7-b34d-4416-9e90-72d6d8bb08c4, "SHA_Crypt_FloodTimeout", 24000);
DB_SHA_Crypt_TrapStarted(1);
PROC_TryStartAD((DIALOGRESOURCE)SHA_TrapJunction_AD_AlarmStatues_74b4194c-6ca1-6668-a946-1caf39cfc34b,(ITEM)S_SHA_VoiceOfShar_EntranceVoice_a386e1ac-3650-4460-8c29-c910218e4ac4);

QRY
QRY_SHA_Crypt_TryStartTrapFTB((GUIDSTRING)_Player)
THEN
DB_NOOP(1);

// Player case
QRY
QRY_SHA_Crypt_TryStartTrapFTB((GUIDSTRING)_Player)
AND
NOT DB_SHA_Crypt_TrapStarted(1)
AND
QRY_SHA_Crypt_TrapTriggeredByPlayer(_Player)
AND
IsInForceTurnBasedMode((CHARACTER)_Player, 0)
THEN
ForceTurnBasedMode((CHARACTER)_Player, 1);

// Non-player case
QRY
QRY_SHA_Crypt_TryStartTrapFTB((GUIDSTRING)_OtherEntity)
AND
NOT DB_SHA_Crypt_TrapStarted(1)
AND
NOT QRY_SHA_Crypt_TrapTriggeredByPlayer(_OtherEntity)
AND
GetClosestAlivePlayer(_OtherEntity, _Player, _Dist)
AND
_Dist < 30.0
AND
IsInForceTurnBasedMode(_Player, 0)
THEN
ForceTurnBasedMode(_Player, 1);

QRY
QRY_SHA_Crypt_TrapTriggeredByPlayer((GUIDSTRING)_Entity)
AND
IsCharacter(_Entity, 1)
AND
DB_Players((CHARACTER)_Entity)
THEN
DB_NOOP(1);

//Save previous state of the doors.
PROC
PROC_SHA_Crypt_LockDoors()
AND
DB_SHA_Crypt_Door(_Door)
AND
IsClosed(_Door, 1)
THEN
DB_SHA_Crypt_DoorsPreviousState(_Door, "closed");

// If the door opens while the trap is active then remove it from the DB
IF
Opened(_Door)
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "closed")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "closed");

// If the door opens while the trap is active then remove it from the DB
IF
Closed(_Door)
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "open")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "open");

PROC
PROC_SHA_Crypt_LockDoors()
AND
DB_SHA_Crypt_Door(_Door)
AND
IsClosed(_Door, 0)
THEN
DB_SHA_Crypt_DoorsPreviousState(_Door, "open");

PROC
PROC_SHA_Crypt_LockDoors()
AND
DB_SHA_Crypt_Door(_Door)
AND
IsLocked(_Door, 1)
THEN
DB_SHA_Crypt_DoorsPreviousState(_Door, "locked");

// If the door unlocks while the trap is active then remove it from the DB
IF
Unlocked(_Door, _, _)
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "locked")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "locked");

PROC
PROC_SHA_Crypt_LockDoors()
AND
DB_SHA_Crypt_Door(_Door)
AND
IsLocked(_Door, 0)
THEN
DB_SHA_Crypt_DoorsPreviousState(_Door, "unlocked");

PROC
PROC_SHA_Crypt_LockDoors()
AND
DB_SHA_Crypt_Door(_Door)
THEN
PROC_ItemCloseAndLock(_Door, "storylock");

PROC
PROC_SHA_Crypt_FloodWithFire()
AND
DB_SHA_Crypt_FireTrapPoint(_GasPit)
THEN
SetDualEntityEvent(NULL_00000000-0000-0000-0000-000000000000, _GasPit, "SHA_CryptTrap_On");
//END_REGION

//REGION Trap Ends
IF
ObjectTimerFinished(_, "SHA_Crypt_FloodTimeout")
AND
DB_SHA_Crypt_TrapStarted(1)
THEN
PROC_SHA_Crypt_EndTrap();

IF
Opened(_CryptDoor)
AND
DB_SHA_Crypt_Door(_CryptDoor)
AND
DB_SHA_Crypt_TrapStarted(1)
THEN
PROC_SHA_Crypt_EndTrap();

PROC
PROC_SHA_Crypt_EndTrap()
THEN
NOT DB_SHA_Crypt_TrapStarted(1);
SetFlag((FLAG)SHA_Crypt_State_TrapFinished_d042eb9d-d346-4543-8701-25cf152b1d22, NULL_00000000-0000-0000-0000-000000000000);
PROC_SHA_Crypt_RestoreDoorsState();

PROC
PROC_SHA_Crypt_EndTrap()
AND
DB_SHA_Crypt_FireTrapPoint(_GasPit)
THEN
SetDualEntityEvent(NULL_00000000-0000-0000-0000-000000000000, _GasPit, "SHA_CryptTrap_Off");

PROC
PROC_SHA_Crypt_RestoreDoorsState()
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "locked")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "locked"); // Door already locked, no need to do anything.

PROC
PROC_SHA_Crypt_RestoreDoorsState()
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "unlocked")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "unlocked");
Unlock(_Door);

PROC
PROC_SHA_Crypt_RestoreDoorsState()
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "closed")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "closed"); // Door already closed, no need to do anything.

PROC
PROC_SHA_Crypt_RestoreDoorsState()
AND
DB_SHA_Crypt_DoorsPreviousState(_Door, "open")
THEN
NOT DB_SHA_Crypt_DoorsPreviousState(_Door, "open");
Open(_Door);

PROC
PROC_SHA_Crypt_EndTrap()
THEN
TimerLaunch("SHA_Crypt_RemoveEmbers",10000);

IF
TimerFinished("SHA_Crypt_RemoveEmbers")
AND
DB_SHA_Crypt_FireTrapPoint(_GasPit)
THEN
SetDualEntityEvent(NULL_00000000-0000-0000-0000-000000000000, _GasPit, "SHA_CryptTrap_Off");

IF
DualEntityEvent(_, _, "SHA_Crypt_Switch2_On")
THEN
PROC_SHA_Crypt_DisableRings();
//END_REGION

//REGION Braziers
IF
DualEntityEvent(_, _, _Event)
AND
DB_SHA_EntrancePuzzle_BrazierEvents(_Event, _, _Corner)
AND
DB_SHA_EntrancePuzzle_Braziers(_Corner, _Brazier, _UpPos, _)
THEN
ItemMoveTo(_Brazier, _UpPos, 1.0, 0.0, 0, "SHA_Crypt_BrazierMoved", 1);
PROC_SHA_Crypt_BrazierSound((ITEM)_Brazier);

IF
DualEntityEvent(_, _, _Event)
AND
DB_SHA_EntrancePuzzle_BrazierEvents(_, _Event, _Corner)
AND
DB_SHA_EntrancePuzzle_Braziers(_Corner, _Brazier, _, _DownPos)
THEN
ItemMoveTo(_Brazier, _DownPos, 1.0, 0.0, 0, "SHA_Crypt_BrazierMoved", 1);
PROC_SHA_Crypt_BrazierSound((ITEM)_Brazier);

PROC
PROC_SHA_Crypt_BrazierSound((ITEM)_Brazier)
AND
DB_SHA_Crypt_BrazierMoving((ITEM)_Brazier)
THEN
PlaySound(_Brazier, "SHA_Crypt_BrazierMoveStopped");

PROC
PROC_SHA_Crypt_BrazierSound((ITEM)_Brazier)
THEN
DB_SHA_Crypt_BrazierMoving((ITEM)_Brazier);
PlaySound(_Brazier, "SHA_Crypt_BrazierMoving");

IF
EntityEvent(_Brazier, "SHA_Crypt_BrazierMoved")
AND
DB_SHA_EntrancePuzzle_Braziers(_, (ITEM)_Brazier, _, _)
THEN
PlaySound(_Brazier, "SHA_Crypt_BrazierMoveStopped");

IF
EntityEvent(_Brazier, "SHA_Crypt_BrazierMoved")
AND
DB_SHA_Crypt_BrazierMoving((ITEM)_Brazier)
THEN
NOT DB_SHA_Crypt_BrazierMoving((ITEM)_Brazier);

//END_REGION

//REGION Rings prototype

IF
EnteredTrigger(_Char, S_SHA_EntrancePuzzle_RingArea_abd85d77-d053-4187-b76c-6fbe35ee9902)
AND
DB_SHA_Crypt_Rings(_DangerTrigger)
THEN
TriggerRegisterForCharacter(_DangerTrigger, _Char);

IF
LeftTrigger(_Char, S_SHA_EntrancePuzzle_RingArea_abd85d77-d053-4187-b76c-6fbe35ee9902)
AND
DB_SHA_Crypt_Rings(_DangerTrigger)
THEN
TriggerUnregisterForCharacter(_DangerTrigger, _Char);

IF
EnteredTrigger(_Char, _Ring)
AND
NOT DB_SHA_Crypt_RingsDisabled(1)
AND
DB_SHA_Crypt_Rings(_Ring)
AND
NOT DB_SHA_Crypt_BlockExplosionFor(_Char)
THEN
RealtimeObjectTimerLaunch(_Char, "SHA_Rings_Explosion", 4000); // Dirty hack because characters are entering twice even when they are not in the trigger.
DB_SHA_Crypt_BlockExplosionFor(_Char);
DB_SHA_Crypt_PushedBy(_Char, _Ring);
CreateExplosion(S_SHA_EntrancePuzzle_PushBackOrigin_6033bf61-df5e-44e8-b387-217513235179, "Projectile_SHA_EntrancePuzzle_RingPushBack", -1, S_SHA_Crypt_TrapDefuser_03ba50b7-b34d-4416-9e90-72d6d8bb08c4);

IF
ObjectTimerFinished((CHARACTER)_Char, "SHA_Rings_Explosion")
THEN
NOT DB_SHA_Crypt_BlockExplosionFor(_Char);

IF
ObjectTimerFinished((CHARACTER)_Char, "SHA_Rings_Explosion")
AND
DB_SHA_Crypt_PushedBy(_Char, _Ring)
THEN
NOT DB_SHA_Crypt_PushedBy(_Char, _Ring);
PROC_SHA_Crypt_ReactToPushBack(_Char, _Ring);

PROC
PROC_SHA_Crypt_SetVisible(_, 1)
AND
DB_Players(_Player)
AND
IsInTrigger(_Player, (TRIGGER)S_SHA_EntrancePuzzle_RingArea_abd85d77-d053-4187-b76c-6fbe35ee9902, 1)
THEN
SetFlag((FLAG)SHA_Crypt_Event_SawRing_c986cc79-9b25-49f6-82fb-5be33473f830, NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_SHA_Crypt_ReactToPushBack((CHARACTER)_Player, (TRIGGER)_Ring)
THEN
ClearFlag((FLAG)SHA_Crypt_Event_PushedByInnerRing_9859cf09-c25f-45c9-814d-6f23dc8d102d, _Player);
ClearFlag((FLAG)SHA_Crypt_Event_PushedByOuterRing_5c6a7dfd-edc6-4704-8a03-3fbab093b235, _Player);

PROC
PROC_SHA_Crypt_ReactToPushBack((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_InnerRing_Danger_2f063d51-9528-40da-be8d-55e16746e129)
AND
DB_Players(_Player)
AND
QRY_OnlyOnceForNearbyPlayers_Timeout(_Player, "SHA_ReactedToPushBack", 10000) // To avoid spamming PAD
AND
NOT QRY_SHA_Crypt_ReactToPushBack_ShadowheartAvailable((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_InnerRing_Danger_2f063d51-9528-40da-be8d-55e16746e129)
THEN
SetFlag((FLAG)SHA_Crypt_Event_PushedByInnerRing_9859cf09-c25f-45c9-814d-6f23dc8d102d, _Player);
PROC_TryStartAD((DIALOGRESOURCE)SHA_Crypt_PAD_PushedByRing_feaa1fcd-14e7-5878-97b7-72e49b574450, _Player);

PROC
PROC_SHA_Crypt_ReactToPushBack((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_OuterRing_Danger_223e669e-e9f6-4df4-8dec-3b0a8705c829)
AND
DB_Players(_Player)
AND
QRY_OnlyOnceForNearbyPlayers_Timeout(_Player, "SHA_ReactedToPushBack", 10000) // To avoid spamming PAD
AND
NOT QRY_SHA_Crypt_ReactToPushBack_ShadowheartAvailable((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_OuterRing_Danger_223e669e-e9f6-4df4-8dec-3b0a8705c829)
THEN
SetFlag((FLAG)SHA_Crypt_Event_PushedByOuterRing_5c6a7dfd-edc6-4704-8a03-3fbab093b235, _Player);
PROC_TryStartAD((DIALOGRESOURCE)SHA_Crypt_PAD_PushedByRing_feaa1fcd-14e7-5878-97b7-72e49b574450, _Player);

QRY
QRY_SHA_Crypt_ReactToPushBack_ShadowheartAvailable((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_InnerRing_Danger_2f063d51-9528-40da-be8d-55e16746e129)
AND
_Player != S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679
AND
QRY_SpeakerIsAvailableAndInDialogRange(S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679, _Player)
THEN
SetFlag((FLAG)SHA_Crypt_Event_PushedByInnerRing_9859cf09-c25f-45c9-814d-6f23dc8d102d, _Player);
PROC_TryStartAD((DIALOGRESOURCE)SHA_Crypt_PAD_PushedByRing_feaa1fcd-14e7-5878-97b7-72e49b574450, _Player, S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679);

QRY
QRY_SHA_Crypt_ReactToPushBack_ShadowheartAvailable((CHARACTER)_Player, (TRIGGER)S_SHA_EntrancePuzzle_OuterRing_Danger_223e669e-e9f6-4df4-8dec-3b0a8705c829)
AND
_Player != S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679
AND
QRY_SpeakerIsAvailableAndInDialogRange(S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679, _Player)
THEN
SetFlag((FLAG)SHA_Crypt_Event_PushedByOuterRing_5c6a7dfd-edc6-4704-8a03-3fbab093b235, _Player);
PROC_TryStartAD((DIALOGRESOURCE)SHA_Crypt_PAD_PushedByRing_feaa1fcd-14e7-5878-97b7-72e49b574450, _Player, S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679);

IF
UseFinished(_Player, S_SHA_Crypt_TrapDefuser_03ba50b7-b34d-4416-9e90-72d6d8bb08c4, 1)
AND
DB_SHA_Crypt_RingsDisabled(1)
THEN
PROC_TryStartAD((DIALOGRESOURCE)GLO_AD_CannotUseNow_057cb7cf-5aa4-1ed7-9639-65530939b2f9, _Player);

IF
UseFinished(_, S_SHA_Crypt_TrapDefuser_03ba50b7-b34d-4416-9e90-72d6d8bb08c4, 1)
THEN
PROC_SHA_Crypt_DisableRings();

IF
UseFinished(_Player, S_SHA_Crypt_DoorToChurch_6c50da0e-9302-4be5-8ca8-43679c4fdd91, 0)
AND
DB_Players(_Player)
AND
HasActiveStatus(S_SHA_Crypt_DoorToChurch_6c50da0e-9302-4be5-8ca8-43679c4fdd91, "ARCANE_LOCK", 1)
AND
NOT DB_CantTalk(_Player)
THEN
StartVoiceBark((VOICEBARKRESOURCE)SHA_Crypt_VB_MagicLockedDoor_6692c97d-72b1-0f4a-a276-8da059e2ef16, _Player);

PROC
PROC_SHA_Crypt_DisableRings()
THEN
DB_SHA_Crypt_RingsDisabled(1);
PROC_SHA_Crypt_EndTrap();
DB_SHA_Crypt_BlockFireTrap(1);
RemoveStatus(S_SHA_Crypt_DoorToChurch_6c50da0e-9302-4be5-8ca8-43679c4fdd91, "ARCANE_LOCK");
PROC_ItemUnlockAndOpen(S_SHA_Crypt_DoorToWestCrypt_220e44f0-85df-40d1-9519-404837d84ce8);

PROC
PROC_SHA_Crypt_DisableRings()
AND
DB_SHA_EntrancePuzzle_RingVisible(_Ring, _)
THEN
PROC_SHA_Crypt_SetVisible(_Ring, 0);

IF
DB_SHA_EntrancePuzzle_LightDetectors(_, _LightDetector)
THEN
SetVisible(_LightDetector, 0);

IF
EntityEvent((ITEM)_LightDetector, "DetectorUnderLight")
AND
DB_SHA_EntrancePuzzle_LightDetectors(_Ring, _LightDetector)
THEN
PROC_SHA_Crypt_CheckRingInDarkness(_Ring);

IF
EntityEvent((ITEM)_LightDetector, "DetectorInDarkness")
AND
DB_SHA_EntrancePuzzle_LightDetectors(_Ring, _LightDetector)
THEN
PROC_SHA_Crypt_CheckRingInDarkness(_Ring);

// If it's invisible check if it has to go visible
PROC
PROC_SHA_Crypt_CheckRingInDarkness((STRING)_Ring)
AND
NOT DB_SHA_Crypt_RingsDisabled(1)
AND
DB_SHA_EntrancePuzzle_RingVisible(_Ring, 0)
AND
NOT QRY_SHA_Crypt_AnyDetectorIlluminated(_Ring)
THEN
PROC_SHA_Crypt_SetVisible(_Ring, 1);

// If it's visible check if it has to go invisible
PROC
PROC_SHA_Crypt_CheckRingInDarkness((STRING)_Ring)
AND
NOT DB_SHA_Crypt_RingsDisabled(1)
AND
DB_SHA_EntrancePuzzle_RingVisible(_Ring, 1)
AND
QRY_SHA_Crypt_AnyDetectorIlluminated(_Ring)
THEN
PROC_SHA_Crypt_SetVisible(_Ring, 0);

PROC
PROC_SHA_Crypt_SetVisible((STRING)_Ring, (INTEGER)_Visible)
AND
DB_SHA_EntrancePuzzle_RingVisible(_Ring, _CurrentStatus)
AND
_CurrentStatus != _Visible
THEN
NOT DB_SHA_EntrancePuzzle_RingVisible(_Ring, _CurrentStatus);
DB_SHA_EntrancePuzzle_RingVisible(_Ring, _Visible);

IF
DB_SHA_EntrancePuzzle_RingVisible(_RingID, 1)
AND
DB_SHA_EntrancePuzzle_RingsVFX(_RingID, _VFX, _VisibleFlag)
AND
NOT DB_LoopEffect(_, _, _RingID, _, _, _, _) // Avoid duplicates
THEN
SetFlag(_VisibleFlag, NULL_00000000-0000-0000-0000-000000000000);
PROC_LoopEffect(_VFX, S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, _RingID, "SCL_Main_A", "");

IF
DB_SHA_EntrancePuzzle_RingVisible(_RingID, 0)
AND
DB_SHA_EntrancePuzzle_RingsVFX(_RingID, _, _VisibleFlag)
THEN
ClearFlag(_VisibleFlag, NULL_00000000-0000-0000-0000-000000000000);
PROC_StopLoopEffect(S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, _RingID);

QRY
QRY_SHA_Crypt_AnyDetectorIlluminated((STRING)_Ring)
AND
DB_SHA_EntrancePuzzle_LightDetectors(_Ring, _Detector)
AND
NOT GetObscuredState(_Detector, "HeavilyObscured")
THEN
DB_NOOP(1);

//END_REGION


//REGION Debug
IF
DB_GlobalFlag((FLAG)Debug_SHA_SolveRingPuzzle_88108578-4837-401a-9ed5-f815e0a150f7)
THEN
PROC_SHA_Crypt_DisableRings();

IF
TextEvent("showringspuzzle")
THEN
PROC_LoopEffect(VFX_Script_SHA_Forcefield_Inner_01_59f36fd7-fdbe-e30d-b4c0-47f8560abd02, S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, "Debug_SHA_InnerRing", "SCL_Main_A", "");
PROC_LoopEffect(VFX_Script_SHA_Forcefield_Outer_01_d550c5d2-6a3e-6a98-0094-d64d9f81b719, S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, "Debug_SHA_InnerRing", "SCL_Main_A", "");

IF
TextEvent("hideringspuzzle")
THEN
PROC_StopLoopEffect(S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, "Debug_SHA_InnerRing");
PROC_StopLoopEffect(S_SHA_RingVisuals_fd98f557-3479-4463-8e6c-c1ebfe5ca723, "Debug_SHA_InnerRing");

IF
TextEvent("showringspuzzlelightdetectors")
AND
DB_SHA_EntrancePuzzle_LightDetectors(_, _LightDetector)
THEN
SetVisible(_LightDetector, 1);

IF
TextEvent("hideringspuzzlelightdetectors")
AND
DB_SHA_EntrancePuzzle_LightDetectors(_, _LightDetector)
THEN
SetVisible(_LightDetector, 0);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act2"
