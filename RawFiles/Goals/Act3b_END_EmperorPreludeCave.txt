Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_AutoSaveTrigger(S_END_MorphicPoolBoatAutoSave_c1a3aeb2-c5eb-4e90-8539-9fd5c8ad28ca);
PROC_TriggerRegisterForPlayers(S_END_BoatWithoutStonesResetBox_57133da7-d5e5-47fe-a26d-c291108db1aa);
DB_DropMutingStatussesDialog(END_MorphicPool_BoatPassage_9459b1e4-f0b7-aab9-ae56-6c7089155d89);

//REGION Cranium Rats
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_001_A_bcaca036-31eb-4814-82da-001ae1e65abf, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_002_A_25483bfb-bafa-4b88-97f3-cb68d7ee7ba4, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_003_A_fb4c37df-e951-4e0b-bac6-1cafb78df623, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_004_A_cdd759a1-86cb-4fa7-bdff-e309914c0f6e, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_005_A_e66ff0d8-4e6a-4639-8f4b-5add63b22d75, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_006_A_15de1c45-e58e-49c6-b9da-24381ebb67f1, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_007_A_21c5a902-a6b9-4753-94c6-b4ca7ea07999, 1);

DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_008_B_e4785575-56ee-4947-845a-7ef352cce8ee, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_009_B_1993b3a4-aca7-4f6e-9e44-1d008cba5925, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_010_B_ca3a751f-646a-4e5e-b157-31c10b4fb816, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_011_B_93219095-1914-42ea-a60a-3e3b9cc9df1b, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_012_B_b1221105-affd-4dd3-81ff-f12d5ae30f7f, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_013_B_47cda73e-883e-490d-9e6b-ba0563de3f33, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_014_B_d2697a3b-6dc4-4b04-a29c-66c71b524316, 3);

DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_015_C_4af978ee-f201-45c2-9a1a-7f8c01a9409e, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_016_C_b778eda2-b8f1-4dde-a38a-9a46881ade35, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_017_C_d1c2647f-0a06-4e32-85f5-965ec9e6c1c2, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_018_C_c7a7004e-cfa9-451c-b7f7-e95aa68db79f, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_019_C_c3894816-5b27-475a-903d-4a0777311d34, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_020_C_0b92ea50-0015-40b9-ba57-c572811f1561, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_021_C_f7604b2b-2f77-4182-bd54-350dba5ae4af, 0);

DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_022_D_6682ce76-998b-4c25-9bb1-e2f78705b251, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_023_D_6cd2f459-f6e1-49e3-9bbe-6f533dd82dec, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_024_D_d77d3cb8-94a6-45b0-9342-fbab7ba216fa, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_025_D_65b3698b-8d85-4aa1-b540-9c469fcc82fc, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_026_D_6e3b680c-da12-4f88-a65e-01c95570b27c, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_027_D_1bfaef69-a11a-4907-9537-1e711d1152ff, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_028_D_600d04b2-4bb4-48c1-9206-0907953280a4, 2);

DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_029_E_f6675ad4-f814-4ef1-bd1f-91e88ad4d17b, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_030_E_7957d07d-4cbb-4911-8153-d52fe068526d, 4);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_031_E_566ab018-36b1-4a7b-8da5-b0dcdb6829a1, 0);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_032_E_dbcfa2c4-da6c-4a5b-80f2-ebcec2253c26, 1);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_033_E_78f48734-de26-4f29-8fd6-c793ca96514a, 2);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_034_E_4aec2da1-3ed6-4c6b-985e-346ca5b0f13b, 3);
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)S_END_CraniumRat_035_E_2d605fac-5550-4e77-a96d-e5ba4d343770, 4);

DB_END_EmperorPreludeCave_RatADFlags((FLAG)NULL_00000000-0000-0000-0000-000000000000, 0);
DB_END_EmperorPreludeCave_RatADFlags((FLAG)END_EmperorPreludeCave_Event_RandomAD1_8cf2baec-90e4-4810-afe0-6040e29ac426, 1);
DB_END_EmperorPreludeCave_RatADFlags((FLAG)END_EmperorPreludeCave_Event_RandomAD2_996b30f5-20a3-488c-8180-dd015f0d578d, 2);
DB_END_EmperorPreludeCave_RatADFlags((FLAG)END_EmperorPreludeCave_Event_RandomAD3_20bc1c8f-3b36-4373-a272-8d738ebca74b, 3);

DB_END_EmperorPreludeCave_RatUnisonADFlags((FLAG)NULL_00000000-0000-0000-0000-000000000000, 0);
DB_END_EmperorPreludeCave_RatUnisonADFlags((FLAG)END_EmperorPreludeCave_Event_UnisonAD1_422ab67c-3b0d-484e-8079-13efcded2e50, 1);
DB_END_EmperorPreludeCave_RatUnisonADFlags((FLAG)END_EmperorPreludeCave_Event_UnisonAD2_5e0b1df1-b3c3-464e-b20b-90f02cc21a09, 2);
DB_END_EmperorPreludeCave_RatUnisonADFlags((FLAG)END_EmperorPreludeCave_Event_UnisonAD3_e94fc284-e55f-4749-bdff-c94729c3c566, 3);
DB_END_EmperorPreludeCave_RatUnisonCount(0);

DB_GLO_Brainquakes_Directional_Difficult("Constitution", (DIFFICULTYCLASS)Act3_Hard_6298329e-255c-4826-9209-e911873b64e7, "END_EmperorPreludeCave_CraniumRats");
DB_GLO_Brainquakes_Directional_StunTime("END_EmperorPreludeCave_CraniumRats", 3.0);

PROC_TriggerRegisterForParty(S_END_HostileRatsBox_9ff91ae6-6832-4312-9e32-53b68230288b);
PROC_TriggerRegisterForParty(S_END_RatDisengageBox_c8efaea5-b99d-487d-9307-2c80120a6d5c);
PROC_TriggerRegisterForParty(S_END_EmperorCaveArrivalBox_3ae9be3a-8d64-4e72-a546-cd25ebd07df7);

SetOnStage(S_END_GortashNoteDagger_22453b8d-6f1a-4a03-bdf8-c80d662ca2ba, 0);
SetOnStage(S_END_GortashMorphicNote_4dd386a0-b2f6-4b3e-b439-bd11fb4ac8e3, 0);
//END_REGION

KBSECTION
//REGION Cranium Rats
IF
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _)
THEN
SetEntityEvent( _Rat , "GLO_BlockCombatFallbackAD", 1);
DB_Dialogs(_Rat, END_EmperorPreludeCave_AD_RatResponse_b53367dc-10d6-09a5-e88c-8ec6aa71abb4);

IF
EnteredTrigger(_Player, S_END_EmperorCaveArrivalBox_3ae9be3a-8d64-4e72-a546-cd25ebd07df7)
AND
NOT DB_GlobalFlag(END_EmperorPreludeCave_State_BeenToCave_1b78259b-6bb5-4760-bab5-dc02f7403017)
THEN
SetFlag(END_EmperorPreludeCave_State_BeenToCave_1b78259b-6bb5-4760-bab5-dc02f7403017);

IF
EnteredTrigger(_Player, S_END_EmperorCaveArrivalBox_3ae9be3a-8d64-4e72-a546-cd25ebd07df7)
AND
QRY_END_EmperorPreludeCave_AnyLivingRats()
AND
DB_Avatars(_Avatar)
AND
GetDistanceTo(_Player, _Avatar, _Dist)
AND
_Dist <= 10.0
THEN
DB_END_EmperorPreludeCave_EmperorCaveADActive(1);
PROC_EmperorAD(_Avatar, END_EmperorPreludeCave_EmperorAD_EarlyArrival_9443db02-761a-51c1-1323-c4557784bc7a);

IF
AutomatedDialogEnded(END_EmperorPreludeCave_EmperorAD_EarlyArrival_9443db02-761a-51c1-1323-c4557784bc7a, _)
AND
DB_END_EmperorPreludeCave_EmperorCaveADActive(1)
THEN
NOT DB_END_EmperorPreludeCave_EmperorCaveADActive(1);

IF
DialogRequestFailed(END_EmperorPreludeCave_EmperorAD_EarlyArrival_9443db02-761a-51c1-1323-c4557784bc7a, _)
AND
DB_END_EmperorPreludeCave_EmperorCaveADActive(1)
THEN
NOT DB_END_EmperorPreludeCave_EmperorCaveADActive(1);

QRY
QRY_END_EmperorPreludeCave_AnyLivingRats()
AND
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _)
AND
NOT DB_PermaDefeated(_Rat)
THEN
DB_NOOP(1);

PROC
PROC_DialogFlagSetup(END_EmperorPreludeCave_AD_RatResponse_b53367dc-10d6-09a5-e88c-8ec6aa71abb4, _Rat, _)
THEN
PROC_END_EmperorPreludeCave_ResetADFlags((CHARACTER)_Rat);

PROC
PROC_DialogFlagSetup(END_EmperorPreludeCave_AD_RatResponse_b53367dc-10d6-09a5-e88c-8ec6aa71abb4, _Rat, _)
AND
Random(3, _Random)
AND
DB_END_EmperorPreludeCave_RatADFlags(_Flag, _Random)
AND
_Flag != NULL_00000000-0000-0000-0000-000000000000
THEN
SetFlag(_Flag, _Rat);

PROC
PROC_END_EmperorPreludeCave_ResetADFlags((CHARACTER)_Rat)
AND
DB_END_EmperorPreludeCave_RatADFlags(_Flag, _)
AND
GetFlag(_Flag, _Rat, 1)
THEN
ClearFlag(_Flag, _Rat);

IF
CombatRoundStarted(_CombatID,_)
AND
QRY_END_EmperorPreludeCave_CraniumRatsInCombat(_CombatID)
AND
DB_END_EmperorPreludeCave_RatUnisonCount(_Count)
AND
DB_END_EmperorPreludeCave_RatUnisonADFlags(_Flag, _Count)
AND
IntegerSum(_Count, 1, _NewCount)
THEN
SetFlag(_Flag);
NOT DB_END_EmperorPreludeCave_RatUnisonCount(_Count);
DB_END_EmperorPreludeCave_RatUnisonCount(_NewCount);
PROC_END_EmperorPreludeCave_RatUnisonAD(_Count);

//TODO: AD playing on all the rats probably wont work with the parsing. Can maybe only select a random few, or a different approach entirely
PROC
PROC_END_EmperorPreludeCave_RatUnisonAD((INTEGER)_Group)
AND
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _Group)
THEN
PROC_TryStartAD(END_EmperorPreludeCave_AD_RatUnison_3f28b01c-d176-c3ca-25b9-98e57fd3fdec, _Rat);

IF
EnteredTrigger(_Player, S_END_HostileRatsBox_9ff91ae6-6832-4312-9e32-53b68230288b)
AND
NOT QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
THEN
PROC_END_EmperorPreludeCave_CombatStartBrainQuake((CHARACTER)_Player);

PROC
PROC_GLO_EmperorPrelude_PlayerDroppedNetherstone(_, _, "CTY_Main_A")
AND
DB_PartyMembers(_Player)
AND
DB_InRegion(_Player, S_END_HostileRatsBox_9ff91ae6-6832-4312-9e32-53b68230288b)
AND
NOT QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
THEN
PROC_END_EmperorPreludeCave_CombatStartBrainQuake((CHARACTER)_Player);

PROC
PROC_END_EmperorPreludeCave_CombatStartBrainQuake((CHARACTER)_Player)
THEN
PROC_GLO_Brainquakes_StartForcedEvent(_Player, "END_EmperorPreludeCave_CraniumRats");
ObjectTimerLaunch(_Player, "END_EmperorPreludeCave_RatCombatStart", 4000);

IF
ObjectTimerFinished(_Player, "END_EmperorPreludeCave_RatCombatStart")
THEN
PROC_END_EmperorPreludeCave_HostileRats((CHARACTER)_Player);

PROC
PROC_END_EmperorPreludeCave_HostileRats((CHARACTER)_Player)
AND
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _)
AND
GetFaction(_Player, _Faction)
THEN
PROC_SetRelationTemporaryHostile(_Rat, _Player);

IF
LeftTrigger(_Player, S_END_RatDisengageBox_c8efaea5-b99d-487d-9307-2c80120a6d5c)
AND
NOT QRY_END_EmperorPreludeCave_AnyLivingPartyMembersInCave()
AND
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _)
THEN
PROC_SetRelationToPlayers((FACTION)ACT3_END_CraniumRats_599ce203-cf22-46f9-8aa4-4e280e4a7ee6, 50);
LeaveCombat(_Rat);

QRY
QRY_END_EmperorPreludeCave_AnyLivingPartyMembersInCave()
AND
DB_PartyMembers(_PartyMember)
AND
IsInTrigger(_PartyMember,S_END_RatDisengageBox_c8efaea5-b99d-487d-9307-2c80120a6d5c,1)
AND
NOT DB_Defeated(_PartyMember)
THEN
DB_NOOP(1);

QRY
QRY_END_EmperorPreludeCave_CraniumRatsInCombat((GUIDSTRING)_CombatID)
AND
DB_END_EmperorPreludeCave_CraniumRats(_Rat, _)
AND
DB_Is_InCombat(_Rat, _CombatID)
THEN
DB_NOOP(1);

IF
DB_PermaDefeated(_Rat)
AND
DB_END_EmperorPreludeCave_CraniumRats((CHARACTER)_Rat, _Group)
THEN
NOT DB_END_EmperorPreludeCave_CraniumRats(_Rat, _Group);
//END_REGION

//REGION End Game Access CTY_Main_A
PROC
PROC_GLO_EmperorPrelude_GortashMoveToMorphicPool()
THEN
SetOnStage(S_END_GortashNoteDagger_22453b8d-6f1a-4a03-bdf8-c80d662ca2ba, 1);
SetOnStage(S_END_GortashMorphicNote_4dd386a0-b2f6-4b3e-b439-bd11fb4ac8e3, 1);

IF
UseStarted(_Player, S_END_ToMorphicPoolBoat_82964763-8581-4980-86b1-1ceeb287f43f)
AND
QRY_END_EmperorPreludeCave_CanUseBoat((CHARACTER)_Player)
THEN
PROC_END_EmperorPreludeCave_TryTransferStonesBeforeUseBoatChecks(_Player);

IF
UseStarted(_Player, S_END_ToMorphicPoolBoat_82964763-8581-4980-86b1-1ceeb287f43f)
AND
NOT QRY_END_EmperorPreludeCave_CanUseBoat((CHARACTER)_Player)
THEN
PROC_PlayCantUseItemAD(_Player);

QRY
QRY_END_EmperorPreludeCave_CanUseBoat((CHARACTER)_Player)
AND
NOT DB_CantTalk_IgnoreStatuses(_Player)
AND
NOT DB_CantAct(_Player)
AND
NOT DB_Is_InCombat(_Player, _)
THEN
DB_NOOP(1);

// clear DB for each attempt at this.
PROC
PROC_END_EmperorPreludeCave_TryTransferStonesBeforeUseBoatChecks((CHARACTER)_Player)
AND
DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone)
THEN
NOT DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone);

// we delay the check because inventory transfer needs a couple of frames to register before the flag checks.
PROC
PROC_END_EmperorPreludeCave_TryTransferStonesBeforeUseBoatChecks((CHARACTER)_Player)
AND
NOT QRY_GLO_EmperorPrelude_AnyNetherstoneNotInMagicPocketsOrCamp()
AND
QRY_END_EmperorPreludeCave_MoveAvailableNetherstonesToCharacter(_Player)
THEN
TimerLaunch("END_EmperorPreludeCave_DelayUseBoat", 100);
DB_END_EmperorPreludeCave_BoatUserCharacter(_Player);

PROC
PROC_END_EmperorPreludeCave_TryTransferStonesBeforeUseBoatChecks((CHARACTER)_Player)
AND
NOT QRY_GLO_EmperorPrelude_AnyNetherstoneNotInMagicPocketsOrCamp()
AND
NOT QRY_END_EmperorPreludeCave_MoveAvailableNetherstonesToCharacter(_Player)
AND
NOT DB_GLO_EmperorPrelude_StoneNeedsToMove(_) // if at least one stone needs to move, we need to wait a frame for it to be moved.
THEN
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_Player);

// if any stone isn't available, we just try to trigger the TryToUseBoat without moving any stones - which would fail the check anyways and give an AD to the player.
PROC
PROC_END_EmperorPreludeCave_TryTransferStonesBeforeUseBoatChecks((CHARACTER)_Player)
AND
QRY_GLO_EmperorPrelude_AnyNetherstoneNotInMagicPocketsOrCamp()
THEN
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_Player);

IF
TimerFinished("END_EmperorPreludeCave_DelayUseBoat")
AND
DB_END_EmperorPreludeCave_BoatUserCharacter(_Player)
THEN
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_Player);
NOT DB_END_EmperorPreludeCave_BoatUserCharacter(_Player);

// check and move to player if the netherstone is in a player in camp
QRY
QRY_END_EmperorPreludeCave_MoveAvailableNetherstonesToCharacter((CHARACTER)_Player)
AND
DB_GLO_EmperorPrelude_NetherStoneTrackers(_Netherstone, _, _, _, _, _)
AND
NOT DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone) // if stone was already moved, disregard trying to move it again.
AND
DB_PartOfTheTeam(_OtherPlayer) // then we check for everyone in the team
AND
NOT DB_Players(_OtherPlayer) // who isn't in the current party
AND
IsInInventoryOf(_Netherstone, _OtherPlayer, 1) // who has the netherstone
THEN
ToInventory((ITEM)_Netherstone, (CHARACTER)_Player, 1, 0, 1);
DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone);

// check and move to player if the netherstone is in a player's chest in camp
QRY
QRY_END_EmperorPreludeCave_MoveAvailableNetherstonesToCharacter((CHARACTER)_Player)
AND
DB_GLO_EmperorPrelude_NetherStoneTrackers(_Netherstone, _, _, _, _, _)
AND
NOT DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone) // if stone was already moved, disregard trying to move it again.
AND
DB_Avatars(_Avatar)
AND
GetReservedUserID(_Avatar,_UserId)
AND
DB_Camp_UserCampChest(_UserId,_Chest)
AND
IsInInventoryOf(_Netherstone,_Chest,1)
THEN
ToInventory((ITEM)_Netherstone, (CHARACTER)_Player, 1, 0, 1);
DB_GLO_EmperorPrelude_StoneNeedsToMove(_Netherstone);

PROC
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_)
THEN
PROC_GLO_EmperorPrelude_CheckAllStonesInInventory(); // set flag false if any stone is not in player possession.
PROC_GLO_EmperorPrelude_CheckGortashPactStones(); // set flag false if any of the stones is not in player possession and not gortash pact.

PROC
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_Player)
AND
NOT QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
AND
DB_Players((CHARACTER)_Player)
AND
QRY_StartDialogCustom(GLO_ThrallOfTheAbsolute_BoatWithoutAllStones_a342693d-1208-df7d-051a-ef0c14305679, NULL_00000000-0000-0000-0000-000000000000, _Player, 0, 0, 0, 0) //Emperor generics handle adding as speaker
THEN
DB_NOOP(1);

PROC
PROC_END_EmperorPreludeCave_TryToUseBoat((CHARACTER)_Player)
AND
QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
THEN
PROC_END_EmperorPreludeCave_SetBoatUser((CHARACTER)_Player);
PROC_END_EmperorPreludeCave_ResetBoatWithoutStonesFlags();
ReadyCheckGlobal("END_ReadyCheck_MorphicPool", "END_ReadyMessage_MorphicPool", 1, (CHARACTER)_Player);

PROC
PROC_END_EmperorPreludeCave_SetBoatUser((CHARACTER)_)
AND
DB_END_ToMorphicPool_BoatUser(_Player)
THEN
NOT DB_END_ToMorphicPool_BoatUser(_Player);

PROC
PROC_END_EmperorPreludeCave_SetBoatUser((CHARACTER)_Player)
THEN
DB_END_ToMorphicPool_BoatUser(_Player);

IF
LeftTrigger(_Player, S_END_BoatWithoutStonesResetBox_57133da7-d5e5-47fe-a26d-c291108db1aa)
THEN
PROC_END_EmperorPreludeCave_ResetBoatWithoutStonesFlags((CHARACTER)_Player);

PROC
PROC_END_EmperorPreludeCave_ResetBoatWithoutStonesFlags()
AND
DB_Players(_Player)
THEN
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt1_eff46c58-e20f-173f-b46d-c3df5aeb02f9, _Player);
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt2_3517113c-c075-d81d-d5b7-8cb75bb6cb4d, _Player);
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt3_4f846619-12e2-4edf-9e32-e2c731349ac7, _Player);

PROC
PROC_END_EmperorPreludeCave_ResetBoatWithoutStonesFlags((CHARACTER)_Player)
AND
DB_Players(_Player)
THEN
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt1_eff46c58-e20f-173f-b46d-c3df5aeb02f9, _Player);
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt2_3517113c-c075-d81d-d5b7-8cb75bb6cb4d, _Player);
ClearFlag(GLO_ThrallOfTheAbsolute_State_BoatWithoutStonesAttempt3_4f846619-12e2-4edf-9e32-e2c731349ac7, _Player);

IF
ReadyCheckPassed("END_ReadyCheck_MorphicPool")
AND
DB_END_ToMorphicPool_BoatUser(_Player)
AND
NOT QRY_StartDialogCustom_Fixed(END_MorphicPool_BoatPassage_9459b1e4-f0b7-aab9-ae56-6c7089155d89, _Player,0,0,0,0)
THEN
DB_NOOP(1);

PROC
PROC_StartDialog_AddExtraSpeakers(END_MorphicPool_BoatPassage_9459b1e4-f0b7-aab9-ae56-6c7089155d89, _ID)
THEN
DialogSetTeleportPartyOnEnded(_ID, (TRIGGER)S_END_ToMorphicPoolPoint_d1e450c1-1b10-49d1-8faa-29761e032059);

PROC
PROC_StartDialog_AddExtraSpeakers(END_MorphicPool_BoatPassage_9459b1e4-f0b7-aab9-ae56-6c7089155d89, _ID)
AND
DB_Players(_Player)
AND
NOT DB_END_ToMorphicPool_BoatUser(_Player)
THEN
PROC_DialogAddSpeakingActor(_ID, _Player);

IF
ReadyCheckFailed("END_ReadyCheck_MorphicPool")
THEN
DB_NOOP(1);

QRY
QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
AND
DB_GlobalFlag(END_MorphicPool_State_UnlockedAccess_b65fedb8-ed89-4ccf-b20f-3338474bda18) 
AND
DB_GlobalFlag(GLO_EmperorPrelude_State_AllStonesInPartyInventory_1106e99b-273e-4d19-b3cc-7a9667cf3d53)
THEN
DB_NOOP(1);

QRY
QRY_END_EmperorPreludeCave_CanTraverseToMorphicPool()
AND
DB_GlobalFlag(END_MorphicPool_State_UnlockedAccess_b65fedb8-ed89-4ccf-b20f-3338474bda18) 
AND
DB_GlobalFlag(WYR_KillDirectorGortash_State_AgreedToMeetInUndercity_1375d542-cf0a-49fd-927b-5c6bbce13ce4)
AND
DB_GlobalFlag(GLO_EmperorPrelude_State_GortashPactAndBothStoneInInventory_07352366-dcc0-4424-a9df-c94512ba76c0)
THEN
DB_NOOP(1);

// The following is needed in response to GUSX-13639 and for backwards compatibility. The ChasmSystem will move any story item
// out of a chasm. This boat was marked as a story item, which caused it to be moved to a nearby safe spot. This will force
// the boat to go back to its original position.
IF
Moved(S_END_ToMorphicPoolBoat_82964763-8581-4980-86b1-1ceeb287f43f)
THEN
ToTransform(S_END_ToMorphicPoolBoat_82964763-8581-4980-86b1-1ceeb287f43f, -92.041, -32.593, 1157.644, 0.0, 135.505, 0.0);

// Similar to the above, force move the boat to its correct position in case loading a save already has the boat in a bad spot
IF
LevelLoaded("CTY_Main_A")
THEN
ToTransform(S_END_ToMorphicPoolBoat_82964763-8581-4980-86b1-1ceeb287f43f, -92.041, -32.593, 1157.644, 0.0, 135.505, 0.0);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act3b"
