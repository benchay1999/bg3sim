Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION Gondians
DB_Dialogs(S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43, (DIALOGRESOURCE)LOW_SteelWatchFoundry_GondianWorker04_efefaf90-4eb1-481b-5caf-d6f980094902);
DB_Dialogs(S_LOW_GondianWorker05_e86d2e9b-f55b-4eaf-9ba6-0245d17b6d1c, (DIALOGRESOURCE)LOW_SteelWatchFoundry_GondianWorker05_6ad87ae9-2643-528f-e855-25bc58bc2208);
DB_Dialogs(S_LOW_GondianWorker06_53a85a70-979b-480a-afb1-ec8d9239e0f8, (DIALOGRESOURCE)LOW_SteelWatchFoundry_GondianWorker06_eb5944ce-1ba4-6810-f0a3-f73ac58bc3e6);
DB_Dialogs(S_LOW_GondianWorker09_2fb2c297-3c00-4b98-8412-41aea0087db5, (DIALOGRESOURCE)LOW_SteelWatchFoundry_GondianWorker09_389183a4-fe4a-b329-a346-0aea6db26e81);
DB_Dialogs(S_LOW_GondianWorker10_ffc8a25f-6ceb-4081-8e07-eca2205989c5, (DIALOGRESOURCE)LOW_SteelWatchFoundry_GondianWorker10_2453e367-da25-583c-557f-449707c23772);

DB_LOW_LabGondians(S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43);
DB_LOW_LabGondians(S_LOW_GondianWorker05_e86d2e9b-f55b-4eaf-9ba6-0245d17b6d1c);
DB_LOW_LabGondians(S_LOW_GondianWorker06_53a85a70-979b-480a-afb1-ec8d9239e0f8);
DB_LOW_LabGondians(S_LOW_GondianWorker09_2fb2c297-3c00-4b98-8412-41aea0087db5);
DB_LOW_LabGondians(S_LOW_GondianWorker10_ffc8a25f-6ceb-4081-8e07-eca2205989c5);
//END_REGION

//REGION Baneites
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer06_0ce716ac-f6fa-4b7d-8fda-456b0e74f90f);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer07_2dc326b9-73f4-40a6-af7f-54955e3b1ebd);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer08_015d02bd-0c8e-41c8-a6da-df92d71084d2);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer09_0c5259f6-3c86-4e84-b61e-42e9f31691ce);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer10_Leader_a2db5bf9-03a9-408e-971f-fc63741308bb);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer14_750a35b3-b0c5-4007-ae1a-4446c95a56ae);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer15_0b5a37de-60f3-403c-b5e8-b74afd50fa3d);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer18_f4a8f9e0-564c-41ed-8598-4c350b88f0e8);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer19_f5a48aa9-d67a-4fcd-9fe8-15e933314ca1);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer20_4b2f8018-f988-4dfd-bb59-962dc90070f3);
DB_LOW_LabBaneites((CHARACTER)S_LOW_BaneiteOfficer21_9a64e678-c5aa-43ed-8765-33882e9f1ab9);
DB_LOW_LabBaneites((CHARACTER)S_LOW_LabRoomWatcher01_d48bb47b-7e55-45ab-ac19-708bd91e6eb4);
DB_LOW_LabBaneites((CHARACTER)S_LOW_LabRoomWatcher02_c3117337-b9cb-455d-aaf2-15d69143acc8);
//END_REGION

//REGION Dead Man's Switches
DB_LOW_SteelWatchFoundry_DeadMansSwitches(S_LOW_BaneiteOfficer_PostIRN01_36c0bb47-a8cc-4381-882b-a2ded38d0b5c, (ITEM)S_LOW_DeadMansSwitch08_a8baf49a-1249-42fb-aa79-dc2fa8420c3b, "LOW_Switch08");
DB_LOW_SteelWatchFoundry_DeadMansSwitches(S_LOW_BaneiteOfficer07_2dc326b9-73f4-40a6-af7f-54955e3b1ebd, (ITEM)S_LOW_DeadMansSwitch07_10398e9f-e1a1-4431-84f6-4c27fe9847a7, "LOW_Switch07");
DB_LOW_SteelWatchFoundry_DeadMansSwitches(S_LOW_BaneiteOfficer09_0c5259f6-3c86-4e84-b61e-42e9f31691ce, (ITEM)S_LOW_DeadMansSwitch09_03d355e5-d742-4949-b857-80ee936f8fcf, "LOW_Switch09");
DB_LOW_SteelWatchFoundry_DeadMansSwitches(S_LOW_BaneiteOfficer02_de084b09-99c6-426e-9159-f692d180d418, (ITEM)S_LOW_DeadMansSwitch02_0dbbc23e-a6c1-4ebb-8f8b-495306813e1b, "LOW_Switch02");
DB_LOW_SteelWatchFoundry_DeadMansSwitches(S_LOW_BaneiteOfficer10_Leader_a2db5bf9-03a9-408e-971f-fc63741308bb, (ITEM)S_LOW_DeadMansSwitch10_9c769082-8fc7-4c6b-b3c2-366b07654188, "LOW_Switch10");
//END_REGION

//REGION Foundry rooms
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_BrainRoom_4ecb872a-e992-4b75-bd61-e7f9d79217ff);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_ControlCentre_c8a971a6-b8b2-4706-ada4-dfaf6ec41f1c);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_InstallationRoom_ca9a227a-afc2-4dc9-9984-41e6bb8baefd);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_SecurityOffice_57e9fbdb-91d8-4b17-b0a2-3958f939f6ba);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_WelcomeOffice_def8af25-812c-4af4-a550-6252bdd313f2);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_WorkRoom_7cc75beb-1004-40bb-a33c-7b8b128ae9dc);
DB_LOW_SteelWatchFoundry_RoomTriggers(S_LOW_FoundryRoof_66d955fe-3397-4fa0-ad03-442a246a3393);
//END_REGION

//REGION Dialogs
DB_ItemDialog_NarratorAD(S_LOW_CrateNote_47f53af6-65b1-482b-9b09-7b4563d781b4, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_ZombieCrate_d32072f3-ce2e-2339-9386-594ffdce04f8);
DB_GLO_CharacterCorpseDialog((CHARACTER)S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43, (DIALOGRESOURCE)LOW_SteelWatchFoundry_Dead_GondianWorker04_2bcb9a73-18a1-1c2b-a1be-97397ee66e8d);
DB_CustomDialogRange(S_LOW_GondianWorker08_Leader_3607ec31-f939-41aa-a7d2-e32f8c46979d, 100);
//END_REGION

//REGION Triggers
TriggerRegisterForCharacter(S_LOW_InstallationRoom_ca9a227a-afc2-4dc9-9984-41e6bb8baefd, S_LOW_GondianWorker08_Leader_3607ec31-f939-41aa-a7d2-e32f8c46979d);
PROC_TriggerRegisterForPlayers(S_LOW_InstallationRoom_ca9a227a-afc2-4dc9-9984-41e6bb8baefd);
//END_REGION

//REGION Iron throne clues
DB_DoNotFace(S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43);
//DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)_Trigger, (FLAG)_Flag, (STRING)_STR);
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone01_64b145c0-37ce-48ac-9eb9-5793cabc54f8, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone01_43613d79-655e-4004-b4c0-f10b278b2480, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone01");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone02_d5943fcb-aa49-45e0-9df5-07400d4e228a, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone02_8866f134-fc4a-488f-b4d2-6f8e4469d21b, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone02");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone03_7fb2de44-7af0-485b-a3bf-ca34f8745f70, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone03_a6a84b57-9dd6-4a82-a1b5-d95dc2a958e4, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone03");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ChattingADTrigger_4cc93ca9-937b-49b5-936b-f0c6a2d764f7, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone04_6a07ab54-b44c-4d11-a50d-d169a04fb4f7, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone04");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone05_0fc302c1-3d53-42ff-b178-bcaf7081a6f5, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone05_febe1cab-1747-41d9-9bbe-63111f3aaaba, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone04");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone06_f02b7e20-3a2b-4e53-b0fd-8c6c27f9febf, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone06_ac924be9-321b-48e5-802d-d92d473538d7, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone04");
DB_LOW_SteelWatchFoundry_ClueADZones((TRIGGER)S_LOW_ClueADZone07_7f5cd78a-92aa-4166-a495-00a388e94b7b, (FLAG)LOW_SteelWatchFoundry_State_InClueADZone07_2682dfeb-9e47-403b-bf78-5cab0a9f988c, "LOW_SteelWatchFoudnry_AllPlayersLeftADClueZone04");

//Gondians do not face the Baneites when in AD
DB_DoNotFaceDialog(S_LOW_GondianWorker09_2fb2c297-3c00-4b98-8412-41aea0087db5, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_GondianWorker09Begs_5bfae6bb-b132-10d0-780f-4e02bcc07f42);
DB_DoNotFaceDialog(S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_BaneiteTaunt_c8bf1b10-d3ae-8dcd-994e-bceb48e8e8ea);

//DB_OneShot_ADTrigger(S_LOW_ClueADZone01_64b145c0-37ce-48ac-9eb9-5793cabc54f8, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_BaneiteTaunt_c8bf1b10-d3ae-8dcd-994e-bceb48e8e8ea, S_LOW_BaneiteOfficer06_0ce716ac-f6fa-4b7d-8fda-456b0e74f90f, S_LOW_GondianWorker04_6cc09c40-6b09-4e92-ad36-4e5ad72f7c43);
PROC_TriggerRegisterForPlayers(S_LOW_InstallationRoom_ca9a227a-afc2-4dc9-9984-41e6bb8baefd);

DB_KnowledgeCheckItem_AD("LOW_SteelWatchFoundry_Engine",
(ITEM)S_LOW_SubmersibleEngine_6b8a7876-b8df-8622-1316-8170ca13c531, 
"Intelligence", 
(DIFFICULTYCLASS)Act3_Medium_77cee1c4-384a-4217-b670-67db3c7add57, 
(DIALOGRESOURCE)LOW_SteelWatchFoundry_PAD_SubmersiblePart_432a591e-35f7-5621-aa81-9d810f3827f9,
(FLAG)LOW_SteelWatchFoundry_Event_SubComponentIdentified_ee66f17d-aa50-42ff-a923-eb1e5debd123);

DB_GLO_CharacterCorpseDialog((CHARACTER)S_LOW_DeadGondian_41a7f5e2-c2d2-4fce-9fbb-4d534993e0b3, (DIALOGRESOURCE)LOW_SteelWatchFoundry_Dead_DeadGondian_d23904e8-add1-e0e2-2614-538a15affe45);



DB_LOW_SteelWatchFoundry_IRNClueDocs(S_LOW_BeastmasterDocument_fb97e4c4-e5ff-4625-9fc4-e336834d65af);
DB_LOW_SteelWatchFoundry_IRNClueDocs(S_LOW_BaneiteRequestForm_4e16bbeb-64e3-4b80-8cb4-2be4512af25f);
DB_LOW_SteelWatchFoundry_IRNClueDocs(S_LOW_GuardRotation_99fa91fb-20db-42fc-8fa1-70d25fb3f636);
DB_LOW_SteelWatchFoundry_IRNClueDocs(S_LOW_ProductionTrackingBook_d1278612-ef55-4596-abfe-b3ec5bd08234);

//END_REGION

//REGION Zombies
//DB_LOW_SteelWatchFoundry_OperatingZombies((CHARACTER)S_LOW_OperatingZombie_01_ef25b884-86ae-41d5-9130-d74161787876, (ITEM)S_LOW_OperatingTable_01_3e4f3799-6cde-44f0-a218-e844028fa298);
DB_LOW_SteelWatchFoundry_OperatingZombies((CHARACTER)S_LOW_OperatingZombie_02_58d31262-f5e4-4fe2-8603-af16f5846ab7, (ITEM)S_LOW_OperatingTable_02_0ef8db08-9d9b-400c-870f-fa4c9b2b245c);

DB_LOW_SteelWatchFoundry_ZombieCommentItems(S_LOW_BeahededZombie_bce58ce0-cbee-4514-9c87-290805b0f341, (DIALOGRESOURCE)LOW_SteelWatchFoundry_PAD_OperatingTableZombieComment_2adbba03-82a4-3de2-96ba-6600770911b6);
DB_LOW_SteelWatchFoundry_ZombieCommentItems(S_LOW_ZombieHead_71380e99-dc4d-43b6-8739-16e814145261, (DIALOGRESOURCE)LOW_SteelWatchFoundry_PAD_OperatingTableZombieComment_2adbba03-82a4-3de2-96ba-6600770911b6);
DB_LOW_SteelWatchFoundry_ZombieCommentItems(S_LOW_ZombieInWatcher_2d9c33c4-b699-49f4-a7c1-4158b3119926, (DIALOGRESOURCE)LOW_SteelWatchFoundry_PAD_WatcherZombieComment_70307249-1fa2-136d-7107-8b046bc62078);
//END_REGION

//REGION Alarm Door
DB_HasItemEvent(S_LOW_KeyToControlCentre_a7a31259-8e33-4fb7-810b-028de14b3571, (FLAG)LOW_SteelWatchFoundry_State_AlarmDoor_HasKey_1004ec43-6bf9-48dd-a6a0-426f6e9c273a);
DB_HasItemTemplateScriptFlag(1, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AlarmDoor_5e0d8f7b-07fd-1fa6-9589-a3fc1775efd7, (ITEMROOT)TOOL_GEN_ThievesTools_A_Closed_A_08851ac0-3bfa-44f3-80c6-6ab0536f0e10, 2, 1);
DB_HasItemTemplateScriptFlag(2, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AlarmDoor_5e0d8f7b-07fd-1fa6-9589-a3fc1775efd7, (ITEMROOT)TOOL_GEN_ThievesTools_A_Open_A_e32a200c-5b63-414d-ae57-00e7b38f125b, 2, 1);
DB_FlagReactionAfterDialog((FLAG)LOW_SteelWatchFoundry_Event_AlarmDoor_TriggeredBy_4e69be13-f88b-4d31-b2ca-d39290149d62, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AlarmDoor_5e0d8f7b-07fd-1fa6-9589-a3fc1775efd7);
//END_REGION

//REGION Toobin ADs
DB_OneShot_ADTrigger(S_LOW_ToobinComment_Lab_7483ee04-f125-4ed2-aeb9-54666b25ce23, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_ToobinLabComment_3860c5fe-5fc9-361a-340a-6ec03883a52f, S_LOW_GondianWorker08_Leader_3607ec31-f939-41aa-a7d2-e32f8c46979d);
DB_OneShot_ADTrigger(S_LOW_ToobinComment_Zombies_76959419-0fdd-450f-a086-9e9dcda5f071, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_ToobinZombieComment_3e3deb7f-3f80-7428-5dc9-4e365866230c, S_LOW_GondianWorker08_Leader_3607ec31-f939-41aa-a7d2-e32f8c46979d);
DB_OneShot_ADTrigger(S_LOW_ToobinComment_Door_c33765a3-b1d5-4cc0-a6ab-04426ceaf95c, (DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_ToobinDoorComment_0ae93698-850f-76f5-7508-7f1446bc75bc, S_LOW_GondianWorker08_Leader_3607ec31-f939-41aa-a7d2-e32f8c46979d);
//END_REGION

KBSECTION
//REGION Setup
IF
DB_LOW_SteelWatchFoundry_RoomTriggers(_RoomTrigger)
AND
DB_LOW_Baneites(_Baneite)
THEN
TriggerRegisterForCharacter((TRIGGER)_RoomTrigger,(CHARACTER)_Baneite);

IF
DB_PermaDefeated(_Baneite)
AND
DB_LOW_Baneites(_Baneite)
AND
DB_LOW_SteelWatchFoundry_RoomTriggers(_RoomTrigger)
THEN
TriggerUnregisterForCharacter((TRIGGER)_RoomTrigger, (CHARACTER)_Baneite);

IF
DB_LOW_SteelWatchFoundry_RoomTriggers(_RoomTrigger)
AND
DB_LOW_Gondians(_Gondian)
THEN
TriggerRegisterForCharacter((TRIGGER)_RoomTrigger,(CHARACTER)_Gondian);

IF
DB_PermaDefeated(_Gondian)
AND
DB_LOW_Gondians(_Gondian)
AND
DB_LOW_SteelWatchFoundry_RoomTriggers(_RoomTrigger)
THEN
TriggerUnregisterForCharacter((TRIGGER)_RoomTrigger, (CHARACTER)_Gondian);

IF
DB_LOW_SteelWatchFoundry_RoomTriggers(_RoomTrigger)
THEN
PROC_TriggerRegisterForPlayers((TRIGGER)_RoomTrigger);
DB_DangerZone(_RoomTrigger, "LOW_SteelWatchFoundry");

IF
DB_LOW_LabBaneites(_Baneite)
THEN
DB_GLO_DefeatCounter(_Baneite,"LOW_SteelWatchFoundry_InstallLabBaneites");
//END_REGION

//REGION Dead Man's Switches
//Making sure the player can't pickpocket the equipable Switch
IF
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _, _)
AND
_Baneite != NULL_00000000-0000-0000-0000-000000000000
AND
GetItemByTemplateInInventory((ITEMROOT)QUEST_LOW_DeadMansSwitch_Shield_10d9e4a8-8019-47a9-88e3-dac74f7b8ae5, _Baneite, _EquipableSwitch)
THEN
SetCanBePickpocketed(_EquipableSwitch, 0);


//Handling disarming baneites (meaning knocking them out of their hands) of their killswitches 
IF
CharacterDisarmed(_Baneite, _EquipableSwitch, _)
AND
GetTemplate(_EquipableSwitch, QUEST_LOW_DeadMansSwitch_Shield_10d9e4a8-8019-47a9-88e3-dac74f7b8ae5)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
GetClosestAlivePlayer(_Baneite, _ClosestPlayer, _)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_ClosestPlayer);

//When a switch is removed form the Baneite's inventory by any means, set the equipped switch off stage
IF
RemovedFrom(_Switch, _Baneite)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, (ITEM)_Switch, _)
THEN
PROC_DisappearEquipableSwitch((CHARACTER)_Baneite, (ITEM)_Switch);

PROC
PROC_DisappearEquipableSwitch((CHARACTER)_Baneite, (ITEM)_Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, (ITEM)_Switch, _)
AND
_Baneite != NULL_00000000-0000-0000-0000-000000000000
AND
GetItemByTemplateInInventory((ITEMROOT)QUEST_LOW_DeadMansSwitch_Shield_10d9e4a8-8019-47a9-88e3-dac74f7b8ae5, _Baneite, _EquipableSwitch)
THEN
Unequip((CHARACTER)_Baneite, _EquipableSwitch);
ToInventory(_EquipableSwitch, LOW_SteelWatchFoundry_AsylumChest_34e06174-ee14-40fe-9367-d63303ae86ee, 1, 0, 1);

//When killed baneites will drop the switches if the Iron throne is not exploded by a kill switch yet, and start the clock on them (if the iron throne is destroyed by going there and saving the prisoners the kill switches will still work)
IF
KilledBy(_Baneite,_Player, _, _)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _, _)
THEN
DB_LOW_SteelWatchFoundry_BaniteKilledBy((CHARACTER)_Baneite, (CHARACTER)_Player);

//If the baneite was defeated with a clear killer use them for the activation logic
IF
DB_Defeated(_Baneite)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
IsInInventoryOf(_Switch, _Baneite, 1)
AND
DB_LOW_SteelWatchFoundry_BaniteKilledBy((CHARACTER)_Baneite, (CHARACTER)_Player)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);

//If the baneite was defeated without a clear killer, use the neareast player
IF
DB_Defeated(_Baneite)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
IsInInventoryOf(_Switch, _Baneite, 1)
AND
NOT DB_LOW_SteelWatchFoundry_BaniteKilledBy((CHARACTER)_Baneite, _)
AND
GetClosestAlivePlayer(_Baneite, _ClosestPlayer, _)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_ClosestPlayer);

IF
DB_Defeated(_Baneite)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, (ITEM)_Switch, _)
THEN
PROC_DisappearEquipableSwitch((CHARACTER)_Baneite, (ITEM)_Switch);

//A loose (pickpocketed or found) non-disarmed kill switch can be used by the player to activate it
IF
UseStarted(_Player, _Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
NOT IsInInventoryOf(_Switch, _Baneite, 1)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Player, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);
DB_LOW_SteelWatchFoundry_PlayerActivatedSwitch(_Player, _Switch);

//Deadman Switch can be activated by a guard casting the activation spell
IF
CastedSpell(_Baneite, "Shout_LOW_SteelWatchFoundry_ActivateCollarDetonation", _, _, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
IsInInventoryOf(_Switch, _Baneite, 1)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
GetClosestAlivePlayer(_Baneite, _Player, _)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);

PROC
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player)
AND
GetCombatGroupID(_Baneite, _GroupID)
AND
GetPosition(_Baneite, _X, _Y, _Z)
AND
FindValidPosition(_X, _Y, _Z, 2.0, _Switch, 0, _ValidX, _ValidY, _ValidZ)
AND
RealSum(_ValidY, 1.2, _NewY)
THEN
DB_LOW_SteelWatchFoundry_KillswitchHandled(_Switch);
TeleportToPosition(_Switch, _ValidX, _NewY, _ValidZ, "LOW_SteelWatchFoundry_SwitchDropped", 0, 0, 0, 0, 0);
//PROC_DisappearEquipableSwitch((CHARACTER)_Baneite, (ITEM)_Switch);
SetGravity(_Switch, GRAVITYTYPE.Disabled, NULL_00000000-0000-0000-0000-000000000000);
ApplyStatus(_Switch, "LEVITATE", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
ApplyStatus(_Switch, "LOW_STEELWATCHFOUNDRY_INITIATIVEBOOST", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
PROC_SetCanFight(_Switch, 1);
SetCanJoinCombat(_Switch, 1);
SetFaction(_Switch, (FACTION)ACT3_LOW_Foundry_DeadMansSwitch_0453021e-34f1-4133-a3e8-2c70bd79f204);
SetCombatGroupID(_Switch, _GroupID);
PROC_EnterCombat(_Switch, _Player);

//FindValidPosition fallback
PROC
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player)
AND
GetCombatGroupID(_Baneite, _GroupID)
AND
GetPosition(_Baneite, _X, _Y, _Z)
AND
RealSum(_Y, 1.2, _NewY)
THEN
DB_LOW_SteelWatchFoundry_KillswitchHandled(_Switch);
TeleportToPosition(_Switch, _X, _NewY, _Z, "LOW_SteelWatchFoundry_SwitchDropped", 0, 0, 0, 0, 0);
//PROC_DisappearEquipableSwitch((CHARACTER)_Baneite, (ITEM)_Switch);
SetGravity(_Switch, GRAVITYTYPE.Disabled, NULL_00000000-0000-0000-0000-000000000000);
ApplyStatus(_Switch, "LEVITATE", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
ApplyStatus(_Switch, "LOW_STEELWATCHFOUNDRY_INITIATIVEBOOST", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
PROC_SetCanFight(_Switch, 1);
SetCanJoinCombat(_Switch, 1);
SetFaction(_Switch, (FACTION)ACT3_LOW_Foundry_DeadMansSwitch_0453021e-34f1-4133-a3e8-2c70bd79f204);
SetCombatGroupID(_Switch, _GroupID);
PROC_EnterCombat(_Switch, _Player);

IF
EnterCombatFailed(_Switch, _Player)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _)
AND
DB_Players(_Players)
THEN
TeleportTo(S_LOW_SteelWathcFoundry_FTBHelper_2998a6d7-4335-450a-be87-b8a48a8e4822, _Player, "LOW_SteelWatchFoundry_TeleportedFTBHelper", 0, 0, 0, 0, 1);
ForceTurnBasedMode((CHARACTER)_Player, 1);

//if the switch is moved, it should no longer hover
IF
Moved(_Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, _Switch, _)
THEN
SetGravity(_Switch, GRAVITYTYPE.Enabled, NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Switch, "LEVITATE", NULL_00000000-0000-0000-0000-000000000000);

//This catches when the Switch has been dropped
IF 
EntityEvent(_Switch, "LOW_SteelWatchFoundry_SwitchDropped")
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_DroppedSwitch(_Switch)
THEN
DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch);
PROC_PlayLoopingAnimation((ITEM)_Switch, (ANIMATION)OBJ_Use_Activate_01_42c02cc0-0503-4ca9-9ea0-45564bd0e5d4, (ANIMATION)OBJ_Idle_Activated_01_8be9179a-3dc5-4a35-bd61-33af16176cf4, (ANIMATION)OBJ_Use_Deactivate_01_bb1e8405-8773-46d1-92c8-9f42d900922b);
SetCanPickUp((ITEM)_Switch, 0);
ObjectTimerLaunch(_Switch, _String, 12000, 0);
//ObjectQuestTimerLaunch(_Player, _QuestTimerString, "LOW_SteelWatchFoundry_KillSwitchTimers", _TotalTurnsNumber, 1);
//TurnBasedTimerLaunch(_Switch, _String, "LOW_SteelWatchFoundry_KillSwitchTimers", 12000);
DB_LOW_SteelWatchFoundry_DroppedSwitch((ITEM)_Switch);

//Fallback: if the switch was dropped and there is noone to blame for the Baneite's death (e.g."killcombat"), the switch enters into combat with the closest alive player
IF
DB_LOW_SteelWatchFoundry_DroppedSwitch(_Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _)
AND
NOT DB_LOW_SteelWatchFoundry_BaniteKilledBy((CHARACTER)_Baneite, _)
AND
GetClosestAlivePlayer(_Switch, _Player, _)
THEN
PROC_EnterCombat(_Switch, _Player);

/*
//after the IRN throne Gondians will attack kill switches
IF
DB_LOW_SteelWatchFoundry_DroppedSwitch(_Switch)
AND
DB_GlobalFlag(LOW_SteelWatchFoundry_State_ReturnedFromIronThrone_16f58dd6-71c1-41e8-b053-b32991ac8fa1)
AND
DB_LOW_Gondians(_Gondian)
THEN
AiAddInterestingItem((CHARACTER)_Gondian, _Switch); 
*/

IF
AttackedBy(_Switch, _Gondian, _, _, _, _, _)
AND
DB_LOW_SteelWatchFoundry_ActiveSwitch((ITEM)_Switch)
AND
DB_LOW_Gondians(_Gondian)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, _Switch, _String)
THEN
PROC_LOW_DisarmSwitch(_Switch, _String, (CHARACTER)_Gondian);

//TODO: If it fails to enter into combat with the player (likely because of distance) auto-disarm it and possible set it off stage

//Dead Man's Switch ADs
IF
EnteredCombat(_Switch, _)
AND
DB_LOW_SteelWatchFoundry_DroppedSwitch((ITEM)_Switch)
THEN
PROC_TryStartAD((DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_DeadMansSwitchWarnings_da7e4c93-f6d9-418b-fe19-6eac58103f89, _Switch);

IF
TurnStarted(_Switch)
AND
DB_LOW_SteelWatchFoundry_ActiveSwitch((ITEM)_Switch)
AND
NOT GetFlag(CRE_SteelWatchFoundry_State_SwitchADOver_dae10449-748e-27db-d021-be5d23b3a2cc, _Switch, 1)
THEN
PROC_TryStartAD((DIALOGRESOURCE)LOW_SteelWatchFoundry_AD_DeadMansSwitchWarnings_da7e4c93-f6d9-418b-fe19-6eac58103f89, _Switch);
SetEntityEventReal(_Switch, "GLO_CombatWait", 2.0);

//If the timer expires on the Dead Man's Switch, the Iron Throne is destroyed
IF
ObjectTimerFinished(_Switch, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _)
AND
DB_CurrentLevel("CTY_Main_A")
THEN
PROC_LOW_SteelWatchFoundry_KillSwitchKill();
DebugText(_Switch, "Iron Throne Exploded");

IF
ObjectTimerFinished(_Switch, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _)
AND
NOT DB_CurrentLevel("CTY_Main_A")
THEN
DB_KillSwitchTriggeredOffRegion(1);

IF
DB_KillSwitchTriggeredOffRegion(1)
AND
DB_CurrentLevel("CTY_Main_A")
AND
QRY_OnlyOnce("LOW_SteelWatchFoundry_KillSwitchOffRegionExecution")
THEN
PROC_LOW_SteelWatchFoundry_KillSwitchKill();

IF
ObjectTimerFinished(_Switch, _)
AND
DB_LOW_SteelWatchFoundry_PlayerActivatedSwitch(_Player, (ITEM)_Switch)
THEN
RealtimeObjectTimerLaunch(_Player, "LOW_SteelWatchFoundry_PlayerActivatedKillSwitch_BaneiteHostilityTimer", 4000);

PROC
PROC_LOW_SteelWatchFoundry_KillSwitchKill()
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchKilledGondians_8930425e-fa90-41b2-a222-67eacf8753f5)
THEN
SetFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchKilledGondians_8930425e-fa90-41b2-a222-67eacf8753f5);

PROC
PROC_LOW_SteelWatchFoundry_KillSwitchKill()
AND
DB_Players(_Player)
AND
QRY_OnlyOnce("LOW_SteelWatchFoundry_CollarsExplode")
THEN
PROC_LOW_GondianCollarsDisableHealing();
RealtimeObjectTimerLaunch(_Player, "LOW_StillWatchFoundry_BeforeCollarWaitTime", 1000);
PROC_LOW_LooseCollarsDestroy();
PROC_LOW_SteelWatchFoundry_DeactivateAllSwitches();

IF
ObjectTimerFinished(_Player, "LOW_StillWatchFoundry_BeforeCollarWaitTime")
THEN
PROC_LOW_GondianCollarsGoOff();
RealtimeObjectTimerLaunch(_Player, "LOW_StillWatchFoundry_AfterCollarWaitTime", 3000);

IF
ObjectTimerFinished(_, "LOW_StillWatchFoundry_AfterCollarWaitTime")
AND
NOT DB_GlobalFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
AND
NOT DB_KillSwitchTriggeredOffRegion(1)
THEN
PROC_LOW_SteelWatchFoundry_DestroyIronThrone();
PROC_LOW_SteelWatchFoundry_StartIRNDestructionCinematic();



PROC
PROC_LOW_SteelWatchFoundry_DestroyIronThrone()
AND
NOT DB_GlobalFlag(IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
THEN
SetFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95);
SetFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9);
SetFlag((FLAG)LOW_SteelWatchFoundry_State_AllIronThronePrisonersDead_4fefe27f-7cd6-44b1-9322-a57b22246271);
SetFlag((FLAG)LOW_SteelWatchFoundry_State_MajorityIronThronePrisonersDead_6c40a75d-32ae-4402-a54c-062805f7ee7d);
SetFlag((FLAG)LOW_SteelWatchFoundry_State_AnyIronThronePrisonersDead_5d6c4329-ee56-4084-8220-d627b716ac87);
SetFlag((FLAG)IRN_IronThrone_State_FundangosDaughterDefeated_e4080664-1771-46d5-8a8b-b0c0c7815cc2);

PROC
PROC_LOW_GondianCollarsDisableHealing()
AND
DB_LOW_SteelWatchFoundry_Collared(_Collared)
THEN
PROC_SelfHealing_Disable((CHARACTER)_Collared);

PROC
PROC_LOW_GondianCollarsGoOff()
AND
DB_LOW_SteelWatchFoundry_Collared(_Collared)
THEN
CreateExplosion(_Collared, "Projectile_LOW_SteelWatchFoundry_CollarExplosion", -1);
Die(_Collared, DEATHTYPE.Incinerate, NULL_00000000-0000-0000-0000-000000000000, 1, 0);

//If the Gondian was killed in any way, get rid of their collar
IF
DB_PermaDefeated(_Collared)
AND
DB_LOW_SteelWatchFoundry_Collared(_Collared)
THEN
PROC_LOW_SteelWatchFoundry_DestroyCollar(_Collared);

PROC
PROC_LOW_SteelWatchFoundry_DestroyCollar((GUIDSTRING)_Char)
AND
GetItemByTemplateInInventory((ITEMROOT)QUEST_LOW_SteelWatchFoundry_ExplodingCollar_47af23c3-7eb0-4a49-a4a4-f2ee5ab521c0, _Char, _Item)
THEN
ToInventory(_Item, LOW_SteelWatchFoundry_AsylumChest_34e06174-ee14-40fe-9367-d63303ae86ee, 1, 0, 1);

PROC
PROC_LOW_LooseCollarsDestroy()
AND
DB_LOW_SteelWatchFoundry_Carrier(_Char)
AND
GetItemByTemplateInInventory((ITEMROOT)QUEST_LOW_SteelWatchFoundry_ExplodingCollar_47af23c3-7eb0-4a49-a4a4-f2ee5ab521c0, _Char, _Item)
THEN
ToInventory(_Item, LOW_SteelWatchFoundry_AsylumChest_34e06174-ee14-40fe-9367-d63303ae86ee, 1, 0, 1);
TemplateAddTo(QUEST_LOW_SteelWatchFoundry_DestroyedCollar_2071b74c-95b4-4490-91b7-cf5e250f22ab, _Char, 1, 0);

PROC
PROC_LOW_LooseCollarsDestroy()
AND
DB_LOW_SteelWatchFoundry_LooseCollars(_Collar)
AND
CreateAtObject(QUEST_LOW_SteelWatchFoundry_DestroyedCollar_2071b74c-95b4-4490-91b7-cf5e250f22ab, _Collar, 0, 0, "", 1, _)
THEN
PROC_SetOnStage(_Collar, 0);

PROC
PROC_LOW_SteelWatchFoundry_StartIRNDestructionCinematic()
AND
DB_Players(_Player)
AND
IsControlled(_Player, 1)
AND
DB_LOW_SteelWatchFoundry_RoomTriggers(_Room)
AND
DB_InRegion(_Player, (TRIGGER)_Room)
AND
QRY_StartDialog_Fixed((DIALOGRESOURCE)LOW_SteelWatchFoundry_IronThroneExplosionRumble_ad99d1cb-a428-7b58-ff84-0c35346d0d9e, _Player)
THEN
DB_NOOP(1);

PROC
PROC_LOW_SteelWatchFoundry_FailedRevolution()
AND
DB_LOW_Gondians(_Gondian)
THEN
Die(_Gondian, DEATHTYPE.Physical, NULL_00000000-0000-0000-0000-000000000000, 1, 0, 0.0);

PROC
PROC_LOW_SteelWatchFoundry_DeactivateAllSwitches()
AND
DB_LOW_SteelWatchFoundry_DroppedSwitch(_Switch)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, _Switch, _String)
AND
DB_Players(_Player)
THEN
StopAnimation(_Switch, 0);
ObjectTimerCancel(_Switch, _String);
NOT DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch);
LeaveCombat(_Switch);
SetCanFight(_Switch, 0);
SetCanJoinCombat(_Switch, 0);
SetGravity(_Switch, GRAVITYTYPE.Enabled, NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Switch, "LEVITATE", NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Switch, "LOW_STEELWATCHFOUNDRY_INITIATIVEBOOST", NULL_00000000-0000-0000-0000-000000000000);


PROC
PROC_LOW_SteelWatchFoundry_DeactivateAllSwitches()
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
THEN
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, NULL_00000000-0000-0000-0000-000000000000);

//If you try to interact with a switch when it's already disarmed you hear AD that it's already disarmed
IF
UseStarted(_Player, _Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _)
AND
NOT DB_GlobalFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
AND
DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
THEN
DebugText(_Player, "This is already disarmed.");

//If you interact with the Switch while it's active, you roll to deactivate it
IF
UseStarted(_Player, _Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _String)
AND
DB_Players(_Player)
AND
DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchBeingDisarmed(_Switch)
AND
NOT GetFlag(LOW_SteelWatchFoundry_State_HasDisarmedFirstKillSwitch_9a793bd4-c517-43db-bc26-71f3d318aa23, _Player, 1)
THEN
DB_LOW_SteelWatchFoundry_SwitchBeingDisarmed((ITEM)_Switch);
RequestActiveRoll(_Player, _Switch,  "Intelligence", (DIFFICULTYCLASS)Act1_VeryEasy_8d398021-34e0-40b9-b7b2-0445f38a4c0b, "LOW_SteelWatchFoundry_DeadMansDisarm");



//If you interact with the Switch and you (the player) has already disarmed a switch before, just disarm it automatically
IF
UseStarted(_Player, _Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _String)
AND
DB_Players(_Player)
AND
DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _)
AND
NOT DB_LOW_SteelWatchFoundry_SwitchBeingDisarmed(_Switch)
AND
GetFlag(LOW_SteelWatchFoundry_State_HasDisarmedFirstKillSwitch_9a793bd4-c517-43db-bc26-71f3d318aa23, _Player, 1)
THEN
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);

//Successful disarm
IF
RollResult("LOW_SteelWatchFoundry_DeadMansDisarm", _Player, _Switch, 1, _, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _String)
THEN
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);

IF
DestroyedBy(_Switch, _Destroyer, _, _)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, (ITEM)_Switch, _String)
THEN
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Destroyer);

PROC
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Player)
THEN
NOT DB_LOW_SteelWatchFoundry_ActiveSwitch(_Switch);
ObjectTimerCancel(_Switch, _String);
PROC_StopLoopEffect(_Switch, _String);
LeaveCombat(_Switch);
SetCombatGroupID(_Switch, "");
SetCanFight(_Switch, 0);
SetCanJoinCombat(_Switch, 0);
DebugText(_Switch, "Successfuly disarmed.");
DB_LOW_SteelWatchFoundry_SwitchDisarmedBy(_Switch, _Player);
SetGravity(_Switch, GRAVITYTYPE.Enabled, NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Switch, "LEVITATE", NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Switch, "LOW_STEELWATCHFOUNDRY_INITIATIVEBOOST", NULL_00000000-0000-0000-0000-000000000000);
StopAnimation(_Switch, 0);
SetCanInteract(_Switch, 0);

PROC
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Player)
AND
DB_LOW_SteelWatchFoundry_PlayerActivatedSwitch(_Activator, _Switch)
THEN
NOT DB_LOW_SteelWatchFoundry_PlayerActivatedSwitch(_Activator, _Switch);

PROC
PROC_LOW_DisarmSwitch((ITEM)_Switch, (STRING)_String, (CHARACTER)_Player)
AND
DB_Players(_Player)
THEN
SetFlag(LOW_SteelWatchFoundry_State_HasDisarmedFirstKillSwitch_9a793bd4-c517-43db-bc26-71f3d318aa23, _Player, 0);
PROC_TryStartAD((DIALOGRESOURCE)LOW_SteelWatchFoundry_PAD_DeadMansSwitchDisarmed_b3ef1c41-48bb-aec4-6240-f5a39ed106ea, _Player);

//Failed disarm
IF
RollResult("LOW_SteelWatchFoundry_DeadMansDisarm", _Player, _Switch, 0, _, _)
AND
DB_CurrentLevel("CTY_Main_A")
THEN
PROC_LOW_SteelWatchFoundry_KillSwitchKill();

IF
RollResult("LOW_SteelWatchFoundry_DeadMansDisarm", _Player, _Switch, 0, _, _)
AND
NOT DB_CurrentLevel("CTY_Main_A")
THEN
DB_KillSwitchTriggeredOffRegion(1);

IF
RollResult("LOW_SteelWatchFoundry_DeadMansDisarm", _Player, _Switch, 0, _, _)
AND
DB_LOW_SteelWatchFoundry_PlayerActivatedSwitch(_, (ITEM)_Switch)
THEN
RealtimeObjectTimerLaunch(_Player, "LOW_SteelWatchFoundry_PlayerActivatedKillSwitch_BaneiteHostilityTimer", 4000);

IF
ObjectTimerFinished(_, "LOW_SteelWatchFoundry_PlayerActivatedKillSwitch_BaneiteHostilityTimer")
THEN
PROC_SetRelationToPlayers((FACTION)ACT3_LOW_SteelWatchFoundry_Banites_Workroom_1d8980ed-53a1-40ad-b0a5-346b5d3dc3d6, 0);

//General disarm cleanup
IF
RollResult("LOW_SteelWatchFoundry_DeadMansDisarm", _Player, _Switch, _, _, _)
THEN
NOT DB_LOW_SteelWatchFoundry_SwitchBeingDisarmed((ITEM)_Switch);


//If you try to interact with a switch when the iron throne is already destroyed by a kill switch, hear an AD that it's already destroyed and the switch serves no more purpose
IF
UseStarted(_Player, _Switch)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_, _Switch, _)
AND
DB_GlobalFlag(LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
THEN
DebugText(_Player, "The Iron Throne is already destroyed. This serves no purpuse any more.");

//If you try to interact with a switch when someone else is already working on it, get and AD saying that
IF
UseStarted(_Player, _Switch)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_KillSwitchDestroyedIRN_7d083a0a-4f0d-4ebb-aab5-fb45c90b5c95)
AND
DB_LOW_SteelWatchFoundry_SwitchBeingDisarmed(_Switch)
THEN
DebugText(_Player, "Only one person can work on it at a time.");
//END_REGION

//REGION Iron throne clues
IF
DB_LOW_SteelWatchFoundry_ClueADZones(_Trigger, _, _)
THEN
PROC_TriggerRegisterForPlayers(_Trigger);

IF
EnteredTrigger(_Player, _Trigger)
AND
DB_LOW_SteelWatchFoundry_ClueADZones(_Trigger, _Flag, _String)
AND
DB_Players(_Player)
AND
NOT DB_GlobalFlag(_Flag)
THEN
SetFlag(_Flag);
DB_TriggerEvents_AllPlayersLeft(_Trigger, _String);

//If all players leave the trigger
IF
EntityEvent(_, _String)
AND
DB_LOW_SteelWatchFoundry_ClueADZones(_, _Flag, _String)
THEN
ClearFlag(_Flag);


IF
UseFinished(_, _Readable, 1)
AND
DB_LOW_SteelWatchFoundry_IRNClueDocs(_Readable)
THEN
SetFlag(LOW_SteelWatchFoundry_State_IRNLocationDiscovered_02ea0627-74cc-486c-9d30-f96483374711);

//END_REGION

//REGION Zombies
IF
LevelLoaded("CTY_Main_A")
AND
DB_LOW_SteelWatchFoundry_OperatingZombies(_Zombie, _OpTable)
AND
NOT DB_Defeated(_Zombie)
THEN
Use(_Zombie, _OpTable, 1,1, "LOW_SteelWatchFoundry_ZombieLaidDown");

IF
EntityEvent(_Zombie, "LOW_SteelWatchFoundry_ZombieLaidDown")
THEN
ApplyStatus(_Zombie, "LOW_STEELWATCHFOUNDRY_UNDEROPERATION", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);

IF
UseStarted(_Player, _ZombieItem)
AND
DB_LOW_SteelWatchFoundry_ZombieCommentItems(_ZombieItem, _AD)
THEN
PROC_TryStartAD(_AD, _Player);
//END_REGION

//REGION Alarm Door
PROC
PROC_BlockUseOfItem(_Player, S_LOW_DoorToControlCentre_cc6552ec-c827-4708-bc18-9fe54b96a507)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_Event_AlarmDoor_AlarmTriggered_2a24e365-08b2-4f33-8454-b966e0f243cd)
AND
NOT DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_AlarmDoodr_AlarmDisabled_5c6be4c7-029f-4c30-b765-a251668dafec)
AND
NOT GetFlag(LOW_SteelWatchFoundry_State_AlarmDoor_HasKey_1004ec43-6bf9-48dd-a6a0-426f6e9c273a, _Player, 1)
AND
QRY_StartDialog_Fixed((DIALOGRESOURCE)LOW_SteelWatchFoundry_AlarmDoor_5e0d8f7b-07fd-1fa6-9589-a3fc1775efd7, S_LOW_DoorToControlCentre_cc6552ec-c827-4708-bc18-9fe54b96a507, _Player)
THEN
DB_CustomUseItemResponse(_Player, S_LOW_DoorToControlCentre_cc6552ec-c827-4708-bc18-9fe54b96a507, 0);

IF
DB_GlobalFlag((FLAG)LOW_SteelWatchFoundry_State_AlarmDoor_Unlocked_8e3da6aa-e186-43d9-a8ac-a9eb2e5f8ee2)
THEN
Unlock(S_LOW_DoorToControlCentre_cc6552ec-c827-4708-bc18-9fe54b96a507);

PROC
PROC_FlagReactionAfterDialog(_Player, (FLAG)LOW_SteelWatchFoundry_Event_AlarmDoor_TriggeredBy_4e69be13-f88b-4d31-b2ca-d39290149d62)
AND
QRY_OnlyOnce("LOW_SteelWatchFoundry_DoorAlarmTriggered")
THEN
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player);


PROC
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player)
AND
DB_LOW_LabBaneites(_Baneites)
AND
NOT DB_Is_InCombat(_Baneites, _)
AND
CrimeGetNewID(_CrimeID)
AND
GetPosition(_Player, _X, _Y, _Z)
AND
QRY_OnlyOnce("LOW_SteelWatchFoundry_DoorCrimeRegistered")
THEN
PROC_CharacterRegisterCrimeWithPosition(_Player, "LOW_SteelWatchFoundry_Trespass_Aggressive", NULL_00000000-0000-0000-0000-000000000000,_X,_Y,_Z,_Baneites,_CrimeID);


PROC
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player)
AND
DB_LOW_LabBaneites(_Baneites)
AND
NOT DB_Is_InCombat(_Baneites, _)
THEN
SetFlag(LOW_SteelWatchFoundry_Event_GoToAlarmDoor_64bc125e-52ee-47b6-90f4-1a8691163dea, _Baneites, 0);

PROC
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player)
AND
NOT DB_GlobalFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
AND
DB_LOW_LabBaneites(_Baneite)
AND
DB_LOW_SteelWatchFoundry_DeadMansSwitches(_Baneite, _Switch, _String)
AND
NOT DB_LOW_SteelWatchFoundry_KillswitchHandled((ITEM)_Switch)
THEN
PROC_LOW_SteelWatchFoundry_ActivateKillSwitch((CHARACTER)_Baneite, (ITEM)_Switch, (STRING)_String, (CHARACTER)_Player);


PROC
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player)
AND
DB_GlobalFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
THEN
SetFlag((FLAG)LOW_SteelWatchFoundry_State_AlarmDoor_AlarmDisabled_5c6be4c7-029f-4c30-b765-a251668dafec);

IF
DB_GlobalFlag((FLAG)IRN_IronThrone_State_Destroyed_91795368-af06-4b56-9ac1-b78995aa9ea9)
THEN
SetFlag((FLAG)LOW_SteelWatchFoundry_State_AlarmDoor_AlarmDisabled_5c6be4c7-029f-4c30-b765-a251668dafec);

IF
UsingSpellOnTarget(_Player, S_LOW_DoorToControlCentre_cc6552ec-c827-4708-bc18-9fe54b96a507, "Target_Knock", _, _, _)
AND
QRY_OnlyOnce("LOW_SteelWatchFoundry_DoorAlarmTriggered")
THEN
SetFlag((FLAG)LOW_SteelWatchFoundry_Event_AlarmDoor_TriggeredBy_4e69be13-f88b-4d31-b2ca-d39290149d62, _Player);
SetFlag((FLAG)LOW_SteelWatchFoundry_Event_AlarmDoor_AlarmTriggered_2a24e365-08b2-4f33-8454-b966e0f243cd);
PROC_SteelWatchFoundry_TriggerAlarmOn((CHARACTER)_Player);

IF
LeftTrigger(_PartyMember, (TRIGGER)S_LOW_SteelWatchFoundry_LabFloor_SUB_65a2f1d8-f8f9-41ae-b9b6-e561b6069af9)
AND
DB_PartyMembers(_PartyMember)
THEN
CharacterStopCrime(_PartyMember, "LOW_SteelWatchFoundry_Trespass_Aggressive", NULL_00000000-0000-0000-0000-000000000000);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Act3b"
