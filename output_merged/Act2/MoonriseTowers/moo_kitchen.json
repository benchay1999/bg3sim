{
  "metadata": {
    "individual_metadata": {
      "AD_Gnoll02": {
        "synopsis": "A gnoll in the kitchen of Moonrise Tower",
        "how_to_trigger": ""
      },
      "AD_Gnoll01": {
        "synopsis": "A gnoll in the kitchen of Moonrise Tower",
        "how_to_trigger": ""
      },
      "AD_Gnoll00": {
        "synopsis": "A gnoll in the kitchen of Moonrise Tower",
        "how_to_trigger": ""
      },
      "AD_Gnoll001Howl": {
        "synopsis": "The connection to the Gnoll Master has been broken and no player is available to start the dialog, so the Gnolls go immediatelly hostile to everyone.",
        "how_to_trigger": "Without going into the Moonrise Kitchen, kill the Gnoll Master"
      }
    },
    "source_files": [
      "MOO_Kitchen_AD_Gnoll02.json",
      "MOO_Kitchen_AD_Gnoll01.json",
      "MOO_Kitchen_AD_Gnoll00.json",
      "MOO_Kitchen_AD_Gnoll001Howl.json"
    ],
    "automatic_ordering": {
      "reasoning": "The sessions AD_Gnoll00, AD_Gnoll01, and AD_Gnoll02 all share a similar synopsis (a gnoll in the Moonrise Tower kitchen) and their numbering suggests they occur in a sequence \u2013 likely as the player encounters multiple gnolls in the kitchen area. Therefore, it makes sense to assume an order where AD_Gnoll00 comes first, then AD_Gnoll01, and finally AD_Gnoll02. On the other hand, AD_Gnoll001Howl has a different trigger \u2013 it activates when the player kills the Gnoll Master without entering the Moonrise Kitchen. This condition disconnects the link to the Gnoll Master and causes the gnolls to immediately turn hostile. Because triggering AD_Gnoll001Howl prevents the normal kitchen dialogue sessions (AD_Gnoll00, AD_Gnoll01, AD_Gnoll02) from occurring, it is logically mutually exclusive with them.",
      "order": [
        {
          "predecessor": [
            "AD_Gnoll00"
          ],
          "successor": "AD_Gnoll01"
        },
        {
          "predecessor": [
            "AD_Gnoll01"
          ],
          "successor": "AD_Gnoll02"
        }
      ],
      "exclusive": [
        [
          "AD_Gnoll001Howl",
          "AD_Gnoll00"
        ],
        [
          "AD_Gnoll001Howl",
          "AD_Gnoll01"
        ],
        [
          "AD_Gnoll001Howl",
          "AD_Gnoll02"
        ]
      ]
    }
  },
  "dialogue": {
    "AD_Gnoll02_0": {
      "id": "AD_Gnoll02_0",
      "speaker": "'Tomelia'",
      "text": "*Snarl*",
      "context": "",
      "checkflags": [],
      "setflags": [],
      "ruletags": [],
      "approval": [],
      "rolls": "",
      "goto": "",
      "link": "",
      "is_end": true,
      "node_type": "normal",
      "children": {}
    },
    "AD_Gnoll01_0": {
      "id": "AD_Gnoll01_0",
      "speaker": "'Barnabus'",
      "text": "*Chitter*",
      "context": "CinematicNodeContext: [REUSE] GNOLL_Rig_SCENE_PLA_ConflictedFlind_Cackle_01\nGNOLL_M_NKD_Head_A_Rig_SCENE_PLA_ConflictedFlind_Cackle_01\n\nThis cackle might not fit the chitter, and so might not need a custom anim.",
      "checkflags": [],
      "setflags": [],
      "ruletags": [],
      "approval": [],
      "rolls": "",
      "goto": "",
      "link": "",
      "is_end": true,
      "node_type": "normal",
      "children": {}
    },
    "AD_Gnoll00_0": {
      "id": "AD_Gnoll00_0",
      "speaker": "'Timothy'",
      "text": "*Cackle*",
      "context": "CinematicNodeContext: [REUSE] GNOLL_Rig_SCENE_PLA_ConflictedFlind_Cackle_01\nGNOLL_M_NKD_Head_A_Rig_SCENE_PLA_ConflictedFlind_Cackle_01\n\nCustom cackle already exists. Might need alterations?",
      "checkflags": [],
      "setflags": [],
      "ruletags": [],
      "approval": [],
      "rolls": "",
      "goto": "",
      "link": "",
      "is_end": true,
      "node_type": "normal",
      "children": {}
    },
    "AD_Gnoll001Howl_0": {
      "id": "AD_Gnoll001Howl_0",
      "speaker": "'Barnabus'",
      "text": "*Howl!*",
      "context": "",
      "checkflags": [],
      "setflags": [],
      "ruletags": [],
      "approval": [],
      "rolls": "",
      "goto": "",
      "link": "",
      "is_end": true,
      "node_type": "normal",
      "children": {}
    }
  }
}